
IMU_sensore_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac40  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0810aee0  0810aee0  0001aee0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810b3f0  0810b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810b3f8  0810b3f8  0001b3f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810b3fc  0810b3fc  0001b3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e4  10000000  0810b400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000025c  100001e4  0810b5e4  000201e4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000440  0810b5e4  00020440  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 11 .debug_info   000159b5  00000000  00000000  00020257  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000289b  00000000  00000000  00035c0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000f18  00000000  00000000  000384a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000bab  00000000  00000000  000393c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003abcb  00000000  00000000  00039f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000152b3  00000000  00000000  00074b36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e947  00000000  00000000  00089de9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005498  00000000  00000000  00208730  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006b  00000000  00000000  0020dbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e4 	.word	0x100001e4
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810aec8 	.word	0x0810aec8

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001e8 	.word	0x100001e8
 81002dc:	0810aec8 	.word	0x0810aec8

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_uldivmod>:
 8100d98:	b953      	cbnz	r3, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9a:	b94a      	cbnz	r2, 8100db0 <__aeabi_uldivmod+0x18>
 8100d9c:	2900      	cmp	r1, #0
 8100d9e:	bf08      	it	eq
 8100da0:	2800      	cmpeq	r0, #0
 8100da2:	bf1c      	itt	ne
 8100da4:	f04f 31ff 	movne.w	r1, #4294967295
 8100da8:	f04f 30ff 	movne.w	r0, #4294967295
 8100dac:	f000 b9a6 	b.w	81010fc <__aeabi_idiv0>
 8100db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8100db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100db8:	f000 f83c 	bl	8100e34 <__udivmoddi4>
 8100dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100dc4:	b004      	add	sp, #16
 8100dc6:	4770      	bx	lr

08100dc8 <__aeabi_d2lz>:
 8100dc8:	b538      	push	{r3, r4, r5, lr}
 8100dca:	2200      	movs	r2, #0
 8100dcc:	2300      	movs	r3, #0
 8100dce:	4604      	mov	r4, r0
 8100dd0:	460d      	mov	r5, r1
 8100dd2:	f7ff ff0b 	bl	8100bec <__aeabi_dcmplt>
 8100dd6:	b928      	cbnz	r0, 8100de4 <__aeabi_d2lz+0x1c>
 8100dd8:	4620      	mov	r0, r4
 8100dda:	4629      	mov	r1, r5
 8100ddc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100de0:	f000 b80a 	b.w	8100df8 <__aeabi_d2ulz>
 8100de4:	4620      	mov	r0, r4
 8100de6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dea:	f000 f805 	bl	8100df8 <__aeabi_d2ulz>
 8100dee:	4240      	negs	r0, r0
 8100df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100df4:	bd38      	pop	{r3, r4, r5, pc}
 8100df6:	bf00      	nop

08100df8 <__aeabi_d2ulz>:
 8100df8:	b5d0      	push	{r4, r6, r7, lr}
 8100dfa:	4b0c      	ldr	r3, [pc, #48]	; (8100e2c <__aeabi_d2ulz+0x34>)
 8100dfc:	2200      	movs	r2, #0
 8100dfe:	4606      	mov	r6, r0
 8100e00:	460f      	mov	r7, r1
 8100e02:	f7ff fc81 	bl	8100708 <__aeabi_dmul>
 8100e06:	f7ff ff57 	bl	8100cb8 <__aeabi_d2uiz>
 8100e0a:	4604      	mov	r4, r0
 8100e0c:	f7ff fc02 	bl	8100614 <__aeabi_ui2d>
 8100e10:	4b07      	ldr	r3, [pc, #28]	; (8100e30 <__aeabi_d2ulz+0x38>)
 8100e12:	2200      	movs	r2, #0
 8100e14:	f7ff fc78 	bl	8100708 <__aeabi_dmul>
 8100e18:	4602      	mov	r2, r0
 8100e1a:	460b      	mov	r3, r1
 8100e1c:	4630      	mov	r0, r6
 8100e1e:	4639      	mov	r1, r7
 8100e20:	f7ff faba 	bl	8100398 <__aeabi_dsub>
 8100e24:	f7ff ff48 	bl	8100cb8 <__aeabi_d2uiz>
 8100e28:	4621      	mov	r1, r4
 8100e2a:	bdd0      	pop	{r4, r6, r7, pc}
 8100e2c:	3df00000 	.word	0x3df00000
 8100e30:	41f00000 	.word	0x41f00000

08100e34 <__udivmoddi4>:
 8100e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8100e38:	9e08      	ldr	r6, [sp, #32]
 8100e3a:	460d      	mov	r5, r1
 8100e3c:	4604      	mov	r4, r0
 8100e3e:	460f      	mov	r7, r1
 8100e40:	2b00      	cmp	r3, #0
 8100e42:	d14a      	bne.n	8100eda <__udivmoddi4+0xa6>
 8100e44:	428a      	cmp	r2, r1
 8100e46:	4694      	mov	ip, r2
 8100e48:	d965      	bls.n	8100f16 <__udivmoddi4+0xe2>
 8100e4a:	fab2 f382 	clz	r3, r2
 8100e4e:	b143      	cbz	r3, 8100e62 <__udivmoddi4+0x2e>
 8100e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8100e54:	f1c3 0220 	rsb	r2, r3, #32
 8100e58:	409f      	lsls	r7, r3
 8100e5a:	fa20 f202 	lsr.w	r2, r0, r2
 8100e5e:	4317      	orrs	r7, r2
 8100e60:	409c      	lsls	r4, r3
 8100e62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8100e66:	fa1f f58c 	uxth.w	r5, ip
 8100e6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8100e6e:	0c22      	lsrs	r2, r4, #16
 8100e70:	fb0e 7711 	mls	r7, lr, r1, r7
 8100e74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8100e78:	fb01 f005 	mul.w	r0, r1, r5
 8100e7c:	4290      	cmp	r0, r2
 8100e7e:	d90a      	bls.n	8100e96 <__udivmoddi4+0x62>
 8100e80:	eb1c 0202 	adds.w	r2, ip, r2
 8100e84:	f101 37ff 	add.w	r7, r1, #4294967295
 8100e88:	f080 811c 	bcs.w	81010c4 <__udivmoddi4+0x290>
 8100e8c:	4290      	cmp	r0, r2
 8100e8e:	f240 8119 	bls.w	81010c4 <__udivmoddi4+0x290>
 8100e92:	3902      	subs	r1, #2
 8100e94:	4462      	add	r2, ip
 8100e96:	1a12      	subs	r2, r2, r0
 8100e98:	b2a4      	uxth	r4, r4
 8100e9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8100e9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8100ea2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100ea6:	fb00 f505 	mul.w	r5, r0, r5
 8100eaa:	42a5      	cmp	r5, r4
 8100eac:	d90a      	bls.n	8100ec4 <__udivmoddi4+0x90>
 8100eae:	eb1c 0404 	adds.w	r4, ip, r4
 8100eb2:	f100 32ff 	add.w	r2, r0, #4294967295
 8100eb6:	f080 8107 	bcs.w	81010c8 <__udivmoddi4+0x294>
 8100eba:	42a5      	cmp	r5, r4
 8100ebc:	f240 8104 	bls.w	81010c8 <__udivmoddi4+0x294>
 8100ec0:	4464      	add	r4, ip
 8100ec2:	3802      	subs	r0, #2
 8100ec4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8100ec8:	1b64      	subs	r4, r4, r5
 8100eca:	2100      	movs	r1, #0
 8100ecc:	b11e      	cbz	r6, 8100ed6 <__udivmoddi4+0xa2>
 8100ece:	40dc      	lsrs	r4, r3
 8100ed0:	2300      	movs	r3, #0
 8100ed2:	e9c6 4300 	strd	r4, r3, [r6]
 8100ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100eda:	428b      	cmp	r3, r1
 8100edc:	d908      	bls.n	8100ef0 <__udivmoddi4+0xbc>
 8100ede:	2e00      	cmp	r6, #0
 8100ee0:	f000 80ed 	beq.w	81010be <__udivmoddi4+0x28a>
 8100ee4:	2100      	movs	r1, #0
 8100ee6:	e9c6 0500 	strd	r0, r5, [r6]
 8100eea:	4608      	mov	r0, r1
 8100eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100ef0:	fab3 f183 	clz	r1, r3
 8100ef4:	2900      	cmp	r1, #0
 8100ef6:	d149      	bne.n	8100f8c <__udivmoddi4+0x158>
 8100ef8:	42ab      	cmp	r3, r5
 8100efa:	d302      	bcc.n	8100f02 <__udivmoddi4+0xce>
 8100efc:	4282      	cmp	r2, r0
 8100efe:	f200 80f8 	bhi.w	81010f2 <__udivmoddi4+0x2be>
 8100f02:	1a84      	subs	r4, r0, r2
 8100f04:	eb65 0203 	sbc.w	r2, r5, r3
 8100f08:	2001      	movs	r0, #1
 8100f0a:	4617      	mov	r7, r2
 8100f0c:	2e00      	cmp	r6, #0
 8100f0e:	d0e2      	beq.n	8100ed6 <__udivmoddi4+0xa2>
 8100f10:	e9c6 4700 	strd	r4, r7, [r6]
 8100f14:	e7df      	b.n	8100ed6 <__udivmoddi4+0xa2>
 8100f16:	b902      	cbnz	r2, 8100f1a <__udivmoddi4+0xe6>
 8100f18:	deff      	udf	#255	; 0xff
 8100f1a:	fab2 f382 	clz	r3, r2
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	f040 8090 	bne.w	8101044 <__udivmoddi4+0x210>
 8100f24:	1a8a      	subs	r2, r1, r2
 8100f26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100f2a:	fa1f fe8c 	uxth.w	lr, ip
 8100f2e:	2101      	movs	r1, #1
 8100f30:	fbb2 f5f7 	udiv	r5, r2, r7
 8100f34:	fb07 2015 	mls	r0, r7, r5, r2
 8100f38:	0c22      	lsrs	r2, r4, #16
 8100f3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100f3e:	fb0e f005 	mul.w	r0, lr, r5
 8100f42:	4290      	cmp	r0, r2
 8100f44:	d908      	bls.n	8100f58 <__udivmoddi4+0x124>
 8100f46:	eb1c 0202 	adds.w	r2, ip, r2
 8100f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8100f4e:	d202      	bcs.n	8100f56 <__udivmoddi4+0x122>
 8100f50:	4290      	cmp	r0, r2
 8100f52:	f200 80cb 	bhi.w	81010ec <__udivmoddi4+0x2b8>
 8100f56:	4645      	mov	r5, r8
 8100f58:	1a12      	subs	r2, r2, r0
 8100f5a:	b2a4      	uxth	r4, r4
 8100f5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8100f60:	fb07 2210 	mls	r2, r7, r0, r2
 8100f64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8100f68:	fb0e fe00 	mul.w	lr, lr, r0
 8100f6c:	45a6      	cmp	lr, r4
 8100f6e:	d908      	bls.n	8100f82 <__udivmoddi4+0x14e>
 8100f70:	eb1c 0404 	adds.w	r4, ip, r4
 8100f74:	f100 32ff 	add.w	r2, r0, #4294967295
 8100f78:	d202      	bcs.n	8100f80 <__udivmoddi4+0x14c>
 8100f7a:	45a6      	cmp	lr, r4
 8100f7c:	f200 80bb 	bhi.w	81010f6 <__udivmoddi4+0x2c2>
 8100f80:	4610      	mov	r0, r2
 8100f82:	eba4 040e 	sub.w	r4, r4, lr
 8100f86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8100f8a:	e79f      	b.n	8100ecc <__udivmoddi4+0x98>
 8100f8c:	f1c1 0720 	rsb	r7, r1, #32
 8100f90:	408b      	lsls	r3, r1
 8100f92:	fa22 fc07 	lsr.w	ip, r2, r7
 8100f96:	ea4c 0c03 	orr.w	ip, ip, r3
 8100f9a:	fa05 f401 	lsl.w	r4, r5, r1
 8100f9e:	fa20 f307 	lsr.w	r3, r0, r7
 8100fa2:	40fd      	lsrs	r5, r7
 8100fa4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8100fa8:	4323      	orrs	r3, r4
 8100faa:	fbb5 f8f9 	udiv	r8, r5, r9
 8100fae:	fa1f fe8c 	uxth.w	lr, ip
 8100fb2:	fb09 5518 	mls	r5, r9, r8, r5
 8100fb6:	0c1c      	lsrs	r4, r3, #16
 8100fb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8100fbc:	fb08 f50e 	mul.w	r5, r8, lr
 8100fc0:	42a5      	cmp	r5, r4
 8100fc2:	fa02 f201 	lsl.w	r2, r2, r1
 8100fc6:	fa00 f001 	lsl.w	r0, r0, r1
 8100fca:	d90b      	bls.n	8100fe4 <__udivmoddi4+0x1b0>
 8100fcc:	eb1c 0404 	adds.w	r4, ip, r4
 8100fd0:	f108 3aff 	add.w	sl, r8, #4294967295
 8100fd4:	f080 8088 	bcs.w	81010e8 <__udivmoddi4+0x2b4>
 8100fd8:	42a5      	cmp	r5, r4
 8100fda:	f240 8085 	bls.w	81010e8 <__udivmoddi4+0x2b4>
 8100fde:	f1a8 0802 	sub.w	r8, r8, #2
 8100fe2:	4464      	add	r4, ip
 8100fe4:	1b64      	subs	r4, r4, r5
 8100fe6:	b29d      	uxth	r5, r3
 8100fe8:	fbb4 f3f9 	udiv	r3, r4, r9
 8100fec:	fb09 4413 	mls	r4, r9, r3, r4
 8100ff0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8100ff4:	fb03 fe0e 	mul.w	lr, r3, lr
 8100ff8:	45a6      	cmp	lr, r4
 8100ffa:	d908      	bls.n	810100e <__udivmoddi4+0x1da>
 8100ffc:	eb1c 0404 	adds.w	r4, ip, r4
 8101000:	f103 35ff 	add.w	r5, r3, #4294967295
 8101004:	d26c      	bcs.n	81010e0 <__udivmoddi4+0x2ac>
 8101006:	45a6      	cmp	lr, r4
 8101008:	d96a      	bls.n	81010e0 <__udivmoddi4+0x2ac>
 810100a:	3b02      	subs	r3, #2
 810100c:	4464      	add	r4, ip
 810100e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8101012:	fba3 9502 	umull	r9, r5, r3, r2
 8101016:	eba4 040e 	sub.w	r4, r4, lr
 810101a:	42ac      	cmp	r4, r5
 810101c:	46c8      	mov	r8, r9
 810101e:	46ae      	mov	lr, r5
 8101020:	d356      	bcc.n	81010d0 <__udivmoddi4+0x29c>
 8101022:	d053      	beq.n	81010cc <__udivmoddi4+0x298>
 8101024:	b156      	cbz	r6, 810103c <__udivmoddi4+0x208>
 8101026:	ebb0 0208 	subs.w	r2, r0, r8
 810102a:	eb64 040e 	sbc.w	r4, r4, lr
 810102e:	fa04 f707 	lsl.w	r7, r4, r7
 8101032:	40ca      	lsrs	r2, r1
 8101034:	40cc      	lsrs	r4, r1
 8101036:	4317      	orrs	r7, r2
 8101038:	e9c6 7400 	strd	r7, r4, [r6]
 810103c:	4618      	mov	r0, r3
 810103e:	2100      	movs	r1, #0
 8101040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8101044:	f1c3 0120 	rsb	r1, r3, #32
 8101048:	fa02 fc03 	lsl.w	ip, r2, r3
 810104c:	fa20 f201 	lsr.w	r2, r0, r1
 8101050:	fa25 f101 	lsr.w	r1, r5, r1
 8101054:	409d      	lsls	r5, r3
 8101056:	432a      	orrs	r2, r5
 8101058:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810105c:	fa1f fe8c 	uxth.w	lr, ip
 8101060:	fbb1 f0f7 	udiv	r0, r1, r7
 8101064:	fb07 1510 	mls	r5, r7, r0, r1
 8101068:	0c11      	lsrs	r1, r2, #16
 810106a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 810106e:	fb00 f50e 	mul.w	r5, r0, lr
 8101072:	428d      	cmp	r5, r1
 8101074:	fa04 f403 	lsl.w	r4, r4, r3
 8101078:	d908      	bls.n	810108c <__udivmoddi4+0x258>
 810107a:	eb1c 0101 	adds.w	r1, ip, r1
 810107e:	f100 38ff 	add.w	r8, r0, #4294967295
 8101082:	d22f      	bcs.n	81010e4 <__udivmoddi4+0x2b0>
 8101084:	428d      	cmp	r5, r1
 8101086:	d92d      	bls.n	81010e4 <__udivmoddi4+0x2b0>
 8101088:	3802      	subs	r0, #2
 810108a:	4461      	add	r1, ip
 810108c:	1b49      	subs	r1, r1, r5
 810108e:	b292      	uxth	r2, r2
 8101090:	fbb1 f5f7 	udiv	r5, r1, r7
 8101094:	fb07 1115 	mls	r1, r7, r5, r1
 8101098:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 810109c:	fb05 f10e 	mul.w	r1, r5, lr
 81010a0:	4291      	cmp	r1, r2
 81010a2:	d908      	bls.n	81010b6 <__udivmoddi4+0x282>
 81010a4:	eb1c 0202 	adds.w	r2, ip, r2
 81010a8:	f105 38ff 	add.w	r8, r5, #4294967295
 81010ac:	d216      	bcs.n	81010dc <__udivmoddi4+0x2a8>
 81010ae:	4291      	cmp	r1, r2
 81010b0:	d914      	bls.n	81010dc <__udivmoddi4+0x2a8>
 81010b2:	3d02      	subs	r5, #2
 81010b4:	4462      	add	r2, ip
 81010b6:	1a52      	subs	r2, r2, r1
 81010b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81010bc:	e738      	b.n	8100f30 <__udivmoddi4+0xfc>
 81010be:	4631      	mov	r1, r6
 81010c0:	4630      	mov	r0, r6
 81010c2:	e708      	b.n	8100ed6 <__udivmoddi4+0xa2>
 81010c4:	4639      	mov	r1, r7
 81010c6:	e6e6      	b.n	8100e96 <__udivmoddi4+0x62>
 81010c8:	4610      	mov	r0, r2
 81010ca:	e6fb      	b.n	8100ec4 <__udivmoddi4+0x90>
 81010cc:	4548      	cmp	r0, r9
 81010ce:	d2a9      	bcs.n	8101024 <__udivmoddi4+0x1f0>
 81010d0:	ebb9 0802 	subs.w	r8, r9, r2
 81010d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 81010d8:	3b01      	subs	r3, #1
 81010da:	e7a3      	b.n	8101024 <__udivmoddi4+0x1f0>
 81010dc:	4645      	mov	r5, r8
 81010de:	e7ea      	b.n	81010b6 <__udivmoddi4+0x282>
 81010e0:	462b      	mov	r3, r5
 81010e2:	e794      	b.n	810100e <__udivmoddi4+0x1da>
 81010e4:	4640      	mov	r0, r8
 81010e6:	e7d1      	b.n	810108c <__udivmoddi4+0x258>
 81010e8:	46d0      	mov	r8, sl
 81010ea:	e77b      	b.n	8100fe4 <__udivmoddi4+0x1b0>
 81010ec:	3d02      	subs	r5, #2
 81010ee:	4462      	add	r2, ip
 81010f0:	e732      	b.n	8100f58 <__udivmoddi4+0x124>
 81010f2:	4608      	mov	r0, r1
 81010f4:	e70a      	b.n	8100f0c <__udivmoddi4+0xd8>
 81010f6:	4464      	add	r4, ip
 81010f8:	3802      	subs	r0, #2
 81010fa:	e742      	b.n	8100f82 <__udivmoddi4+0x14e>

081010fc <__aeabi_idiv0>:
 81010fc:	4770      	bx	lr
 81010fe:	bf00      	nop

08101100 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101100:	b480      	push	{r7}
 8101102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101104:	4b09      	ldr	r3, [pc, #36]	; (810112c <SystemInit+0x2c>)
 8101106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810110a:	4a08      	ldr	r2, [pc, #32]	; (810112c <SystemInit+0x2c>)
 810110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8101110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101114:	4b05      	ldr	r3, [pc, #20]	; (810112c <SystemInit+0x2c>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a04      	ldr	r2, [pc, #16]	; (810112c <SystemInit+0x2c>)
 810111a:	f043 0310 	orr.w	r3, r3, #16
 810111e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101120:	bf00      	nop
 8101122:	46bd      	mov	sp, r7
 8101124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101128:	4770      	bx	lr
 810112a:	bf00      	nop
 810112c:	e000ed00 	.word	0xe000ed00

08101130 <IMU_MPU6050_Init>:

float g = 9.80665;
float Acc_LSB_Sensitivity = 8192.0;
float Gyro_LSB_Sensitivity = 65.5;

uint8_t IMU_MPU6050_Init(void) {
 8101130:	b580      	push	{r7, lr}
 8101132:	b086      	sub	sp, #24
 8101134:	af04      	add	r7, sp, #16
    uint8_t Data;
    HAL_StatusTypeDef ret;

    // Controlla la disponibilità del dispositivo
    ret = HAL_I2C_IsDeviceReady(&hi2c1, MPU6050_ADDR, 2, 1000);
 8101136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810113a:	2202      	movs	r2, #2
 810113c:	21d0      	movs	r1, #208	; 0xd0
 810113e:	4857      	ldr	r0, [pc, #348]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101140:	f001 fc36 	bl	81029b0 <HAL_I2C_IsDeviceReady>
 8101144:	4603      	mov	r3, r0
 8101146:	71fb      	strb	r3, [r7, #7]
    if (ret != HAL_OK) {
 8101148:	79fb      	ldrb	r3, [r7, #7]
 810114a:	2b00      	cmp	r3, #0
 810114c:	d001      	beq.n	8101152 <IMU_MPU6050_Init+0x22>
        return -1;
 810114e:	23ff      	movs	r3, #255	; 0xff
 8101150:	e09f      	b.n	8101292 <IMU_MPU6050_Init+0x162>
    }

    // Verifica che il dispositivo sia quello atteso
    uint8_t check;
    ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8101152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101156:	9302      	str	r3, [sp, #8]
 8101158:	2301      	movs	r3, #1
 810115a:	9301      	str	r3, [sp, #4]
 810115c:	1d7b      	adds	r3, r7, #5
 810115e:	9300      	str	r3, [sp, #0]
 8101160:	2301      	movs	r3, #1
 8101162:	2275      	movs	r2, #117	; 0x75
 8101164:	21d0      	movs	r1, #208	; 0xd0
 8101166:	484d      	ldr	r0, [pc, #308]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101168:	f001 fb08 	bl	810277c <HAL_I2C_Mem_Read>
 810116c:	4603      	mov	r3, r0
 810116e:	71fb      	strb	r3, [r7, #7]
    if ((ret != HAL_OK) || (check != 0x68)) {
 8101170:	79fb      	ldrb	r3, [r7, #7]
 8101172:	2b00      	cmp	r3, #0
 8101174:	d102      	bne.n	810117c <IMU_MPU6050_Init+0x4c>
 8101176:	797b      	ldrb	r3, [r7, #5]
 8101178:	2b68      	cmp	r3, #104	; 0x68
 810117a:	d001      	beq.n	8101180 <IMU_MPU6050_Init+0x50>
        return -1;
 810117c:	23ff      	movs	r3, #255	; 0xff
 810117e:	e088      	b.n	8101292 <IMU_MPU6050_Init+0x162>
    }

	Data = 0;
 8101180:	2300      	movs	r3, #0
 8101182:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8101184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101188:	9302      	str	r3, [sp, #8]
 810118a:	2301      	movs	r3, #1
 810118c:	9301      	str	r3, [sp, #4]
 810118e:	1dbb      	adds	r3, r7, #6
 8101190:	9300      	str	r3, [sp, #0]
 8101192:	2301      	movs	r3, #1
 8101194:	226b      	movs	r2, #107	; 0x6b
 8101196:	21d0      	movs	r1, #208	; 0xd0
 8101198:	4840      	ldr	r0, [pc, #256]	; (810129c <IMU_MPU6050_Init+0x16c>)
 810119a:	f001 f9db 	bl	8102554 <HAL_I2C_Mem_Write>
 810119e:	4603      	mov	r3, r0
 81011a0:	71fb      	strb	r3, [r7, #7]

	Data = 0x08;
 81011a2:	2308      	movs	r3, #8
 81011a4:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 81011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011aa:	9302      	str	r3, [sp, #8]
 81011ac:	2301      	movs	r3, #1
 81011ae:	9301      	str	r3, [sp, #4]
 81011b0:	1dbb      	adds	r3, r7, #6
 81011b2:	9300      	str	r3, [sp, #0]
 81011b4:	2301      	movs	r3, #1
 81011b6:	221c      	movs	r2, #28
 81011b8:	21d0      	movs	r1, #208	; 0xd0
 81011ba:	4838      	ldr	r0, [pc, #224]	; (810129c <IMU_MPU6050_Init+0x16c>)
 81011bc:	f001 f9ca 	bl	8102554 <HAL_I2C_Mem_Write>
 81011c0:	4603      	mov	r3, r0
 81011c2:	71fb      	strb	r3, [r7, #7]

	Data = 0x08;
 81011c4:	2308      	movs	r3, #8
 81011c6:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 81011c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011cc:	9302      	str	r3, [sp, #8]
 81011ce:	2301      	movs	r3, #1
 81011d0:	9301      	str	r3, [sp, #4]
 81011d2:	1dbb      	adds	r3, r7, #6
 81011d4:	9300      	str	r3, [sp, #0]
 81011d6:	2301      	movs	r3, #1
 81011d8:	221b      	movs	r2, #27
 81011da:	21d0      	movs	r1, #208	; 0xd0
 81011dc:	482f      	ldr	r0, [pc, #188]	; (810129c <IMU_MPU6050_Init+0x16c>)
 81011de:	f001 f9b9 	bl	8102554 <HAL_I2C_Mem_Write>
 81011e2:	4603      	mov	r3, r0
 81011e4:	71fb      	strb	r3, [r7, #7]

	Data = 0x31;
 81011e6:	2331      	movs	r3, #49	; 0x31
 81011e8:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 81011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81011ee:	9302      	str	r3, [sp, #8]
 81011f0:	2301      	movs	r3, #1
 81011f2:	9301      	str	r3, [sp, #4]
 81011f4:	1dbb      	adds	r3, r7, #6
 81011f6:	9300      	str	r3, [sp, #0]
 81011f8:	2301      	movs	r3, #1
 81011fa:	2219      	movs	r2, #25
 81011fc:	21d0      	movs	r1, #208	; 0xd0
 81011fe:	4827      	ldr	r0, [pc, #156]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101200:	f001 f9a8 	bl	8102554 <HAL_I2C_Mem_Write>
 8101204:	4603      	mov	r3, r0
 8101206:	71fb      	strb	r3, [r7, #7]

	Data = 0x40;
 8101208:	2340      	movs	r3, #64	; 0x40
 810120a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 810120c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101210:	9302      	str	r3, [sp, #8]
 8101212:	2301      	movs	r3, #1
 8101214:	9301      	str	r3, [sp, #4]
 8101216:	1dbb      	adds	r3, r7, #6
 8101218:	9300      	str	r3, [sp, #0]
 810121a:	2301      	movs	r3, #1
 810121c:	226a      	movs	r2, #106	; 0x6a
 810121e:	21d0      	movs	r1, #208	; 0xd0
 8101220:	481e      	ldr	r0, [pc, #120]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101222:	f001 f997 	bl	8102554 <HAL_I2C_Mem_Write>
 8101226:	4603      	mov	r3, r0
 8101228:	71fb      	strb	r3, [r7, #7]

	Data = 0x78;
 810122a:	2378      	movs	r3, #120	; 0x78
 810122c:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, FIFO_EN_REG, 1, &Data, 1, 1000);
 810122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101232:	9302      	str	r3, [sp, #8]
 8101234:	2301      	movs	r3, #1
 8101236:	9301      	str	r3, [sp, #4]
 8101238:	1dbb      	adds	r3, r7, #6
 810123a:	9300      	str	r3, [sp, #0]
 810123c:	2301      	movs	r3, #1
 810123e:	2223      	movs	r2, #35	; 0x23
 8101240:	21d0      	movs	r1, #208	; 0xd0
 8101242:	4816      	ldr	r0, [pc, #88]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101244:	f001 f986 	bl	8102554 <HAL_I2C_Mem_Write>
 8101248:	4603      	mov	r3, r0
 810124a:	71fb      	strb	r3, [r7, #7]

	Data = 0x00;
 810124c:	2300      	movs	r3, #0
 810124e:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_PIN_CFG_REG, 1, &Data, 1, 1000);
 8101250:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101254:	9302      	str	r3, [sp, #8]
 8101256:	2301      	movs	r3, #1
 8101258:	9301      	str	r3, [sp, #4]
 810125a:	1dbb      	adds	r3, r7, #6
 810125c:	9300      	str	r3, [sp, #0]
 810125e:	2301      	movs	r3, #1
 8101260:	2237      	movs	r2, #55	; 0x37
 8101262:	21d0      	movs	r1, #208	; 0xd0
 8101264:	480d      	ldr	r0, [pc, #52]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101266:	f001 f975 	bl	8102554 <HAL_I2C_Mem_Write>
 810126a:	4603      	mov	r3, r0
 810126c:	71fb      	strb	r3, [r7, #7]

	Data = 0x01;
 810126e:	2301      	movs	r3, #1
 8101270:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, INT_ENABLE_REG, 1, &Data, 1, 1000);
 8101272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101276:	9302      	str	r3, [sp, #8]
 8101278:	2301      	movs	r3, #1
 810127a:	9301      	str	r3, [sp, #4]
 810127c:	1dbb      	adds	r3, r7, #6
 810127e:	9300      	str	r3, [sp, #0]
 8101280:	2301      	movs	r3, #1
 8101282:	2238      	movs	r2, #56	; 0x38
 8101284:	21d0      	movs	r1, #208	; 0xd0
 8101286:	4805      	ldr	r0, [pc, #20]	; (810129c <IMU_MPU6050_Init+0x16c>)
 8101288:	f001 f964 	bl	8102554 <HAL_I2C_Mem_Write>
 810128c:	4603      	mov	r3, r0
 810128e:	71fb      	strb	r3, [r7, #7]

	return 0;
 8101290:	2300      	movs	r3, #0
}
 8101292:	4618      	mov	r0, r3
 8101294:	3708      	adds	r7, #8
 8101296:	46bd      	mov	sp, r7
 8101298:	bd80      	pop	{r7, pc}
 810129a:	bf00      	nop
 810129c:	10000200 	.word	0x10000200

081012a0 <IMU_MPU6050_Read_Acc_Gyro>:

void IMU_MPU6050_Read_Acc_Gyro(MPU6050_Data *y){
 81012a0:	b580      	push	{r7, lr}
 81012a2:	b08c      	sub	sp, #48	; 0x30
 81012a4:	af04      	add	r7, sp, #16
 81012a6:	6078      	str	r0, [r7, #4]
	uint8_t Data[12];
	uint16_t counts= Read_FIFO_Count();
 81012a8:	f000 f8fe 	bl	81014a8 <Read_FIFO_Count>
 81012ac:	4603      	mov	r3, r0
 81012ae:	83fb      	strh	r3, [r7, #30]
	printf("count %d\r\n", counts);
 81012b0:	8bfb      	ldrh	r3, [r7, #30]
 81012b2:	4619      	mov	r1, r3
 81012b4:	4871      	ldr	r0, [pc, #452]	; (810147c <IMU_MPU6050_Read_Acc_Gyro+0x1dc>)
 81012b6:	f006 f8f9 	bl	81074ac <iprintf>
	int16_t app = 0;
 81012ba:	2300      	movs	r3, #0
 81012bc:	83bb      	strh	r3, [r7, #28]
	if(counts>=12){
 81012be:	8bfb      	ldrh	r3, [r7, #30]
 81012c0:	2b0b      	cmp	r3, #11
 81012c2:	f240 80d6 	bls.w	8101472 <IMU_MPU6050_Read_Acc_Gyro+0x1d2>
		HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_R_W_REG, 1, Data, 12, 1000);
 81012c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81012ca:	9302      	str	r3, [sp, #8]
 81012cc:	230c      	movs	r3, #12
 81012ce:	9301      	str	r3, [sp, #4]
 81012d0:	f107 030c 	add.w	r3, r7, #12
 81012d4:	9300      	str	r3, [sp, #0]
 81012d6:	2301      	movs	r3, #1
 81012d8:	2274      	movs	r2, #116	; 0x74
 81012da:	21d0      	movs	r1, #208	; 0xd0
 81012dc:	4868      	ldr	r0, [pc, #416]	; (8101480 <IMU_MPU6050_Read_Acc_Gyro+0x1e0>)
 81012de:	f001 fa4d 	bl	810277c <HAL_I2C_Mem_Read>
 81012e2:	4603      	mov	r3, r0
 81012e4:	76fb      	strb	r3, [r7, #27]
		if (ret == HAL_OK) {
 81012e6:	7efb      	ldrb	r3, [r7, #27]
 81012e8:	2b00      	cmp	r3, #0
 81012ea:	f040 809d 	bne.w	8101428 <IMU_MPU6050_Read_Acc_Gyro+0x188>
		    int16_t app;

		    app = (int16_t)((Data[0] << 8) | Data[1]);
 81012ee:	7b3b      	ldrb	r3, [r7, #12]
 81012f0:	021b      	lsls	r3, r3, #8
 81012f2:	b21a      	sxth	r2, r3
 81012f4:	7b7b      	ldrb	r3, [r7, #13]
 81012f6:	b21b      	sxth	r3, r3
 81012f8:	4313      	orrs	r3, r2
 81012fa:	833b      	strh	r3, [r7, #24]
		    y->Ax_raw = (app / Acc_LSB_Sensitivity) * g;
 81012fc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8101300:	ee07 3a90 	vmov	s15, r3
 8101304:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101308:	4b5e      	ldr	r3, [pc, #376]	; (8101484 <IMU_MPU6050_Read_Acc_Gyro+0x1e4>)
 810130a:	edd3 7a00 	vldr	s15, [r3]
 810130e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101312:	4b5d      	ldr	r3, [pc, #372]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 8101314:	edd3 7a00 	vldr	s15, [r3]
 8101318:	ee67 7a27 	vmul.f32	s15, s14, s15
 810131c:	687b      	ldr	r3, [r7, #4]
 810131e:	edc3 7a00 	vstr	s15, [r3]

		    app = (int16_t)((Data[2] << 8) | Data[3]);
 8101322:	7bbb      	ldrb	r3, [r7, #14]
 8101324:	021b      	lsls	r3, r3, #8
 8101326:	b21a      	sxth	r2, r3
 8101328:	7bfb      	ldrb	r3, [r7, #15]
 810132a:	b21b      	sxth	r3, r3
 810132c:	4313      	orrs	r3, r2
 810132e:	833b      	strh	r3, [r7, #24]
		    y->Ay_raw = (app / Acc_LSB_Sensitivity) * g;
 8101330:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8101334:	ee07 3a90 	vmov	s15, r3
 8101338:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810133c:	4b51      	ldr	r3, [pc, #324]	; (8101484 <IMU_MPU6050_Read_Acc_Gyro+0x1e4>)
 810133e:	edd3 7a00 	vldr	s15, [r3]
 8101342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101346:	4b50      	ldr	r3, [pc, #320]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 8101348:	edd3 7a00 	vldr	s15, [r3]
 810134c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	edc3 7a01 	vstr	s15, [r3, #4]

		    app = (int16_t)((Data[4] << 8) | Data[5]);
 8101356:	7c3b      	ldrb	r3, [r7, #16]
 8101358:	021b      	lsls	r3, r3, #8
 810135a:	b21a      	sxth	r2, r3
 810135c:	7c7b      	ldrb	r3, [r7, #17]
 810135e:	b21b      	sxth	r3, r3
 8101360:	4313      	orrs	r3, r2
 8101362:	833b      	strh	r3, [r7, #24]
		    y->Az_raw = (app / Acc_LSB_Sensitivity) * g;
 8101364:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8101368:	ee07 3a90 	vmov	s15, r3
 810136c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8101370:	4b44      	ldr	r3, [pc, #272]	; (8101484 <IMU_MPU6050_Read_Acc_Gyro+0x1e4>)
 8101372:	edd3 7a00 	vldr	s15, [r3]
 8101376:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810137a:	4b43      	ldr	r3, [pc, #268]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 810137c:	edd3 7a00 	vldr	s15, [r3]
 8101380:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101384:	687b      	ldr	r3, [r7, #4]
 8101386:	edc3 7a02 	vstr	s15, [r3, #8]

		    app = (int16_t)((Data[6] << 8) | Data[7]);
 810138a:	7cbb      	ldrb	r3, [r7, #18]
 810138c:	021b      	lsls	r3, r3, #8
 810138e:	b21a      	sxth	r2, r3
 8101390:	7cfb      	ldrb	r3, [r7, #19]
 8101392:	b21b      	sxth	r3, r3
 8101394:	4313      	orrs	r3, r2
 8101396:	833b      	strh	r3, [r7, #24]
		    y->Wx_raw = (app / Gyro_LSB_Sensitivity) * g;
 8101398:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 810139c:	ee07 3a90 	vmov	s15, r3
 81013a0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013a4:	4b39      	ldr	r3, [pc, #228]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 81013a6:	edd3 7a00 	vldr	s15, [r3]
 81013aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013ae:	4b36      	ldr	r3, [pc, #216]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 81013b0:	edd3 7a00 	vldr	s15, [r3]
 81013b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013b8:	687b      	ldr	r3, [r7, #4]
 81013ba:	edc3 7a03 	vstr	s15, [r3, #12]

		    app = (int16_t)((Data[8] << 8) | Data[9]);
 81013be:	7d3b      	ldrb	r3, [r7, #20]
 81013c0:	021b      	lsls	r3, r3, #8
 81013c2:	b21a      	sxth	r2, r3
 81013c4:	7d7b      	ldrb	r3, [r7, #21]
 81013c6:	b21b      	sxth	r3, r3
 81013c8:	4313      	orrs	r3, r2
 81013ca:	833b      	strh	r3, [r7, #24]
		    y->Wy_raw = (app / Gyro_LSB_Sensitivity) * g;
 81013cc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 81013d0:	ee07 3a90 	vmov	s15, r3
 81013d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 81013d8:	4b2c      	ldr	r3, [pc, #176]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 81013da:	edd3 7a00 	vldr	s15, [r3]
 81013de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013e2:	4b29      	ldr	r3, [pc, #164]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 81013e4:	edd3 7a00 	vldr	s15, [r3]
 81013e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013ec:	687b      	ldr	r3, [r7, #4]
 81013ee:	edc3 7a04 	vstr	s15, [r3, #16]

		    app = (int16_t)((Data[10] << 8) | Data[11]);
 81013f2:	7dbb      	ldrb	r3, [r7, #22]
 81013f4:	021b      	lsls	r3, r3, #8
 81013f6:	b21a      	sxth	r2, r3
 81013f8:	7dfb      	ldrb	r3, [r7, #23]
 81013fa:	b21b      	sxth	r3, r3
 81013fc:	4313      	orrs	r3, r2
 81013fe:	833b      	strh	r3, [r7, #24]
		    y->Wz_raw = (app / Gyro_LSB_Sensitivity) * g;
 8101400:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8101404:	ee07 3a90 	vmov	s15, r3
 8101408:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 810140c:	4b1f      	ldr	r3, [pc, #124]	; (810148c <IMU_MPU6050_Read_Acc_Gyro+0x1ec>)
 810140e:	edd3 7a00 	vldr	s15, [r3]
 8101412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101416:	4b1c      	ldr	r3, [pc, #112]	; (8101488 <IMU_MPU6050_Read_Acc_Gyro+0x1e8>)
 8101418:	edd3 7a00 	vldr	s15, [r3]
 810141c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101420:	687b      	ldr	r3, [r7, #4]
 8101422:	edc3 7a05 	vstr	s15, [r3, #20]
 8101426:	e019      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x1bc>
		} else {
		    printf("Error I2C\r\n");
 8101428:	4819      	ldr	r0, [pc, #100]	; (8101490 <IMU_MPU6050_Read_Acc_Gyro+0x1f0>)
 810142a:	f006 f8a5 	bl	8107578 <puts>
		    switch (ret) {
 810142e:	7efb      	ldrb	r3, [r7, #27]
 8101430:	2b03      	cmp	r3, #3
 8101432:	d00e      	beq.n	8101452 <IMU_MPU6050_Read_Acc_Gyro+0x1b2>
 8101434:	2b03      	cmp	r3, #3
 8101436:	dc10      	bgt.n	810145a <IMU_MPU6050_Read_Acc_Gyro+0x1ba>
 8101438:	2b01      	cmp	r3, #1
 810143a:	d002      	beq.n	8101442 <IMU_MPU6050_Read_Acc_Gyro+0x1a2>
 810143c:	2b02      	cmp	r3, #2
 810143e:	d004      	beq.n	810144a <IMU_MPU6050_Read_Acc_Gyro+0x1aa>
		        case HAL_TIMEOUT:
		            printf("HAL_TIMEOUT \r\n");
		            break;
		        default:
		            // Gestisci il caso HAL_OK
		            break;
 8101440:	e00b      	b.n	810145a <IMU_MPU6050_Read_Acc_Gyro+0x1ba>
		            printf("HAL_ERROR \r\n");
 8101442:	4814      	ldr	r0, [pc, #80]	; (8101494 <IMU_MPU6050_Read_Acc_Gyro+0x1f4>)
 8101444:	f006 f898 	bl	8107578 <puts>
		            break;
 8101448:	e008      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x1bc>
		            printf("HAL_BUSY \r\n");
 810144a:	4813      	ldr	r0, [pc, #76]	; (8101498 <IMU_MPU6050_Read_Acc_Gyro+0x1f8>)
 810144c:	f006 f894 	bl	8107578 <puts>
		            break;
 8101450:	e004      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x1bc>
		            printf("HAL_TIMEOUT \r\n");
 8101452:	4812      	ldr	r0, [pc, #72]	; (810149c <IMU_MPU6050_Read_Acc_Gyro+0x1fc>)
 8101454:	f006 f890 	bl	8107578 <puts>
		            break;
 8101458:	e000      	b.n	810145c <IMU_MPU6050_Read_Acc_Gyro+0x1bc>
		            break;
 810145a:	bf00      	nop
		    }
		}
		if(counts>12){
 810145c:	8bfb      	ldrh	r3, [r7, #30]
 810145e:	2b0c      	cmp	r3, #12
 8101460:	d907      	bls.n	8101472 <IMU_MPU6050_Read_Acc_Gyro+0x1d2>
			printf("Delay \r\n");
 8101462:	480f      	ldr	r0, [pc, #60]	; (81014a0 <IMU_MPU6050_Read_Acc_Gyro+0x200>)
 8101464:	f006 f888 	bl	8107578 <puts>
			printf("Reset FIFO buffer \r\n");
 8101468:	480e      	ldr	r0, [pc, #56]	; (81014a4 <IMU_MPU6050_Read_Acc_Gyro+0x204>)
 810146a:	f006 f885 	bl	8107578 <puts>
			Reset_Reable_FIFO();
 810146e:	f000 f84f 	bl	8101510 <Reset_Reable_FIFO>
		}
	}
}
 8101472:	bf00      	nop
 8101474:	3720      	adds	r7, #32
 8101476:	46bd      	mov	sp, r7
 8101478:	bd80      	pop	{r7, pc}
 810147a:	bf00      	nop
 810147c:	0810aee0 	.word	0x0810aee0
 8101480:	10000200 	.word	0x10000200
 8101484:	1000000c 	.word	0x1000000c
 8101488:	10000008 	.word	0x10000008
 810148c:	10000010 	.word	0x10000010
 8101490:	0810aeec 	.word	0x0810aeec
 8101494:	0810aef8 	.word	0x0810aef8
 8101498:	0810af04 	.word	0x0810af04
 810149c:	0810af10 	.word	0x0810af10
 81014a0:	0810af20 	.word	0x0810af20
 81014a4:	0810af28 	.word	0x0810af28

081014a8 <Read_FIFO_Count>:

uint16_t Read_FIFO_Count(){
 81014a8:	b580      	push	{r7, lr}
 81014aa:	b086      	sub	sp, #24
 81014ac:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint16_t fifo_count = 0;
 81014ae:	2300      	movs	r3, #0
 81014b0:	80fb      	strh	r3, [r7, #6]
	uint8_t Rec_Data[2];
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_H_REG, 1, Rec_Data, 1, 1000);
 81014b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 81014b6:	9302      	str	r3, [sp, #8]
 81014b8:	2301      	movs	r3, #1
 81014ba:	9301      	str	r3, [sp, #4]
 81014bc:	463b      	mov	r3, r7
 81014be:	9300      	str	r3, [sp, #0]
 81014c0:	2301      	movs	r3, #1
 81014c2:	2272      	movs	r2, #114	; 0x72
 81014c4:	21d0      	movs	r1, #208	; 0xd0
 81014c6:	4811      	ldr	r0, [pc, #68]	; (810150c <Read_FIFO_Count+0x64>)
 81014c8:	f001 f958 	bl	810277c <HAL_I2C_Mem_Read>
 81014cc:	4603      	mov	r3, r0
 81014ce:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, FIFO_COUNT_L_REG, 1, Rec_Data+1, 1, 1000);
 81014d0:	463b      	mov	r3, r7
 81014d2:	3301      	adds	r3, #1
 81014d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 81014d8:	9202      	str	r2, [sp, #8]
 81014da:	2201      	movs	r2, #1
 81014dc:	9201      	str	r2, [sp, #4]
 81014de:	9300      	str	r3, [sp, #0]
 81014e0:	2301      	movs	r3, #1
 81014e2:	2273      	movs	r2, #115	; 0x73
 81014e4:	21d0      	movs	r1, #208	; 0xd0
 81014e6:	4809      	ldr	r0, [pc, #36]	; (810150c <Read_FIFO_Count+0x64>)
 81014e8:	f001 f948 	bl	810277c <HAL_I2C_Mem_Read>
 81014ec:	4603      	mov	r3, r0
 81014ee:	717b      	strb	r3, [r7, #5]
	fifo_count = (uint16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 81014f0:	783b      	ldrb	r3, [r7, #0]
 81014f2:	021b      	lsls	r3, r3, #8
 81014f4:	b21a      	sxth	r2, r3
 81014f6:	787b      	ldrb	r3, [r7, #1]
 81014f8:	b21b      	sxth	r3, r3
 81014fa:	4313      	orrs	r3, r2
 81014fc:	b21b      	sxth	r3, r3
 81014fe:	80fb      	strh	r3, [r7, #6]
	return fifo_count;
 8101500:	88fb      	ldrh	r3, [r7, #6]
}
 8101502:	4618      	mov	r0, r3
 8101504:	3708      	adds	r7, #8
 8101506:	46bd      	mov	sp, r7
 8101508:	bd80      	pop	{r7, pc}
 810150a:	bf00      	nop
 810150c:	10000200 	.word	0x10000200

08101510 <Reset_Reable_FIFO>:

void Reset_Reable_FIFO(){
 8101510:	b580      	push	{r7, lr}
 8101512:	b086      	sub	sp, #24
 8101514:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef ret;
	uint8_t Data = 0x04;
 8101516:	2304      	movs	r3, #4
 8101518:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 810151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810151e:	9302      	str	r3, [sp, #8]
 8101520:	2301      	movs	r3, #1
 8101522:	9301      	str	r3, [sp, #4]
 8101524:	1dbb      	adds	r3, r7, #6
 8101526:	9300      	str	r3, [sp, #0]
 8101528:	2301      	movs	r3, #1
 810152a:	226a      	movs	r2, #106	; 0x6a
 810152c:	21d0      	movs	r1, #208	; 0xd0
 810152e:	480d      	ldr	r0, [pc, #52]	; (8101564 <Reset_Reable_FIFO+0x54>)
 8101530:	f001 f810 	bl	8102554 <HAL_I2C_Mem_Write>
 8101534:	4603      	mov	r3, r0
 8101536:	71fb      	strb	r3, [r7, #7]

	Data = 0x40;
 8101538:	2340      	movs	r3, #64	; 0x40
 810153a:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, USER_CTRL_REG, 1, &Data, 1, 1000);
 810153c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101540:	9302      	str	r3, [sp, #8]
 8101542:	2301      	movs	r3, #1
 8101544:	9301      	str	r3, [sp, #4]
 8101546:	1dbb      	adds	r3, r7, #6
 8101548:	9300      	str	r3, [sp, #0]
 810154a:	2301      	movs	r3, #1
 810154c:	226a      	movs	r2, #106	; 0x6a
 810154e:	21d0      	movs	r1, #208	; 0xd0
 8101550:	4804      	ldr	r0, [pc, #16]	; (8101564 <Reset_Reable_FIFO+0x54>)
 8101552:	f000 ffff 	bl	8102554 <HAL_I2C_Mem_Write>
 8101556:	4603      	mov	r3, r0
 8101558:	71fb      	strb	r3, [r7, #7]
}
 810155a:	bf00      	nop
 810155c:	3708      	adds	r7, #8
 810155e:	46bd      	mov	sp, r7
 8101560:	bd80      	pop	{r7, pc}
 8101562:	bf00      	nop
 8101564:	10000200 	.word	0x10000200

08101568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101568:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 810156c:	b08c      	sub	sp, #48	; 0x30
 810156e:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101570:	4b41      	ldr	r3, [pc, #260]	; (8101678 <main+0x110>)
 8101572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101576:	4a40      	ldr	r2, [pc, #256]	; (8101678 <main+0x110>)
 8101578:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810157c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101580:	4b3d      	ldr	r3, [pc, #244]	; (8101678 <main+0x110>)
 8101582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 810158a:	607b      	str	r3, [r7, #4]
 810158c:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810158e:	2001      	movs	r0, #1
 8101590:	f000 ff3e 	bl	8102410 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101594:	f001 fede 	bl	8103354 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101598:	2201      	movs	r2, #1
 810159a:	2102      	movs	r1, #2
 810159c:	2000      	movs	r0, #0
 810159e:	f001 fe5f 	bl	8103260 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 81015a2:	4b36      	ldr	r3, [pc, #216]	; (810167c <main+0x114>)
 81015a4:	681b      	ldr	r3, [r3, #0]
 81015a6:	091b      	lsrs	r3, r3, #4
 81015a8:	f003 030f 	and.w	r3, r3, #15
 81015ac:	2b07      	cmp	r3, #7
 81015ae:	d108      	bne.n	81015c2 <main+0x5a>
 81015b0:	4b33      	ldr	r3, [pc, #204]	; (8101680 <main+0x118>)
 81015b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 81015b6:	4a32      	ldr	r2, [pc, #200]	; (8101680 <main+0x118>)
 81015b8:	f043 0301 	orr.w	r3, r3, #1
 81015bc:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 81015c0:	e007      	b.n	81015d2 <main+0x6a>
 81015c2:	4b2f      	ldr	r3, [pc, #188]	; (8101680 <main+0x118>)
 81015c4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 81015c8:	4a2d      	ldr	r2, [pc, #180]	; (8101680 <main+0x118>)
 81015ca:	f043 0301 	orr.w	r3, r3, #1
 81015ce:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81015d2:	f000 fb7b 	bl	8101ccc <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81015d6:	f000 f8eb 	bl	81017b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 81015da:	f000 f85d 	bl	8101698 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 81015de:	f000 f89b 	bl	8101718 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Data y;
  IMU_MPU6050_Init();
 81015e2:	f7ff fda5 	bl	8101130 <IMU_MPU6050_Init>
  printf("Start \r\n");
 81015e6:	4827      	ldr	r0, [pc, #156]	; (8101684 <main+0x11c>)
 81015e8:	f005 ffc6 	bl	8107578 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(flag_MPU6050_Data_Ready == 1){
 81015ec:	4b26      	ldr	r3, [pc, #152]	; (8101688 <main+0x120>)
 81015ee:	681b      	ldr	r3, [r3, #0]
 81015f0:	2b01      	cmp	r3, #1
 81015f2:	d1fb      	bne.n	81015ec <main+0x84>
	 	  flag_MPU6050_Data_Ready = 0;
 81015f4:	4b24      	ldr	r3, [pc, #144]	; (8101688 <main+0x120>)
 81015f6:	2200      	movs	r2, #0
 81015f8:	601a      	str	r2, [r3, #0]
	 	  IMU_MPU6050_Read_Acc_Gyro(&y);
 81015fa:	f107 0308 	add.w	r3, r7, #8
 81015fe:	4618      	mov	r0, r3
 8101600:	f7ff fe4e 	bl	81012a0 <IMU_MPU6050_Read_Acc_Gyro>
	 	  printf("Ax:%f, Ay:%f, Az: %f [m/s^2]\r\n", y.Ax_raw, y.Ay_raw, y.Az_raw);
 8101604:	68bb      	ldr	r3, [r7, #8]
 8101606:	4618      	mov	r0, r3
 8101608:	f7ff f826 	bl	8100658 <__aeabi_f2d>
 810160c:	4680      	mov	r8, r0
 810160e:	4689      	mov	r9, r1
 8101610:	68fb      	ldr	r3, [r7, #12]
 8101612:	4618      	mov	r0, r3
 8101614:	f7ff f820 	bl	8100658 <__aeabi_f2d>
 8101618:	4604      	mov	r4, r0
 810161a:	460d      	mov	r5, r1
 810161c:	693b      	ldr	r3, [r7, #16]
 810161e:	4618      	mov	r0, r3
 8101620:	f7ff f81a 	bl	8100658 <__aeabi_f2d>
 8101624:	4602      	mov	r2, r0
 8101626:	460b      	mov	r3, r1
 8101628:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810162c:	e9cd 4500 	strd	r4, r5, [sp]
 8101630:	4642      	mov	r2, r8
 8101632:	464b      	mov	r3, r9
 8101634:	4815      	ldr	r0, [pc, #84]	; (810168c <main+0x124>)
 8101636:	f005 ff39 	bl	81074ac <iprintf>
	 	  printf("Gx:%f, Gy:%f, Gz: %f [degree/s]\r\n", y.Wx_raw, y.Wy_raw, y.Wz_raw);
 810163a:	697b      	ldr	r3, [r7, #20]
 810163c:	4618      	mov	r0, r3
 810163e:	f7ff f80b 	bl	8100658 <__aeabi_f2d>
 8101642:	4680      	mov	r8, r0
 8101644:	4689      	mov	r9, r1
 8101646:	69bb      	ldr	r3, [r7, #24]
 8101648:	4618      	mov	r0, r3
 810164a:	f7ff f805 	bl	8100658 <__aeabi_f2d>
 810164e:	4604      	mov	r4, r0
 8101650:	460d      	mov	r5, r1
 8101652:	69fb      	ldr	r3, [r7, #28]
 8101654:	4618      	mov	r0, r3
 8101656:	f7fe ffff 	bl	8100658 <__aeabi_f2d>
 810165a:	4602      	mov	r2, r0
 810165c:	460b      	mov	r3, r1
 810165e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8101662:	e9cd 4500 	strd	r4, r5, [sp]
 8101666:	4642      	mov	r2, r8
 8101668:	464b      	mov	r3, r9
 810166a:	4809      	ldr	r0, [pc, #36]	; (8101690 <main+0x128>)
 810166c:	f005 ff1e 	bl	81074ac <iprintf>
	 	  printf("\r\n");
 8101670:	4808      	ldr	r0, [pc, #32]	; (8101694 <main+0x12c>)
 8101672:	f005 ff81 	bl	8107578 <puts>
	  if(flag_MPU6050_Data_Ready == 1){
 8101676:	e7b9      	b.n	81015ec <main+0x84>
 8101678:	58024400 	.word	0x58024400
 810167c:	e000ed00 	.word	0xe000ed00
 8101680:	58026400 	.word	0x58026400
 8101684:	0810af3c 	.word	0x0810af3c
 8101688:	100002e8 	.word	0x100002e8
 810168c:	0810af44 	.word	0x0810af44
 8101690:	0810af64 	.word	0x0810af64
 8101694:	0810af88 	.word	0x0810af88

08101698 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8101698:	b580      	push	{r7, lr}
 810169a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 810169c:	4b1b      	ldr	r3, [pc, #108]	; (810170c <MX_I2C1_Init+0x74>)
 810169e:	4a1c      	ldr	r2, [pc, #112]	; (8101710 <MX_I2C1_Init+0x78>)
 81016a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 81016a2:	4b1a      	ldr	r3, [pc, #104]	; (810170c <MX_I2C1_Init+0x74>)
 81016a4:	4a1b      	ldr	r2, [pc, #108]	; (8101714 <MX_I2C1_Init+0x7c>)
 81016a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81016a8:	4b18      	ldr	r3, [pc, #96]	; (810170c <MX_I2C1_Init+0x74>)
 81016aa:	2200      	movs	r2, #0
 81016ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81016ae:	4b17      	ldr	r3, [pc, #92]	; (810170c <MX_I2C1_Init+0x74>)
 81016b0:	2201      	movs	r2, #1
 81016b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81016b4:	4b15      	ldr	r3, [pc, #84]	; (810170c <MX_I2C1_Init+0x74>)
 81016b6:	2200      	movs	r2, #0
 81016b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81016ba:	4b14      	ldr	r3, [pc, #80]	; (810170c <MX_I2C1_Init+0x74>)
 81016bc:	2200      	movs	r2, #0
 81016be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81016c0:	4b12      	ldr	r3, [pc, #72]	; (810170c <MX_I2C1_Init+0x74>)
 81016c2:	2200      	movs	r2, #0
 81016c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81016c6:	4b11      	ldr	r3, [pc, #68]	; (810170c <MX_I2C1_Init+0x74>)
 81016c8:	2200      	movs	r2, #0
 81016ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81016cc:	4b0f      	ldr	r3, [pc, #60]	; (810170c <MX_I2C1_Init+0x74>)
 81016ce:	2200      	movs	r2, #0
 81016d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81016d2:	480e      	ldr	r0, [pc, #56]	; (810170c <MX_I2C1_Init+0x74>)
 81016d4:	f000 feae 	bl	8102434 <HAL_I2C_Init>
 81016d8:	4603      	mov	r3, r0
 81016da:	2b00      	cmp	r3, #0
 81016dc:	d001      	beq.n	81016e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81016de:	f000 f8e3 	bl	81018a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 81016e2:	2100      	movs	r1, #0
 81016e4:	4809      	ldr	r0, [pc, #36]	; (810170c <MX_I2C1_Init+0x74>)
 81016e6:	f001 fd23 	bl	8103130 <HAL_I2CEx_ConfigAnalogFilter>
 81016ea:	4603      	mov	r3, r0
 81016ec:	2b00      	cmp	r3, #0
 81016ee:	d001      	beq.n	81016f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 81016f0:	f000 f8da 	bl	81018a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 81016f4:	2100      	movs	r1, #0
 81016f6:	4805      	ldr	r0, [pc, #20]	; (810170c <MX_I2C1_Init+0x74>)
 81016f8:	f001 fd65 	bl	81031c6 <HAL_I2CEx_ConfigDigitalFilter>
 81016fc:	4603      	mov	r3, r0
 81016fe:	2b00      	cmp	r3, #0
 8101700:	d001      	beq.n	8101706 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101702:	f000 f8d1 	bl	81018a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101706:	bf00      	nop
 8101708:	bd80      	pop	{r7, pc}
 810170a:	bf00      	nop
 810170c:	10000200 	.word	0x10000200
 8101710:	40005400 	.word	0x40005400
 8101714:	00c0eaff 	.word	0x00c0eaff

08101718 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8101718:	b580      	push	{r7, lr}
 810171a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 810171c:	4b22      	ldr	r3, [pc, #136]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 810171e:	4a23      	ldr	r2, [pc, #140]	; (81017ac <MX_USART3_UART_Init+0x94>)
 8101720:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8101722:	4b21      	ldr	r3, [pc, #132]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101724:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8101728:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 810172a:	4b1f      	ldr	r3, [pc, #124]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 810172c:	2200      	movs	r2, #0
 810172e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8101730:	4b1d      	ldr	r3, [pc, #116]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101732:	2200      	movs	r2, #0
 8101734:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8101736:	4b1c      	ldr	r3, [pc, #112]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101738:	2200      	movs	r2, #0
 810173a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 810173c:	4b1a      	ldr	r3, [pc, #104]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 810173e:	220c      	movs	r2, #12
 8101740:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101742:	4b19      	ldr	r3, [pc, #100]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101744:	2200      	movs	r2, #0
 8101746:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8101748:	4b17      	ldr	r3, [pc, #92]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 810174a:	2200      	movs	r2, #0
 810174c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810174e:	4b16      	ldr	r3, [pc, #88]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101750:	2200      	movs	r2, #0
 8101752:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101754:	4b14      	ldr	r3, [pc, #80]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101756:	2200      	movs	r2, #0
 8101758:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810175a:	4b13      	ldr	r3, [pc, #76]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 810175c:	2200      	movs	r2, #0
 810175e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8101760:	4811      	ldr	r0, [pc, #68]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101762:	f003 fe09 	bl	8105378 <HAL_UART_Init>
 8101766:	4603      	mov	r3, r0
 8101768:	2b00      	cmp	r3, #0
 810176a:	d001      	beq.n	8101770 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 810176c:	f000 f89c 	bl	81018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101770:	2100      	movs	r1, #0
 8101772:	480d      	ldr	r0, [pc, #52]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101774:	f004 fe98 	bl	81064a8 <HAL_UARTEx_SetTxFifoThreshold>
 8101778:	4603      	mov	r3, r0
 810177a:	2b00      	cmp	r3, #0
 810177c:	d001      	beq.n	8101782 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 810177e:	f000 f893 	bl	81018a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101782:	2100      	movs	r1, #0
 8101784:	4808      	ldr	r0, [pc, #32]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101786:	f004 fecd 	bl	8106524 <HAL_UARTEx_SetRxFifoThreshold>
 810178a:	4603      	mov	r3, r0
 810178c:	2b00      	cmp	r3, #0
 810178e:	d001      	beq.n	8101794 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8101790:	f000 f88a 	bl	81018a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8101794:	4804      	ldr	r0, [pc, #16]	; (81017a8 <MX_USART3_UART_Init+0x90>)
 8101796:	f004 fe4e 	bl	8106436 <HAL_UARTEx_DisableFifoMode>
 810179a:	4603      	mov	r3, r0
 810179c:	2b00      	cmp	r3, #0
 810179e:	d001      	beq.n	81017a4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 81017a0:	f000 f882 	bl	81018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 81017a4:	bf00      	nop
 81017a6:	bd80      	pop	{r7, pc}
 81017a8:	10000254 	.word	0x10000254
 81017ac:	40004800 	.word	0x40004800

081017b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b088      	sub	sp, #32
 81017b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81017b6:	f107 030c 	add.w	r3, r7, #12
 81017ba:	2200      	movs	r2, #0
 81017bc:	601a      	str	r2, [r3, #0]
 81017be:	605a      	str	r2, [r3, #4]
 81017c0:	609a      	str	r2, [r3, #8]
 81017c2:	60da      	str	r2, [r3, #12]
 81017c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81017c6:	4b23      	ldr	r3, [pc, #140]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017cc:	4a21      	ldr	r2, [pc, #132]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017ce:	f043 0301 	orr.w	r3, r3, #1
 81017d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017d6:	4b1f      	ldr	r3, [pc, #124]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017dc:	f003 0301 	and.w	r3, r3, #1
 81017e0:	60bb      	str	r3, [r7, #8]
 81017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 81017e4:	4b1b      	ldr	r3, [pc, #108]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017ea:	4a1a      	ldr	r2, [pc, #104]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017ec:	f043 0308 	orr.w	r3, r3, #8
 81017f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81017f4:	4b17      	ldr	r3, [pc, #92]	; (8101854 <MX_GPIO_Init+0xa4>)
 81017f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81017fa:	f003 0308 	and.w	r3, r3, #8
 81017fe:	607b      	str	r3, [r7, #4]
 8101800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101802:	4b14      	ldr	r3, [pc, #80]	; (8101854 <MX_GPIO_Init+0xa4>)
 8101804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101808:	4a12      	ldr	r2, [pc, #72]	; (8101854 <MX_GPIO_Init+0xa4>)
 810180a:	f043 0302 	orr.w	r3, r3, #2
 810180e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101812:	4b10      	ldr	r3, [pc, #64]	; (8101854 <MX_GPIO_Init+0xa4>)
 8101814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101818:	f003 0302 	and.w	r3, r3, #2
 810181c:	603b      	str	r3, [r7, #0]
 810181e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8101820:	2308      	movs	r3, #8
 8101822:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8101824:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8101828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810182a:	2300      	movs	r3, #0
 810182c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810182e:	f107 030c 	add.w	r3, r7, #12
 8101832:	4619      	mov	r1, r3
 8101834:	4808      	ldr	r0, [pc, #32]	; (8101858 <MX_GPIO_Init+0xa8>)
 8101836:	f000 fc21 	bl	810207c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 810183a:	2200      	movs	r2, #0
 810183c:	2100      	movs	r1, #0
 810183e:	2009      	movs	r0, #9
 8101840:	f000 fbd3 	bl	8101fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8101844:	2009      	movs	r0, #9
 8101846:	f000 fbea 	bl	810201e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 810184a:	bf00      	nop
 810184c:	3720      	adds	r7, #32
 810184e:	46bd      	mov	sp, r7
 8101850:	bd80      	pop	{r7, pc}
 8101852:	bf00      	nop
 8101854:	58024400 	.word	0x58024400
 8101858:	58020000 	.word	0x58020000

0810185c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN){
 810185c:	b480      	push	{r7}
 810185e:	b083      	sub	sp, #12
 8101860:	af00      	add	r7, sp, #0
 8101862:	4603      	mov	r3, r0
 8101864:	80fb      	strh	r3, [r7, #6]
	if(GPIO_PIN == GPIO_PIN_3){
 8101866:	88fb      	ldrh	r3, [r7, #6]
 8101868:	2b08      	cmp	r3, #8
 810186a:	d102      	bne.n	8101872 <HAL_GPIO_EXTI_Callback+0x16>
		flag_MPU6050_Data_Ready = 1;
 810186c:	4b04      	ldr	r3, [pc, #16]	; (8101880 <HAL_GPIO_EXTI_Callback+0x24>)
 810186e:	2201      	movs	r2, #1
 8101870:	601a      	str	r2, [r3, #0]
	}
}
 8101872:	bf00      	nop
 8101874:	370c      	adds	r7, #12
 8101876:	46bd      	mov	sp, r7
 8101878:	f85d 7b04 	ldr.w	r7, [sp], #4
 810187c:	4770      	bx	lr
 810187e:	bf00      	nop
 8101880:	100002e8 	.word	0x100002e8

08101884 <__io_putchar>:

int __io_putchar(int ch){
 8101884:	b580      	push	{r7, lr}
 8101886:	b082      	sub	sp, #8
 8101888:	af00      	add	r7, sp, #0
 810188a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 810188c:	1d39      	adds	r1, r7, #4
 810188e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8101892:	2201      	movs	r2, #1
 8101894:	4803      	ldr	r0, [pc, #12]	; (81018a4 <__io_putchar+0x20>)
 8101896:	f003 fdbf 	bl	8105418 <HAL_UART_Transmit>
	return ch;
 810189a:	687b      	ldr	r3, [r7, #4]
}
 810189c:	4618      	mov	r0, r3
 810189e:	3708      	adds	r7, #8
 81018a0:	46bd      	mov	sp, r7
 81018a2:	bd80      	pop	{r7, pc}
 81018a4:	10000254 	.word	0x10000254

081018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81018a8:	b480      	push	{r7}
 81018aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81018ac:	b672      	cpsid	i
}
 81018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81018b0:	e7fe      	b.n	81018b0 <Error_Handler+0x8>
	...

081018b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81018b4:	b480      	push	{r7}
 81018b6:	b083      	sub	sp, #12
 81018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81018ba:	4b0a      	ldr	r3, [pc, #40]	; (81018e4 <HAL_MspInit+0x30>)
 81018bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018c0:	4a08      	ldr	r2, [pc, #32]	; (81018e4 <HAL_MspInit+0x30>)
 81018c2:	f043 0302 	orr.w	r3, r3, #2
 81018c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81018ca:	4b06      	ldr	r3, [pc, #24]	; (81018e4 <HAL_MspInit+0x30>)
 81018cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81018d0:	f003 0302 	and.w	r3, r3, #2
 81018d4:	607b      	str	r3, [r7, #4]
 81018d6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81018d8:	bf00      	nop
 81018da:	370c      	adds	r7, #12
 81018dc:	46bd      	mov	sp, r7
 81018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e2:	4770      	bx	lr
 81018e4:	58024400 	.word	0x58024400

081018e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81018e8:	b580      	push	{r7, lr}
 81018ea:	b0ba      	sub	sp, #232	; 0xe8
 81018ec:	af00      	add	r7, sp, #0
 81018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81018f4:	2200      	movs	r2, #0
 81018f6:	601a      	str	r2, [r3, #0]
 81018f8:	605a      	str	r2, [r3, #4]
 81018fa:	609a      	str	r2, [r3, #8]
 81018fc:	60da      	str	r2, [r3, #12]
 81018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101900:	f107 0310 	add.w	r3, r7, #16
 8101904:	22c0      	movs	r2, #192	; 0xc0
 8101906:	2100      	movs	r1, #0
 8101908:	4618      	mov	r0, r3
 810190a:	f005 ff35 	bl	8107778 <memset>
  if(hi2c->Instance==I2C1)
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	681b      	ldr	r3, [r3, #0]
 8101912:	4a26      	ldr	r2, [pc, #152]	; (81019ac <HAL_I2C_MspInit+0xc4>)
 8101914:	4293      	cmp	r3, r2
 8101916:	d145      	bne.n	81019a4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8101918:	f04f 0208 	mov.w	r2, #8
 810191c:	f04f 0300 	mov.w	r3, #0
 8101920:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8101924:	2300      	movs	r3, #0
 8101926:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810192a:	f107 0310 	add.w	r3, r7, #16
 810192e:	4618      	mov	r0, r3
 8101930:	f001 fef6 	bl	8103720 <HAL_RCCEx_PeriphCLKConfig>
 8101934:	4603      	mov	r3, r0
 8101936:	2b00      	cmp	r3, #0
 8101938:	d001      	beq.n	810193e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 810193a:	f7ff ffb5 	bl	81018a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810193e:	4b1c      	ldr	r3, [pc, #112]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 8101940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101944:	4a1a      	ldr	r2, [pc, #104]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 8101946:	f043 0302 	orr.w	r3, r3, #2
 810194a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810194e:	4b18      	ldr	r3, [pc, #96]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 8101950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101954:	f003 0302 	and.w	r3, r3, #2
 8101958:	60fb      	str	r3, [r7, #12]
 810195a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810195c:	23c0      	movs	r3, #192	; 0xc0
 810195e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101962:	2312      	movs	r3, #18
 8101964:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101968:	2300      	movs	r3, #0
 810196a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810196e:	2300      	movs	r3, #0
 8101970:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101974:	2304      	movs	r3, #4
 8101976:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810197a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 810197e:	4619      	mov	r1, r3
 8101980:	480c      	ldr	r0, [pc, #48]	; (81019b4 <HAL_I2C_MspInit+0xcc>)
 8101982:	f000 fb7b 	bl	810207c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101986:	4b0a      	ldr	r3, [pc, #40]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 8101988:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810198c:	4a08      	ldr	r2, [pc, #32]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 810198e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8101992:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101996:	4b06      	ldr	r3, [pc, #24]	; (81019b0 <HAL_I2C_MspInit+0xc8>)
 8101998:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81019a0:	60bb      	str	r3, [r7, #8]
 81019a2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 81019a4:	bf00      	nop
 81019a6:	37e8      	adds	r7, #232	; 0xe8
 81019a8:	46bd      	mov	sp, r7
 81019aa:	bd80      	pop	{r7, pc}
 81019ac:	40005400 	.word	0x40005400
 81019b0:	58024400 	.word	0x58024400
 81019b4:	58020400 	.word	0x58020400

081019b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81019b8:	b580      	push	{r7, lr}
 81019ba:	b0ba      	sub	sp, #232	; 0xe8
 81019bc:	af00      	add	r7, sp, #0
 81019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81019c0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 81019c4:	2200      	movs	r2, #0
 81019c6:	601a      	str	r2, [r3, #0]
 81019c8:	605a      	str	r2, [r3, #4]
 81019ca:	609a      	str	r2, [r3, #8]
 81019cc:	60da      	str	r2, [r3, #12]
 81019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81019d0:	f107 0310 	add.w	r3, r7, #16
 81019d4:	22c0      	movs	r2, #192	; 0xc0
 81019d6:	2100      	movs	r1, #0
 81019d8:	4618      	mov	r0, r3
 81019da:	f005 fecd 	bl	8107778 <memset>
  if(huart->Instance==USART3)
 81019de:	687b      	ldr	r3, [r7, #4]
 81019e0:	681b      	ldr	r3, [r3, #0]
 81019e2:	4a27      	ldr	r2, [pc, #156]	; (8101a80 <HAL_UART_MspInit+0xc8>)
 81019e4:	4293      	cmp	r3, r2
 81019e6:	d146      	bne.n	8101a76 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 81019e8:	f04f 0202 	mov.w	r2, #2
 81019ec:	f04f 0300 	mov.w	r3, #0
 81019f0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81019f4:	2300      	movs	r3, #0
 81019f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019fa:	f107 0310 	add.w	r3, r7, #16
 81019fe:	4618      	mov	r0, r3
 8101a00:	f001 fe8e 	bl	8103720 <HAL_RCCEx_PeriphCLKConfig>
 8101a04:	4603      	mov	r3, r0
 8101a06:	2b00      	cmp	r3, #0
 8101a08:	d001      	beq.n	8101a0e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8101a0a:	f7ff ff4d 	bl	81018a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8101a0e:	4b1d      	ldr	r3, [pc, #116]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a14:	4a1b      	ldr	r2, [pc, #108]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8101a1a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101a1e:	4b19      	ldr	r3, [pc, #100]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a20:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101a24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8101a28:	60fb      	str	r3, [r7, #12]
 8101a2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101a2c:	4b15      	ldr	r3, [pc, #84]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a32:	4a14      	ldr	r2, [pc, #80]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a34:	f043 0308 	orr.w	r3, r3, #8
 8101a38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8101a3c:	4b11      	ldr	r3, [pc, #68]	; (8101a84 <HAL_UART_MspInit+0xcc>)
 8101a3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101a42:	f003 0308 	and.w	r3, r3, #8
 8101a46:	60bb      	str	r3, [r7, #8]
 8101a48:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8101a4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8101a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101a52:	2302      	movs	r3, #2
 8101a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a58:	2300      	movs	r3, #0
 8101a5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a5e:	2300      	movs	r3, #0
 8101a60:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8101a64:	2307      	movs	r3, #7
 8101a66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8101a6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8101a6e:	4619      	mov	r1, r3
 8101a70:	4805      	ldr	r0, [pc, #20]	; (8101a88 <HAL_UART_MspInit+0xd0>)
 8101a72:	f000 fb03 	bl	810207c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8101a76:	bf00      	nop
 8101a78:	37e8      	adds	r7, #232	; 0xe8
 8101a7a:	46bd      	mov	sp, r7
 8101a7c:	bd80      	pop	{r7, pc}
 8101a7e:	bf00      	nop
 8101a80:	40004800 	.word	0x40004800
 8101a84:	58024400 	.word	0x58024400
 8101a88:	58020c00 	.word	0x58020c00

08101a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a8c:	b480      	push	{r7}
 8101a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101a90:	e7fe      	b.n	8101a90 <NMI_Handler+0x4>

08101a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a92:	b480      	push	{r7}
 8101a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a96:	e7fe      	b.n	8101a96 <HardFault_Handler+0x4>

08101a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a98:	b480      	push	{r7}
 8101a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a9c:	e7fe      	b.n	8101a9c <MemManage_Handler+0x4>

08101a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a9e:	b480      	push	{r7}
 8101aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101aa2:	e7fe      	b.n	8101aa2 <BusFault_Handler+0x4>

08101aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101aa4:	b480      	push	{r7}
 8101aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101aa8:	e7fe      	b.n	8101aa8 <UsageFault_Handler+0x4>

08101aaa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101aaa:	b480      	push	{r7}
 8101aac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101aae:	bf00      	nop
 8101ab0:	46bd      	mov	sp, r7
 8101ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ab6:	4770      	bx	lr

08101ab8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101ab8:	b480      	push	{r7}
 8101aba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101abc:	bf00      	nop
 8101abe:	46bd      	mov	sp, r7
 8101ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ac4:	4770      	bx	lr

08101ac6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101ac6:	b480      	push	{r7}
 8101ac8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101aca:	bf00      	nop
 8101acc:	46bd      	mov	sp, r7
 8101ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ad2:	4770      	bx	lr

08101ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101ad4:	b580      	push	{r7, lr}
 8101ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101ad8:	f000 f98c 	bl	8101df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101adc:	bf00      	nop
 8101ade:	bd80      	pop	{r7, pc}

08101ae0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8101ae0:	b580      	push	{r7, lr}
 8101ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8101ae4:	2008      	movs	r0, #8
 8101ae6:	f000 fc79 	bl	81023dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8101aea:	bf00      	nop
 8101aec:	bd80      	pop	{r7, pc}

08101aee <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101aee:	b480      	push	{r7}
 8101af0:	af00      	add	r7, sp, #0
  return 1;
 8101af2:	2301      	movs	r3, #1
}
 8101af4:	4618      	mov	r0, r3
 8101af6:	46bd      	mov	sp, r7
 8101af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101afc:	4770      	bx	lr

08101afe <_kill>:

int _kill(int pid, int sig)
{
 8101afe:	b580      	push	{r7, lr}
 8101b00:	b082      	sub	sp, #8
 8101b02:	af00      	add	r7, sp, #0
 8101b04:	6078      	str	r0, [r7, #4]
 8101b06:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101b08:	f005 fe88 	bl	810781c <__errno>
 8101b0c:	4603      	mov	r3, r0
 8101b0e:	2216      	movs	r2, #22
 8101b10:	601a      	str	r2, [r3, #0]
  return -1;
 8101b12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101b16:	4618      	mov	r0, r3
 8101b18:	3708      	adds	r7, #8
 8101b1a:	46bd      	mov	sp, r7
 8101b1c:	bd80      	pop	{r7, pc}

08101b1e <_exit>:

void _exit (int status)
{
 8101b1e:	b580      	push	{r7, lr}
 8101b20:	b082      	sub	sp, #8
 8101b22:	af00      	add	r7, sp, #0
 8101b24:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101b26:	f04f 31ff 	mov.w	r1, #4294967295
 8101b2a:	6878      	ldr	r0, [r7, #4]
 8101b2c:	f7ff ffe7 	bl	8101afe <_kill>
  while (1) {}    /* Make sure we hang here */
 8101b30:	e7fe      	b.n	8101b30 <_exit+0x12>

08101b32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101b32:	b580      	push	{r7, lr}
 8101b34:	b086      	sub	sp, #24
 8101b36:	af00      	add	r7, sp, #0
 8101b38:	60f8      	str	r0, [r7, #12]
 8101b3a:	60b9      	str	r1, [r7, #8]
 8101b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b3e:	2300      	movs	r3, #0
 8101b40:	617b      	str	r3, [r7, #20]
 8101b42:	e00a      	b.n	8101b5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101b44:	f3af 8000 	nop.w
 8101b48:	4601      	mov	r1, r0
 8101b4a:	68bb      	ldr	r3, [r7, #8]
 8101b4c:	1c5a      	adds	r2, r3, #1
 8101b4e:	60ba      	str	r2, [r7, #8]
 8101b50:	b2ca      	uxtb	r2, r1
 8101b52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b54:	697b      	ldr	r3, [r7, #20]
 8101b56:	3301      	adds	r3, #1
 8101b58:	617b      	str	r3, [r7, #20]
 8101b5a:	697a      	ldr	r2, [r7, #20]
 8101b5c:	687b      	ldr	r3, [r7, #4]
 8101b5e:	429a      	cmp	r2, r3
 8101b60:	dbf0      	blt.n	8101b44 <_read+0x12>
  }

  return len;
 8101b62:	687b      	ldr	r3, [r7, #4]
}
 8101b64:	4618      	mov	r0, r3
 8101b66:	3718      	adds	r7, #24
 8101b68:	46bd      	mov	sp, r7
 8101b6a:	bd80      	pop	{r7, pc}

08101b6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101b6c:	b580      	push	{r7, lr}
 8101b6e:	b086      	sub	sp, #24
 8101b70:	af00      	add	r7, sp, #0
 8101b72:	60f8      	str	r0, [r7, #12]
 8101b74:	60b9      	str	r1, [r7, #8]
 8101b76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b78:	2300      	movs	r3, #0
 8101b7a:	617b      	str	r3, [r7, #20]
 8101b7c:	e009      	b.n	8101b92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101b7e:	68bb      	ldr	r3, [r7, #8]
 8101b80:	1c5a      	adds	r2, r3, #1
 8101b82:	60ba      	str	r2, [r7, #8]
 8101b84:	781b      	ldrb	r3, [r3, #0]
 8101b86:	4618      	mov	r0, r3
 8101b88:	f7ff fe7c 	bl	8101884 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b8c:	697b      	ldr	r3, [r7, #20]
 8101b8e:	3301      	adds	r3, #1
 8101b90:	617b      	str	r3, [r7, #20]
 8101b92:	697a      	ldr	r2, [r7, #20]
 8101b94:	687b      	ldr	r3, [r7, #4]
 8101b96:	429a      	cmp	r2, r3
 8101b98:	dbf1      	blt.n	8101b7e <_write+0x12>
  }
  return len;
 8101b9a:	687b      	ldr	r3, [r7, #4]
}
 8101b9c:	4618      	mov	r0, r3
 8101b9e:	3718      	adds	r7, #24
 8101ba0:	46bd      	mov	sp, r7
 8101ba2:	bd80      	pop	{r7, pc}

08101ba4 <_close>:

int _close(int file)
{
 8101ba4:	b480      	push	{r7}
 8101ba6:	b083      	sub	sp, #12
 8101ba8:	af00      	add	r7, sp, #0
 8101baa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101bac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101bb0:	4618      	mov	r0, r3
 8101bb2:	370c      	adds	r7, #12
 8101bb4:	46bd      	mov	sp, r7
 8101bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bba:	4770      	bx	lr

08101bbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101bbc:	b480      	push	{r7}
 8101bbe:	b083      	sub	sp, #12
 8101bc0:	af00      	add	r7, sp, #0
 8101bc2:	6078      	str	r0, [r7, #4]
 8101bc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101bc6:	683b      	ldr	r3, [r7, #0]
 8101bc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8101bcc:	605a      	str	r2, [r3, #4]
  return 0;
 8101bce:	2300      	movs	r3, #0
}
 8101bd0:	4618      	mov	r0, r3
 8101bd2:	370c      	adds	r7, #12
 8101bd4:	46bd      	mov	sp, r7
 8101bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bda:	4770      	bx	lr

08101bdc <_isatty>:

int _isatty(int file)
{
 8101bdc:	b480      	push	{r7}
 8101bde:	b083      	sub	sp, #12
 8101be0:	af00      	add	r7, sp, #0
 8101be2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101be4:	2301      	movs	r3, #1
}
 8101be6:	4618      	mov	r0, r3
 8101be8:	370c      	adds	r7, #12
 8101bea:	46bd      	mov	sp, r7
 8101bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bf0:	4770      	bx	lr

08101bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101bf2:	b480      	push	{r7}
 8101bf4:	b085      	sub	sp, #20
 8101bf6:	af00      	add	r7, sp, #0
 8101bf8:	60f8      	str	r0, [r7, #12]
 8101bfa:	60b9      	str	r1, [r7, #8]
 8101bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101bfe:	2300      	movs	r3, #0
}
 8101c00:	4618      	mov	r0, r3
 8101c02:	3714      	adds	r7, #20
 8101c04:	46bd      	mov	sp, r7
 8101c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c0a:	4770      	bx	lr

08101c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101c0c:	b580      	push	{r7, lr}
 8101c0e:	b086      	sub	sp, #24
 8101c10:	af00      	add	r7, sp, #0
 8101c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101c14:	4a14      	ldr	r2, [pc, #80]	; (8101c68 <_sbrk+0x5c>)
 8101c16:	4b15      	ldr	r3, [pc, #84]	; (8101c6c <_sbrk+0x60>)
 8101c18:	1ad3      	subs	r3, r2, r3
 8101c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101c1c:	697b      	ldr	r3, [r7, #20]
 8101c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101c20:	4b13      	ldr	r3, [pc, #76]	; (8101c70 <_sbrk+0x64>)
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	2b00      	cmp	r3, #0
 8101c26:	d102      	bne.n	8101c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101c28:	4b11      	ldr	r3, [pc, #68]	; (8101c70 <_sbrk+0x64>)
 8101c2a:	4a12      	ldr	r2, [pc, #72]	; (8101c74 <_sbrk+0x68>)
 8101c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101c2e:	4b10      	ldr	r3, [pc, #64]	; (8101c70 <_sbrk+0x64>)
 8101c30:	681a      	ldr	r2, [r3, #0]
 8101c32:	687b      	ldr	r3, [r7, #4]
 8101c34:	4413      	add	r3, r2
 8101c36:	693a      	ldr	r2, [r7, #16]
 8101c38:	429a      	cmp	r2, r3
 8101c3a:	d207      	bcs.n	8101c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101c3c:	f005 fdee 	bl	810781c <__errno>
 8101c40:	4603      	mov	r3, r0
 8101c42:	220c      	movs	r2, #12
 8101c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101c46:	f04f 33ff 	mov.w	r3, #4294967295
 8101c4a:	e009      	b.n	8101c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101c4c:	4b08      	ldr	r3, [pc, #32]	; (8101c70 <_sbrk+0x64>)
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101c52:	4b07      	ldr	r3, [pc, #28]	; (8101c70 <_sbrk+0x64>)
 8101c54:	681a      	ldr	r2, [r3, #0]
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	4413      	add	r3, r2
 8101c5a:	4a05      	ldr	r2, [pc, #20]	; (8101c70 <_sbrk+0x64>)
 8101c5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101c5e:	68fb      	ldr	r3, [r7, #12]
}
 8101c60:	4618      	mov	r0, r3
 8101c62:	3718      	adds	r7, #24
 8101c64:	46bd      	mov	sp, r7
 8101c66:	bd80      	pop	{r7, pc}
 8101c68:	10048000 	.word	0x10048000
 8101c6c:	00000400 	.word	0x00000400
 8101c70:	100002ec 	.word	0x100002ec
 8101c74:	10000440 	.word	0x10000440

08101c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101cb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c7c:	f7ff fa40 	bl	8101100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c80:	480c      	ldr	r0, [pc, #48]	; (8101cb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c82:	490d      	ldr	r1, [pc, #52]	; (8101cb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c84:	4a0d      	ldr	r2, [pc, #52]	; (8101cbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c88:	e002      	b.n	8101c90 <LoopCopyDataInit>

08101c8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c8e:	3304      	adds	r3, #4

08101c90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c94:	d3f9      	bcc.n	8101c8a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c96:	4a0a      	ldr	r2, [pc, #40]	; (8101cc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c98:	4c0a      	ldr	r4, [pc, #40]	; (8101cc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101c9c:	e001      	b.n	8101ca2 <LoopFillZerobss>

08101c9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101c9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101ca0:	3204      	adds	r2, #4

08101ca2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ca2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ca4:	d3fb      	bcc.n	8101c9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101ca6:	f005 fdbf 	bl	8107828 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101caa:	f7ff fc5d 	bl	8101568 <main>
  bx  lr
 8101cae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101cb0:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101cb4:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101cb8:	100001e4 	.word	0x100001e4
  ldr r2, =_sidata
 8101cbc:	0810b400 	.word	0x0810b400
  ldr r2, =_sbss
 8101cc0:	100001e4 	.word	0x100001e4
  ldr r4, =_ebss
 8101cc4:	10000440 	.word	0x10000440

08101cc8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101cc8:	e7fe      	b.n	8101cc8 <ADC3_IRQHandler>
	...

08101ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101ccc:	b580      	push	{r7, lr}
 8101cce:	b082      	sub	sp, #8
 8101cd0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101cd2:	4b28      	ldr	r3, [pc, #160]	; (8101d74 <HAL_Init+0xa8>)
 8101cd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101cd8:	4a26      	ldr	r2, [pc, #152]	; (8101d74 <HAL_Init+0xa8>)
 8101cda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8101cde:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101ce2:	4b24      	ldr	r3, [pc, #144]	; (8101d74 <HAL_Init+0xa8>)
 8101ce4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8101cec:	603b      	str	r3, [r7, #0]
 8101cee:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101cf0:	4b21      	ldr	r3, [pc, #132]	; (8101d78 <HAL_Init+0xac>)
 8101cf2:	681b      	ldr	r3, [r3, #0]
 8101cf4:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101cf8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101cfc:	4a1e      	ldr	r2, [pc, #120]	; (8101d78 <HAL_Init+0xac>)
 8101cfe:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101d02:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101d04:	4b1c      	ldr	r3, [pc, #112]	; (8101d78 <HAL_Init+0xac>)
 8101d06:	681b      	ldr	r3, [r3, #0]
 8101d08:	4a1b      	ldr	r2, [pc, #108]	; (8101d78 <HAL_Init+0xac>)
 8101d0a:	f043 0301 	orr.w	r3, r3, #1
 8101d0e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101d10:	2003      	movs	r0, #3
 8101d12:	f000 f95f 	bl	8101fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101d16:	f001 fb2b 	bl	8103370 <HAL_RCC_GetSysClockFreq>
 8101d1a:	4602      	mov	r2, r0
 8101d1c:	4b15      	ldr	r3, [pc, #84]	; (8101d74 <HAL_Init+0xa8>)
 8101d1e:	699b      	ldr	r3, [r3, #24]
 8101d20:	0a1b      	lsrs	r3, r3, #8
 8101d22:	f003 030f 	and.w	r3, r3, #15
 8101d26:	4915      	ldr	r1, [pc, #84]	; (8101d7c <HAL_Init+0xb0>)
 8101d28:	5ccb      	ldrb	r3, [r1, r3]
 8101d2a:	f003 031f 	and.w	r3, r3, #31
 8101d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8101d32:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101d34:	4b0f      	ldr	r3, [pc, #60]	; (8101d74 <HAL_Init+0xa8>)
 8101d36:	699b      	ldr	r3, [r3, #24]
 8101d38:	f003 030f 	and.w	r3, r3, #15
 8101d3c:	4a0f      	ldr	r2, [pc, #60]	; (8101d7c <HAL_Init+0xb0>)
 8101d3e:	5cd3      	ldrb	r3, [r2, r3]
 8101d40:	f003 031f 	and.w	r3, r3, #31
 8101d44:	687a      	ldr	r2, [r7, #4]
 8101d46:	fa22 f303 	lsr.w	r3, r2, r3
 8101d4a:	4a0d      	ldr	r2, [pc, #52]	; (8101d80 <HAL_Init+0xb4>)
 8101d4c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d4e:	4b0c      	ldr	r3, [pc, #48]	; (8101d80 <HAL_Init+0xb4>)
 8101d50:	681b      	ldr	r3, [r3, #0]
 8101d52:	4a0c      	ldr	r2, [pc, #48]	; (8101d84 <HAL_Init+0xb8>)
 8101d54:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d56:	2000      	movs	r0, #0
 8101d58:	f000 f816 	bl	8101d88 <HAL_InitTick>
 8101d5c:	4603      	mov	r3, r0
 8101d5e:	2b00      	cmp	r3, #0
 8101d60:	d001      	beq.n	8101d66 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d62:	2301      	movs	r3, #1
 8101d64:	e002      	b.n	8101d6c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d66:	f7ff fda5 	bl	81018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d6a:	2300      	movs	r3, #0
}
 8101d6c:	4618      	mov	r0, r3
 8101d6e:	3708      	adds	r7, #8
 8101d70:	46bd      	mov	sp, r7
 8101d72:	bd80      	pop	{r7, pc}
 8101d74:	58024400 	.word	0x58024400
 8101d78:	40024400 	.word	0x40024400
 8101d7c:	0810af8c 	.word	0x0810af8c
 8101d80:	10000004 	.word	0x10000004
 8101d84:	10000000 	.word	0x10000000

08101d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	b082      	sub	sp, #8
 8101d8c:	af00      	add	r7, sp, #0
 8101d8e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101d90:	4b15      	ldr	r3, [pc, #84]	; (8101de8 <HAL_InitTick+0x60>)
 8101d92:	781b      	ldrb	r3, [r3, #0]
 8101d94:	2b00      	cmp	r3, #0
 8101d96:	d101      	bne.n	8101d9c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101d98:	2301      	movs	r3, #1
 8101d9a:	e021      	b.n	8101de0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101d9c:	4b13      	ldr	r3, [pc, #76]	; (8101dec <HAL_InitTick+0x64>)
 8101d9e:	681a      	ldr	r2, [r3, #0]
 8101da0:	4b11      	ldr	r3, [pc, #68]	; (8101de8 <HAL_InitTick+0x60>)
 8101da2:	781b      	ldrb	r3, [r3, #0]
 8101da4:	4619      	mov	r1, r3
 8101da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8101daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8101dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8101db2:	4618      	mov	r0, r3
 8101db4:	f000 f941 	bl	810203a <HAL_SYSTICK_Config>
 8101db8:	4603      	mov	r3, r0
 8101dba:	2b00      	cmp	r3, #0
 8101dbc:	d001      	beq.n	8101dc2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101dbe:	2301      	movs	r3, #1
 8101dc0:	e00e      	b.n	8101de0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101dc2:	687b      	ldr	r3, [r7, #4]
 8101dc4:	2b0f      	cmp	r3, #15
 8101dc6:	d80a      	bhi.n	8101dde <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101dc8:	2200      	movs	r2, #0
 8101dca:	6879      	ldr	r1, [r7, #4]
 8101dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8101dd0:	f000 f90b 	bl	8101fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101dd4:	4a06      	ldr	r2, [pc, #24]	; (8101df0 <HAL_InitTick+0x68>)
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101dda:	2300      	movs	r3, #0
 8101ddc:	e000      	b.n	8101de0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101dde:	2301      	movs	r3, #1
}
 8101de0:	4618      	mov	r0, r3
 8101de2:	3708      	adds	r7, #8
 8101de4:	46bd      	mov	sp, r7
 8101de6:	bd80      	pop	{r7, pc}
 8101de8:	10000018 	.word	0x10000018
 8101dec:	10000000 	.word	0x10000000
 8101df0:	10000014 	.word	0x10000014

08101df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101df4:	b480      	push	{r7}
 8101df6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101df8:	4b06      	ldr	r3, [pc, #24]	; (8101e14 <HAL_IncTick+0x20>)
 8101dfa:	781b      	ldrb	r3, [r3, #0]
 8101dfc:	461a      	mov	r2, r3
 8101dfe:	4b06      	ldr	r3, [pc, #24]	; (8101e18 <HAL_IncTick+0x24>)
 8101e00:	681b      	ldr	r3, [r3, #0]
 8101e02:	4413      	add	r3, r2
 8101e04:	4a04      	ldr	r2, [pc, #16]	; (8101e18 <HAL_IncTick+0x24>)
 8101e06:	6013      	str	r3, [r2, #0]
}
 8101e08:	bf00      	nop
 8101e0a:	46bd      	mov	sp, r7
 8101e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e10:	4770      	bx	lr
 8101e12:	bf00      	nop
 8101e14:	10000018 	.word	0x10000018
 8101e18:	100002f0 	.word	0x100002f0

08101e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101e1c:	b480      	push	{r7}
 8101e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8101e20:	4b03      	ldr	r3, [pc, #12]	; (8101e30 <HAL_GetTick+0x14>)
 8101e22:	681b      	ldr	r3, [r3, #0]
}
 8101e24:	4618      	mov	r0, r3
 8101e26:	46bd      	mov	sp, r7
 8101e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e2c:	4770      	bx	lr
 8101e2e:	bf00      	nop
 8101e30:	100002f0 	.word	0x100002f0

08101e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e34:	b480      	push	{r7}
 8101e36:	b085      	sub	sp, #20
 8101e38:	af00      	add	r7, sp, #0
 8101e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e3c:	687b      	ldr	r3, [r7, #4]
 8101e3e:	f003 0307 	and.w	r3, r3, #7
 8101e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e44:	4b0c      	ldr	r3, [pc, #48]	; (8101e78 <__NVIC_SetPriorityGrouping+0x44>)
 8101e46:	68db      	ldr	r3, [r3, #12]
 8101e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e4a:	68ba      	ldr	r2, [r7, #8]
 8101e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101e50:	4013      	ands	r3, r2
 8101e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101e54:	68fb      	ldr	r3, [r7, #12]
 8101e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101e58:	68bb      	ldr	r3, [r7, #8]
 8101e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8101e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101e66:	4a04      	ldr	r2, [pc, #16]	; (8101e78 <__NVIC_SetPriorityGrouping+0x44>)
 8101e68:	68bb      	ldr	r3, [r7, #8]
 8101e6a:	60d3      	str	r3, [r2, #12]
}
 8101e6c:	bf00      	nop
 8101e6e:	3714      	adds	r7, #20
 8101e70:	46bd      	mov	sp, r7
 8101e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e76:	4770      	bx	lr
 8101e78:	e000ed00 	.word	0xe000ed00

08101e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101e7c:	b480      	push	{r7}
 8101e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101e80:	4b04      	ldr	r3, [pc, #16]	; (8101e94 <__NVIC_GetPriorityGrouping+0x18>)
 8101e82:	68db      	ldr	r3, [r3, #12]
 8101e84:	0a1b      	lsrs	r3, r3, #8
 8101e86:	f003 0307 	and.w	r3, r3, #7
}
 8101e8a:	4618      	mov	r0, r3
 8101e8c:	46bd      	mov	sp, r7
 8101e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e92:	4770      	bx	lr
 8101e94:	e000ed00 	.word	0xe000ed00

08101e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8101e98:	b480      	push	{r7}
 8101e9a:	b083      	sub	sp, #12
 8101e9c:	af00      	add	r7, sp, #0
 8101e9e:	4603      	mov	r3, r0
 8101ea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ea6:	2b00      	cmp	r3, #0
 8101ea8:	db0b      	blt.n	8101ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101eaa:	88fb      	ldrh	r3, [r7, #6]
 8101eac:	f003 021f 	and.w	r2, r3, #31
 8101eb0:	4907      	ldr	r1, [pc, #28]	; (8101ed0 <__NVIC_EnableIRQ+0x38>)
 8101eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101eb6:	095b      	lsrs	r3, r3, #5
 8101eb8:	2001      	movs	r0, #1
 8101eba:	fa00 f202 	lsl.w	r2, r0, r2
 8101ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8101ec2:	bf00      	nop
 8101ec4:	370c      	adds	r7, #12
 8101ec6:	46bd      	mov	sp, r7
 8101ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ecc:	4770      	bx	lr
 8101ece:	bf00      	nop
 8101ed0:	e000e100 	.word	0xe000e100

08101ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101ed4:	b480      	push	{r7}
 8101ed6:	b083      	sub	sp, #12
 8101ed8:	af00      	add	r7, sp, #0
 8101eda:	4603      	mov	r3, r0
 8101edc:	6039      	str	r1, [r7, #0]
 8101ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ee4:	2b00      	cmp	r3, #0
 8101ee6:	db0a      	blt.n	8101efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ee8:	683b      	ldr	r3, [r7, #0]
 8101eea:	b2da      	uxtb	r2, r3
 8101eec:	490c      	ldr	r1, [pc, #48]	; (8101f20 <__NVIC_SetPriority+0x4c>)
 8101eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ef2:	0112      	lsls	r2, r2, #4
 8101ef4:	b2d2      	uxtb	r2, r2
 8101ef6:	440b      	add	r3, r1
 8101ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101efc:	e00a      	b.n	8101f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101efe:	683b      	ldr	r3, [r7, #0]
 8101f00:	b2da      	uxtb	r2, r3
 8101f02:	4908      	ldr	r1, [pc, #32]	; (8101f24 <__NVIC_SetPriority+0x50>)
 8101f04:	88fb      	ldrh	r3, [r7, #6]
 8101f06:	f003 030f 	and.w	r3, r3, #15
 8101f0a:	3b04      	subs	r3, #4
 8101f0c:	0112      	lsls	r2, r2, #4
 8101f0e:	b2d2      	uxtb	r2, r2
 8101f10:	440b      	add	r3, r1
 8101f12:	761a      	strb	r2, [r3, #24]
}
 8101f14:	bf00      	nop
 8101f16:	370c      	adds	r7, #12
 8101f18:	46bd      	mov	sp, r7
 8101f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f1e:	4770      	bx	lr
 8101f20:	e000e100 	.word	0xe000e100
 8101f24:	e000ed00 	.word	0xe000ed00

08101f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101f28:	b480      	push	{r7}
 8101f2a:	b089      	sub	sp, #36	; 0x24
 8101f2c:	af00      	add	r7, sp, #0
 8101f2e:	60f8      	str	r0, [r7, #12]
 8101f30:	60b9      	str	r1, [r7, #8]
 8101f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f34:	68fb      	ldr	r3, [r7, #12]
 8101f36:	f003 0307 	and.w	r3, r3, #7
 8101f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f3c:	69fb      	ldr	r3, [r7, #28]
 8101f3e:	f1c3 0307 	rsb	r3, r3, #7
 8101f42:	2b04      	cmp	r3, #4
 8101f44:	bf28      	it	cs
 8101f46:	2304      	movcs	r3, #4
 8101f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f4a:	69fb      	ldr	r3, [r7, #28]
 8101f4c:	3304      	adds	r3, #4
 8101f4e:	2b06      	cmp	r3, #6
 8101f50:	d902      	bls.n	8101f58 <NVIC_EncodePriority+0x30>
 8101f52:	69fb      	ldr	r3, [r7, #28]
 8101f54:	3b03      	subs	r3, #3
 8101f56:	e000      	b.n	8101f5a <NVIC_EncodePriority+0x32>
 8101f58:	2300      	movs	r3, #0
 8101f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8101f60:	69bb      	ldr	r3, [r7, #24]
 8101f62:	fa02 f303 	lsl.w	r3, r2, r3
 8101f66:	43da      	mvns	r2, r3
 8101f68:	68bb      	ldr	r3, [r7, #8]
 8101f6a:	401a      	ands	r2, r3
 8101f6c:	697b      	ldr	r3, [r7, #20]
 8101f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101f70:	f04f 31ff 	mov.w	r1, #4294967295
 8101f74:	697b      	ldr	r3, [r7, #20]
 8101f76:	fa01 f303 	lsl.w	r3, r1, r3
 8101f7a:	43d9      	mvns	r1, r3
 8101f7c:	687b      	ldr	r3, [r7, #4]
 8101f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f80:	4313      	orrs	r3, r2
         );
}
 8101f82:	4618      	mov	r0, r3
 8101f84:	3724      	adds	r7, #36	; 0x24
 8101f86:	46bd      	mov	sp, r7
 8101f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f8c:	4770      	bx	lr
	...

08101f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101f90:	b580      	push	{r7, lr}
 8101f92:	b082      	sub	sp, #8
 8101f94:	af00      	add	r7, sp, #0
 8101f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	3b01      	subs	r3, #1
 8101f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8101fa0:	d301      	bcc.n	8101fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101fa2:	2301      	movs	r3, #1
 8101fa4:	e00f      	b.n	8101fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101fa6:	4a0a      	ldr	r2, [pc, #40]	; (8101fd0 <SysTick_Config+0x40>)
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	3b01      	subs	r3, #1
 8101fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101fae:	210f      	movs	r1, #15
 8101fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8101fb4:	f7ff ff8e 	bl	8101ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101fb8:	4b05      	ldr	r3, [pc, #20]	; (8101fd0 <SysTick_Config+0x40>)
 8101fba:	2200      	movs	r2, #0
 8101fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101fbe:	4b04      	ldr	r3, [pc, #16]	; (8101fd0 <SysTick_Config+0x40>)
 8101fc0:	2207      	movs	r2, #7
 8101fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101fc4:	2300      	movs	r3, #0
}
 8101fc6:	4618      	mov	r0, r3
 8101fc8:	3708      	adds	r7, #8
 8101fca:	46bd      	mov	sp, r7
 8101fcc:	bd80      	pop	{r7, pc}
 8101fce:	bf00      	nop
 8101fd0:	e000e010 	.word	0xe000e010

08101fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101fd4:	b580      	push	{r7, lr}
 8101fd6:	b082      	sub	sp, #8
 8101fd8:	af00      	add	r7, sp, #0
 8101fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101fdc:	6878      	ldr	r0, [r7, #4]
 8101fde:	f7ff ff29 	bl	8101e34 <__NVIC_SetPriorityGrouping>
}
 8101fe2:	bf00      	nop
 8101fe4:	3708      	adds	r7, #8
 8101fe6:	46bd      	mov	sp, r7
 8101fe8:	bd80      	pop	{r7, pc}

08101fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101fea:	b580      	push	{r7, lr}
 8101fec:	b086      	sub	sp, #24
 8101fee:	af00      	add	r7, sp, #0
 8101ff0:	4603      	mov	r3, r0
 8101ff2:	60b9      	str	r1, [r7, #8]
 8101ff4:	607a      	str	r2, [r7, #4]
 8101ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101ff8:	f7ff ff40 	bl	8101e7c <__NVIC_GetPriorityGrouping>
 8101ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101ffe:	687a      	ldr	r2, [r7, #4]
 8102000:	68b9      	ldr	r1, [r7, #8]
 8102002:	6978      	ldr	r0, [r7, #20]
 8102004:	f7ff ff90 	bl	8101f28 <NVIC_EncodePriority>
 8102008:	4602      	mov	r2, r0
 810200a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810200e:	4611      	mov	r1, r2
 8102010:	4618      	mov	r0, r3
 8102012:	f7ff ff5f 	bl	8101ed4 <__NVIC_SetPriority>
}
 8102016:	bf00      	nop
 8102018:	3718      	adds	r7, #24
 810201a:	46bd      	mov	sp, r7
 810201c:	bd80      	pop	{r7, pc}

0810201e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810201e:	b580      	push	{r7, lr}
 8102020:	b082      	sub	sp, #8
 8102022:	af00      	add	r7, sp, #0
 8102024:	4603      	mov	r3, r0
 8102026:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810202c:	4618      	mov	r0, r3
 810202e:	f7ff ff33 	bl	8101e98 <__NVIC_EnableIRQ>
}
 8102032:	bf00      	nop
 8102034:	3708      	adds	r7, #8
 8102036:	46bd      	mov	sp, r7
 8102038:	bd80      	pop	{r7, pc}

0810203a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 810203a:	b580      	push	{r7, lr}
 810203c:	b082      	sub	sp, #8
 810203e:	af00      	add	r7, sp, #0
 8102040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8102042:	6878      	ldr	r0, [r7, #4]
 8102044:	f7ff ffa4 	bl	8101f90 <SysTick_Config>
 8102048:	4603      	mov	r3, r0
}
 810204a:	4618      	mov	r0, r3
 810204c:	3708      	adds	r7, #8
 810204e:	46bd      	mov	sp, r7
 8102050:	bd80      	pop	{r7, pc}
	...

08102054 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102054:	b480      	push	{r7}
 8102056:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102058:	4b07      	ldr	r3, [pc, #28]	; (8102078 <HAL_GetCurrentCPUID+0x24>)
 810205a:	681b      	ldr	r3, [r3, #0]
 810205c:	091b      	lsrs	r3, r3, #4
 810205e:	f003 030f 	and.w	r3, r3, #15
 8102062:	2b07      	cmp	r3, #7
 8102064:	d101      	bne.n	810206a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102066:	2303      	movs	r3, #3
 8102068:	e000      	b.n	810206c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810206a:	2301      	movs	r3, #1
  }
}
 810206c:	4618      	mov	r0, r3
 810206e:	46bd      	mov	sp, r7
 8102070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102074:	4770      	bx	lr
 8102076:	bf00      	nop
 8102078:	e000ed00 	.word	0xe000ed00

0810207c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 810207c:	b480      	push	{r7}
 810207e:	b089      	sub	sp, #36	; 0x24
 8102080:	af00      	add	r7, sp, #0
 8102082:	6078      	str	r0, [r7, #4]
 8102084:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102086:	2300      	movs	r3, #0
 8102088:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810208a:	4b89      	ldr	r3, [pc, #548]	; (81022b0 <HAL_GPIO_Init+0x234>)
 810208c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810208e:	e194      	b.n	81023ba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102090:	683b      	ldr	r3, [r7, #0]
 8102092:	681a      	ldr	r2, [r3, #0]
 8102094:	2101      	movs	r1, #1
 8102096:	69fb      	ldr	r3, [r7, #28]
 8102098:	fa01 f303 	lsl.w	r3, r1, r3
 810209c:	4013      	ands	r3, r2
 810209e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81020a0:	693b      	ldr	r3, [r7, #16]
 81020a2:	2b00      	cmp	r3, #0
 81020a4:	f000 8186 	beq.w	81023b4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 81020a8:	683b      	ldr	r3, [r7, #0]
 81020aa:	685b      	ldr	r3, [r3, #4]
 81020ac:	f003 0303 	and.w	r3, r3, #3
 81020b0:	2b01      	cmp	r3, #1
 81020b2:	d005      	beq.n	81020c0 <HAL_GPIO_Init+0x44>
 81020b4:	683b      	ldr	r3, [r7, #0]
 81020b6:	685b      	ldr	r3, [r3, #4]
 81020b8:	f003 0303 	and.w	r3, r3, #3
 81020bc:	2b02      	cmp	r3, #2
 81020be:	d130      	bne.n	8102122 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	689b      	ldr	r3, [r3, #8]
 81020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81020c6:	69fb      	ldr	r3, [r7, #28]
 81020c8:	005b      	lsls	r3, r3, #1
 81020ca:	2203      	movs	r2, #3
 81020cc:	fa02 f303 	lsl.w	r3, r2, r3
 81020d0:	43db      	mvns	r3, r3
 81020d2:	69ba      	ldr	r2, [r7, #24]
 81020d4:	4013      	ands	r3, r2
 81020d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 81020d8:	683b      	ldr	r3, [r7, #0]
 81020da:	68da      	ldr	r2, [r3, #12]
 81020dc:	69fb      	ldr	r3, [r7, #28]
 81020de:	005b      	lsls	r3, r3, #1
 81020e0:	fa02 f303 	lsl.w	r3, r2, r3
 81020e4:	69ba      	ldr	r2, [r7, #24]
 81020e6:	4313      	orrs	r3, r2
 81020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81020ea:	687b      	ldr	r3, [r7, #4]
 81020ec:	69ba      	ldr	r2, [r7, #24]
 81020ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	685b      	ldr	r3, [r3, #4]
 81020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81020f6:	2201      	movs	r2, #1
 81020f8:	69fb      	ldr	r3, [r7, #28]
 81020fa:	fa02 f303 	lsl.w	r3, r2, r3
 81020fe:	43db      	mvns	r3, r3
 8102100:	69ba      	ldr	r2, [r7, #24]
 8102102:	4013      	ands	r3, r2
 8102104:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102106:	683b      	ldr	r3, [r7, #0]
 8102108:	685b      	ldr	r3, [r3, #4]
 810210a:	091b      	lsrs	r3, r3, #4
 810210c:	f003 0201 	and.w	r2, r3, #1
 8102110:	69fb      	ldr	r3, [r7, #28]
 8102112:	fa02 f303 	lsl.w	r3, r2, r3
 8102116:	69ba      	ldr	r2, [r7, #24]
 8102118:	4313      	orrs	r3, r2
 810211a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	69ba      	ldr	r2, [r7, #24]
 8102120:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102122:	683b      	ldr	r3, [r7, #0]
 8102124:	685b      	ldr	r3, [r3, #4]
 8102126:	f003 0303 	and.w	r3, r3, #3
 810212a:	2b03      	cmp	r3, #3
 810212c:	d017      	beq.n	810215e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810212e:	687b      	ldr	r3, [r7, #4]
 8102130:	68db      	ldr	r3, [r3, #12]
 8102132:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102134:	69fb      	ldr	r3, [r7, #28]
 8102136:	005b      	lsls	r3, r3, #1
 8102138:	2203      	movs	r2, #3
 810213a:	fa02 f303 	lsl.w	r3, r2, r3
 810213e:	43db      	mvns	r3, r3
 8102140:	69ba      	ldr	r2, [r7, #24]
 8102142:	4013      	ands	r3, r2
 8102144:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102146:	683b      	ldr	r3, [r7, #0]
 8102148:	689a      	ldr	r2, [r3, #8]
 810214a:	69fb      	ldr	r3, [r7, #28]
 810214c:	005b      	lsls	r3, r3, #1
 810214e:	fa02 f303 	lsl.w	r3, r2, r3
 8102152:	69ba      	ldr	r2, [r7, #24]
 8102154:	4313      	orrs	r3, r2
 8102156:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102158:	687b      	ldr	r3, [r7, #4]
 810215a:	69ba      	ldr	r2, [r7, #24]
 810215c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810215e:	683b      	ldr	r3, [r7, #0]
 8102160:	685b      	ldr	r3, [r3, #4]
 8102162:	f003 0303 	and.w	r3, r3, #3
 8102166:	2b02      	cmp	r3, #2
 8102168:	d123      	bne.n	81021b2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810216a:	69fb      	ldr	r3, [r7, #28]
 810216c:	08da      	lsrs	r2, r3, #3
 810216e:	687b      	ldr	r3, [r7, #4]
 8102170:	3208      	adds	r2, #8
 8102172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102176:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102178:	69fb      	ldr	r3, [r7, #28]
 810217a:	f003 0307 	and.w	r3, r3, #7
 810217e:	009b      	lsls	r3, r3, #2
 8102180:	220f      	movs	r2, #15
 8102182:	fa02 f303 	lsl.w	r3, r2, r3
 8102186:	43db      	mvns	r3, r3
 8102188:	69ba      	ldr	r2, [r7, #24]
 810218a:	4013      	ands	r3, r2
 810218c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810218e:	683b      	ldr	r3, [r7, #0]
 8102190:	691a      	ldr	r2, [r3, #16]
 8102192:	69fb      	ldr	r3, [r7, #28]
 8102194:	f003 0307 	and.w	r3, r3, #7
 8102198:	009b      	lsls	r3, r3, #2
 810219a:	fa02 f303 	lsl.w	r3, r2, r3
 810219e:	69ba      	ldr	r2, [r7, #24]
 81021a0:	4313      	orrs	r3, r2
 81021a2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81021a4:	69fb      	ldr	r3, [r7, #28]
 81021a6:	08da      	lsrs	r2, r3, #3
 81021a8:	687b      	ldr	r3, [r7, #4]
 81021aa:	3208      	adds	r2, #8
 81021ac:	69b9      	ldr	r1, [r7, #24]
 81021ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81021b2:	687b      	ldr	r3, [r7, #4]
 81021b4:	681b      	ldr	r3, [r3, #0]
 81021b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81021b8:	69fb      	ldr	r3, [r7, #28]
 81021ba:	005b      	lsls	r3, r3, #1
 81021bc:	2203      	movs	r2, #3
 81021be:	fa02 f303 	lsl.w	r3, r2, r3
 81021c2:	43db      	mvns	r3, r3
 81021c4:	69ba      	ldr	r2, [r7, #24]
 81021c6:	4013      	ands	r3, r2
 81021c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81021ca:	683b      	ldr	r3, [r7, #0]
 81021cc:	685b      	ldr	r3, [r3, #4]
 81021ce:	f003 0203 	and.w	r2, r3, #3
 81021d2:	69fb      	ldr	r3, [r7, #28]
 81021d4:	005b      	lsls	r3, r3, #1
 81021d6:	fa02 f303 	lsl.w	r3, r2, r3
 81021da:	69ba      	ldr	r2, [r7, #24]
 81021dc:	4313      	orrs	r3, r2
 81021de:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81021e0:	687b      	ldr	r3, [r7, #4]
 81021e2:	69ba      	ldr	r2, [r7, #24]
 81021e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81021e6:	683b      	ldr	r3, [r7, #0]
 81021e8:	685b      	ldr	r3, [r3, #4]
 81021ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81021ee:	2b00      	cmp	r3, #0
 81021f0:	f000 80e0 	beq.w	81023b4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81021f4:	4b2f      	ldr	r3, [pc, #188]	; (81022b4 <HAL_GPIO_Init+0x238>)
 81021f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81021fa:	4a2e      	ldr	r2, [pc, #184]	; (81022b4 <HAL_GPIO_Init+0x238>)
 81021fc:	f043 0302 	orr.w	r3, r3, #2
 8102200:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8102204:	4b2b      	ldr	r3, [pc, #172]	; (81022b4 <HAL_GPIO_Init+0x238>)
 8102206:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 810220a:	f003 0302 	and.w	r3, r3, #2
 810220e:	60fb      	str	r3, [r7, #12]
 8102210:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102212:	4a29      	ldr	r2, [pc, #164]	; (81022b8 <HAL_GPIO_Init+0x23c>)
 8102214:	69fb      	ldr	r3, [r7, #28]
 8102216:	089b      	lsrs	r3, r3, #2
 8102218:	3302      	adds	r3, #2
 810221a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810221e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102220:	69fb      	ldr	r3, [r7, #28]
 8102222:	f003 0303 	and.w	r3, r3, #3
 8102226:	009b      	lsls	r3, r3, #2
 8102228:	220f      	movs	r2, #15
 810222a:	fa02 f303 	lsl.w	r3, r2, r3
 810222e:	43db      	mvns	r3, r3
 8102230:	69ba      	ldr	r2, [r7, #24]
 8102232:	4013      	ands	r3, r2
 8102234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102236:	687b      	ldr	r3, [r7, #4]
 8102238:	4a20      	ldr	r2, [pc, #128]	; (81022bc <HAL_GPIO_Init+0x240>)
 810223a:	4293      	cmp	r3, r2
 810223c:	d052      	beq.n	81022e4 <HAL_GPIO_Init+0x268>
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	4a1f      	ldr	r2, [pc, #124]	; (81022c0 <HAL_GPIO_Init+0x244>)
 8102242:	4293      	cmp	r3, r2
 8102244:	d031      	beq.n	81022aa <HAL_GPIO_Init+0x22e>
 8102246:	687b      	ldr	r3, [r7, #4]
 8102248:	4a1e      	ldr	r2, [pc, #120]	; (81022c4 <HAL_GPIO_Init+0x248>)
 810224a:	4293      	cmp	r3, r2
 810224c:	d02b      	beq.n	81022a6 <HAL_GPIO_Init+0x22a>
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	4a1d      	ldr	r2, [pc, #116]	; (81022c8 <HAL_GPIO_Init+0x24c>)
 8102252:	4293      	cmp	r3, r2
 8102254:	d025      	beq.n	81022a2 <HAL_GPIO_Init+0x226>
 8102256:	687b      	ldr	r3, [r7, #4]
 8102258:	4a1c      	ldr	r2, [pc, #112]	; (81022cc <HAL_GPIO_Init+0x250>)
 810225a:	4293      	cmp	r3, r2
 810225c:	d01f      	beq.n	810229e <HAL_GPIO_Init+0x222>
 810225e:	687b      	ldr	r3, [r7, #4]
 8102260:	4a1b      	ldr	r2, [pc, #108]	; (81022d0 <HAL_GPIO_Init+0x254>)
 8102262:	4293      	cmp	r3, r2
 8102264:	d019      	beq.n	810229a <HAL_GPIO_Init+0x21e>
 8102266:	687b      	ldr	r3, [r7, #4]
 8102268:	4a1a      	ldr	r2, [pc, #104]	; (81022d4 <HAL_GPIO_Init+0x258>)
 810226a:	4293      	cmp	r3, r2
 810226c:	d013      	beq.n	8102296 <HAL_GPIO_Init+0x21a>
 810226e:	687b      	ldr	r3, [r7, #4]
 8102270:	4a19      	ldr	r2, [pc, #100]	; (81022d8 <HAL_GPIO_Init+0x25c>)
 8102272:	4293      	cmp	r3, r2
 8102274:	d00d      	beq.n	8102292 <HAL_GPIO_Init+0x216>
 8102276:	687b      	ldr	r3, [r7, #4]
 8102278:	4a18      	ldr	r2, [pc, #96]	; (81022dc <HAL_GPIO_Init+0x260>)
 810227a:	4293      	cmp	r3, r2
 810227c:	d007      	beq.n	810228e <HAL_GPIO_Init+0x212>
 810227e:	687b      	ldr	r3, [r7, #4]
 8102280:	4a17      	ldr	r2, [pc, #92]	; (81022e0 <HAL_GPIO_Init+0x264>)
 8102282:	4293      	cmp	r3, r2
 8102284:	d101      	bne.n	810228a <HAL_GPIO_Init+0x20e>
 8102286:	2309      	movs	r3, #9
 8102288:	e02d      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 810228a:	230a      	movs	r3, #10
 810228c:	e02b      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 810228e:	2308      	movs	r3, #8
 8102290:	e029      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 8102292:	2307      	movs	r3, #7
 8102294:	e027      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 8102296:	2306      	movs	r3, #6
 8102298:	e025      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 810229a:	2305      	movs	r3, #5
 810229c:	e023      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 810229e:	2304      	movs	r3, #4
 81022a0:	e021      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 81022a2:	2303      	movs	r3, #3
 81022a4:	e01f      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 81022a6:	2302      	movs	r3, #2
 81022a8:	e01d      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 81022aa:	2301      	movs	r3, #1
 81022ac:	e01b      	b.n	81022e6 <HAL_GPIO_Init+0x26a>
 81022ae:	bf00      	nop
 81022b0:	580000c0 	.word	0x580000c0
 81022b4:	58024400 	.word	0x58024400
 81022b8:	58000400 	.word	0x58000400
 81022bc:	58020000 	.word	0x58020000
 81022c0:	58020400 	.word	0x58020400
 81022c4:	58020800 	.word	0x58020800
 81022c8:	58020c00 	.word	0x58020c00
 81022cc:	58021000 	.word	0x58021000
 81022d0:	58021400 	.word	0x58021400
 81022d4:	58021800 	.word	0x58021800
 81022d8:	58021c00 	.word	0x58021c00
 81022dc:	58022000 	.word	0x58022000
 81022e0:	58022400 	.word	0x58022400
 81022e4:	2300      	movs	r3, #0
 81022e6:	69fa      	ldr	r2, [r7, #28]
 81022e8:	f002 0203 	and.w	r2, r2, #3
 81022ec:	0092      	lsls	r2, r2, #2
 81022ee:	4093      	lsls	r3, r2
 81022f0:	69ba      	ldr	r2, [r7, #24]
 81022f2:	4313      	orrs	r3, r2
 81022f4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81022f6:	4938      	ldr	r1, [pc, #224]	; (81023d8 <HAL_GPIO_Init+0x35c>)
 81022f8:	69fb      	ldr	r3, [r7, #28]
 81022fa:	089b      	lsrs	r3, r3, #2
 81022fc:	3302      	adds	r3, #2
 81022fe:	69ba      	ldr	r2, [r7, #24]
 8102300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102304:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102308:	681b      	ldr	r3, [r3, #0]
 810230a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810230c:	693b      	ldr	r3, [r7, #16]
 810230e:	43db      	mvns	r3, r3
 8102310:	69ba      	ldr	r2, [r7, #24]
 8102312:	4013      	ands	r3, r2
 8102314:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102316:	683b      	ldr	r3, [r7, #0]
 8102318:	685b      	ldr	r3, [r3, #4]
 810231a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810231e:	2b00      	cmp	r3, #0
 8102320:	d003      	beq.n	810232a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102322:	69ba      	ldr	r2, [r7, #24]
 8102324:	693b      	ldr	r3, [r7, #16]
 8102326:	4313      	orrs	r3, r2
 8102328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 810232a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810232e:	69bb      	ldr	r3, [r7, #24]
 8102330:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8102336:	685b      	ldr	r3, [r3, #4]
 8102338:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810233a:	693b      	ldr	r3, [r7, #16]
 810233c:	43db      	mvns	r3, r3
 810233e:	69ba      	ldr	r2, [r7, #24]
 8102340:	4013      	ands	r3, r2
 8102342:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102344:	683b      	ldr	r3, [r7, #0]
 8102346:	685b      	ldr	r3, [r3, #4]
 8102348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 810234c:	2b00      	cmp	r3, #0
 810234e:	d003      	beq.n	8102358 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102350:	69ba      	ldr	r2, [r7, #24]
 8102352:	693b      	ldr	r3, [r7, #16]
 8102354:	4313      	orrs	r3, r2
 8102356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102358:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 810235c:	69bb      	ldr	r3, [r7, #24]
 810235e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102360:	697b      	ldr	r3, [r7, #20]
 8102362:	685b      	ldr	r3, [r3, #4]
 8102364:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102366:	693b      	ldr	r3, [r7, #16]
 8102368:	43db      	mvns	r3, r3
 810236a:	69ba      	ldr	r2, [r7, #24]
 810236c:	4013      	ands	r3, r2
 810236e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102370:	683b      	ldr	r3, [r7, #0]
 8102372:	685b      	ldr	r3, [r3, #4]
 8102374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102378:	2b00      	cmp	r3, #0
 810237a:	d003      	beq.n	8102384 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 810237c:	69ba      	ldr	r2, [r7, #24]
 810237e:	693b      	ldr	r3, [r7, #16]
 8102380:	4313      	orrs	r3, r2
 8102382:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102384:	697b      	ldr	r3, [r7, #20]
 8102386:	69ba      	ldr	r2, [r7, #24]
 8102388:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810238a:	697b      	ldr	r3, [r7, #20]
 810238c:	681b      	ldr	r3, [r3, #0]
 810238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102390:	693b      	ldr	r3, [r7, #16]
 8102392:	43db      	mvns	r3, r3
 8102394:	69ba      	ldr	r2, [r7, #24]
 8102396:	4013      	ands	r3, r2
 8102398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810239a:	683b      	ldr	r3, [r7, #0]
 810239c:	685b      	ldr	r3, [r3, #4]
 810239e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81023a2:	2b00      	cmp	r3, #0
 81023a4:	d003      	beq.n	81023ae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81023a6:	69ba      	ldr	r2, [r7, #24]
 81023a8:	693b      	ldr	r3, [r7, #16]
 81023aa:	4313      	orrs	r3, r2
 81023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81023ae:	697b      	ldr	r3, [r7, #20]
 81023b0:	69ba      	ldr	r2, [r7, #24]
 81023b2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81023b4:	69fb      	ldr	r3, [r7, #28]
 81023b6:	3301      	adds	r3, #1
 81023b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81023ba:	683b      	ldr	r3, [r7, #0]
 81023bc:	681a      	ldr	r2, [r3, #0]
 81023be:	69fb      	ldr	r3, [r7, #28]
 81023c0:	fa22 f303 	lsr.w	r3, r2, r3
 81023c4:	2b00      	cmp	r3, #0
 81023c6:	f47f ae63 	bne.w	8102090 <HAL_GPIO_Init+0x14>
  }
}
 81023ca:	bf00      	nop
 81023cc:	bf00      	nop
 81023ce:	3724      	adds	r7, #36	; 0x24
 81023d0:	46bd      	mov	sp, r7
 81023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023d6:	4770      	bx	lr
 81023d8:	58000400 	.word	0x58000400

081023dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 81023dc:	b580      	push	{r7, lr}
 81023de:	b082      	sub	sp, #8
 81023e0:	af00      	add	r7, sp, #0
 81023e2:	4603      	mov	r3, r0
 81023e4:	80fb      	strh	r3, [r7, #6]
#if defined(DUAL_CORE) && defined(CORE_CM4)
  if (__HAL_GPIO_EXTID2_GET_IT(GPIO_Pin) != 0x00U)
 81023e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81023ea:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 81023ee:	88fb      	ldrh	r3, [r7, #6]
 81023f0:	4013      	ands	r3, r2
 81023f2:	2b00      	cmp	r3, #0
 81023f4:	d008      	beq.n	8102408 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
 81023f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81023fa:	88fb      	ldrh	r3, [r7, #6]
 81023fc:	f8c2 30c8 	str.w	r3, [r2, #200]	; 0xc8
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8102400:	88fb      	ldrh	r3, [r7, #6]
 8102402:	4618      	mov	r0, r3
 8102404:	f7ff fa2a 	bl	810185c <HAL_GPIO_EXTI_Callback>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#endif
}
 8102408:	bf00      	nop
 810240a:	3708      	adds	r7, #8
 810240c:	46bd      	mov	sp, r7
 810240e:	bd80      	pop	{r7, pc}

08102410 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102410:	b480      	push	{r7}
 8102412:	b083      	sub	sp, #12
 8102414:	af00      	add	r7, sp, #0
 8102416:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102418:	4b05      	ldr	r3, [pc, #20]	; (8102430 <HAL_HSEM_ActivateNotification+0x20>)
 810241a:	681a      	ldr	r2, [r3, #0]
 810241c:	4904      	ldr	r1, [pc, #16]	; (8102430 <HAL_HSEM_ActivateNotification+0x20>)
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	4313      	orrs	r3, r2
 8102422:	600b      	str	r3, [r1, #0]
#endif
}
 8102424:	bf00      	nop
 8102426:	370c      	adds	r7, #12
 8102428:	46bd      	mov	sp, r7
 810242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810242e:	4770      	bx	lr
 8102430:	58026510 	.word	0x58026510

08102434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8102434:	b580      	push	{r7, lr}
 8102436:	b082      	sub	sp, #8
 8102438:	af00      	add	r7, sp, #0
 810243a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	2b00      	cmp	r3, #0
 8102440:	d101      	bne.n	8102446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8102442:	2301      	movs	r3, #1
 8102444:	e081      	b.n	810254a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8102446:	687b      	ldr	r3, [r7, #4]
 8102448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810244c:	b2db      	uxtb	r3, r3
 810244e:	2b00      	cmp	r3, #0
 8102450:	d106      	bne.n	8102460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8102452:	687b      	ldr	r3, [r7, #4]
 8102454:	2200      	movs	r2, #0
 8102456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 810245a:	6878      	ldr	r0, [r7, #4]
 810245c:	f7ff fa44 	bl	81018e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8102460:	687b      	ldr	r3, [r7, #4]
 8102462:	2224      	movs	r2, #36	; 0x24
 8102464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	681b      	ldr	r3, [r3, #0]
 810246c:	681a      	ldr	r2, [r3, #0]
 810246e:	687b      	ldr	r3, [r7, #4]
 8102470:	681b      	ldr	r3, [r3, #0]
 8102472:	f022 0201 	bic.w	r2, r2, #1
 8102476:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8102478:	687b      	ldr	r3, [r7, #4]
 810247a:	685a      	ldr	r2, [r3, #4]
 810247c:	687b      	ldr	r3, [r7, #4]
 810247e:	681b      	ldr	r3, [r3, #0]
 8102480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8102484:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102486:	687b      	ldr	r3, [r7, #4]
 8102488:	681b      	ldr	r3, [r3, #0]
 810248a:	689a      	ldr	r2, [r3, #8]
 810248c:	687b      	ldr	r3, [r7, #4]
 810248e:	681b      	ldr	r3, [r3, #0]
 8102490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8102494:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	68db      	ldr	r3, [r3, #12]
 810249a:	2b01      	cmp	r3, #1
 810249c:	d107      	bne.n	81024ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	689a      	ldr	r2, [r3, #8]
 81024a2:	687b      	ldr	r3, [r7, #4]
 81024a4:	681b      	ldr	r3, [r3, #0]
 81024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 81024aa:	609a      	str	r2, [r3, #8]
 81024ac:	e006      	b.n	81024bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 81024ae:	687b      	ldr	r3, [r7, #4]
 81024b0:	689a      	ldr	r2, [r3, #8]
 81024b2:	687b      	ldr	r3, [r7, #4]
 81024b4:	681b      	ldr	r3, [r3, #0]
 81024b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 81024ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 81024bc:	687b      	ldr	r3, [r7, #4]
 81024be:	68db      	ldr	r3, [r3, #12]
 81024c0:	2b02      	cmp	r3, #2
 81024c2:	d104      	bne.n	81024ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	681b      	ldr	r3, [r3, #0]
 81024c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 81024cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 81024ce:	687b      	ldr	r3, [r7, #4]
 81024d0:	681b      	ldr	r3, [r3, #0]
 81024d2:	685b      	ldr	r3, [r3, #4]
 81024d4:	687a      	ldr	r2, [r7, #4]
 81024d6:	6812      	ldr	r2, [r2, #0]
 81024d8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 81024dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 81024e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 81024e2:	687b      	ldr	r3, [r7, #4]
 81024e4:	681b      	ldr	r3, [r3, #0]
 81024e6:	68da      	ldr	r2, [r3, #12]
 81024e8:	687b      	ldr	r3, [r7, #4]
 81024ea:	681b      	ldr	r3, [r3, #0]
 81024ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 81024f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 81024f2:	687b      	ldr	r3, [r7, #4]
 81024f4:	691a      	ldr	r2, [r3, #16]
 81024f6:	687b      	ldr	r3, [r7, #4]
 81024f8:	695b      	ldr	r3, [r3, #20]
 81024fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 81024fe:	687b      	ldr	r3, [r7, #4]
 8102500:	699b      	ldr	r3, [r3, #24]
 8102502:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8102504:	687b      	ldr	r3, [r7, #4]
 8102506:	681b      	ldr	r3, [r3, #0]
 8102508:	430a      	orrs	r2, r1
 810250a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 810250c:	687b      	ldr	r3, [r7, #4]
 810250e:	69d9      	ldr	r1, [r3, #28]
 8102510:	687b      	ldr	r3, [r7, #4]
 8102512:	6a1a      	ldr	r2, [r3, #32]
 8102514:	687b      	ldr	r3, [r7, #4]
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	430a      	orrs	r2, r1
 810251a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 810251c:	687b      	ldr	r3, [r7, #4]
 810251e:	681b      	ldr	r3, [r3, #0]
 8102520:	681a      	ldr	r2, [r3, #0]
 8102522:	687b      	ldr	r3, [r7, #4]
 8102524:	681b      	ldr	r3, [r3, #0]
 8102526:	f042 0201 	orr.w	r2, r2, #1
 810252a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 810252c:	687b      	ldr	r3, [r7, #4]
 810252e:	2200      	movs	r2, #0
 8102530:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	2220      	movs	r2, #32
 8102536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 810253a:	687b      	ldr	r3, [r7, #4]
 810253c:	2200      	movs	r2, #0
 810253e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8102540:	687b      	ldr	r3, [r7, #4]
 8102542:	2200      	movs	r2, #0
 8102544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8102548:	2300      	movs	r3, #0
}
 810254a:	4618      	mov	r0, r3
 810254c:	3708      	adds	r7, #8
 810254e:	46bd      	mov	sp, r7
 8102550:	bd80      	pop	{r7, pc}
	...

08102554 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102554:	b580      	push	{r7, lr}
 8102556:	b088      	sub	sp, #32
 8102558:	af02      	add	r7, sp, #8
 810255a:	60f8      	str	r0, [r7, #12]
 810255c:	4608      	mov	r0, r1
 810255e:	4611      	mov	r1, r2
 8102560:	461a      	mov	r2, r3
 8102562:	4603      	mov	r3, r0
 8102564:	817b      	strh	r3, [r7, #10]
 8102566:	460b      	mov	r3, r1
 8102568:	813b      	strh	r3, [r7, #8]
 810256a:	4613      	mov	r3, r2
 810256c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8102574:	b2db      	uxtb	r3, r3
 8102576:	2b20      	cmp	r3, #32
 8102578:	f040 80f9 	bne.w	810276e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 810257c:	6a3b      	ldr	r3, [r7, #32]
 810257e:	2b00      	cmp	r3, #0
 8102580:	d002      	beq.n	8102588 <HAL_I2C_Mem_Write+0x34>
 8102582:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8102584:	2b00      	cmp	r3, #0
 8102586:	d105      	bne.n	8102594 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102588:	68fb      	ldr	r3, [r7, #12]
 810258a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810258e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8102590:	2301      	movs	r3, #1
 8102592:	e0ed      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102594:	68fb      	ldr	r3, [r7, #12]
 8102596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810259a:	2b01      	cmp	r3, #1
 810259c:	d101      	bne.n	81025a2 <HAL_I2C_Mem_Write+0x4e>
 810259e:	2302      	movs	r3, #2
 81025a0:	e0e6      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
 81025a2:	68fb      	ldr	r3, [r7, #12]
 81025a4:	2201      	movs	r2, #1
 81025a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81025aa:	f7ff fc37 	bl	8101e1c <HAL_GetTick>
 81025ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81025b0:	697b      	ldr	r3, [r7, #20]
 81025b2:	9300      	str	r3, [sp, #0]
 81025b4:	2319      	movs	r3, #25
 81025b6:	2201      	movs	r2, #1
 81025b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81025bc:	68f8      	ldr	r0, [r7, #12]
 81025be:	f000 fbcb 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 81025c2:	4603      	mov	r3, r0
 81025c4:	2b00      	cmp	r3, #0
 81025c6:	d001      	beq.n	81025cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 81025c8:	2301      	movs	r3, #1
 81025ca:	e0d1      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 81025cc:	68fb      	ldr	r3, [r7, #12]
 81025ce:	2221      	movs	r2, #33	; 0x21
 81025d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81025d4:	68fb      	ldr	r3, [r7, #12]
 81025d6:	2240      	movs	r2, #64	; 0x40
 81025d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81025dc:	68fb      	ldr	r3, [r7, #12]
 81025de:	2200      	movs	r2, #0
 81025e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81025e2:	68fb      	ldr	r3, [r7, #12]
 81025e4:	6a3a      	ldr	r2, [r7, #32]
 81025e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 81025e8:	68fb      	ldr	r3, [r7, #12]
 81025ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 81025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 81025ee:	68fb      	ldr	r3, [r7, #12]
 81025f0:	2200      	movs	r2, #0
 81025f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81025f4:	88f8      	ldrh	r0, [r7, #6]
 81025f6:	893a      	ldrh	r2, [r7, #8]
 81025f8:	8979      	ldrh	r1, [r7, #10]
 81025fa:	697b      	ldr	r3, [r7, #20]
 81025fc:	9301      	str	r3, [sp, #4]
 81025fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102600:	9300      	str	r3, [sp, #0]
 8102602:	4603      	mov	r3, r0
 8102604:	68f8      	ldr	r0, [r7, #12]
 8102606:	f000 fadb 	bl	8102bc0 <I2C_RequestMemoryWrite>
 810260a:	4603      	mov	r3, r0
 810260c:	2b00      	cmp	r3, #0
 810260e:	d005      	beq.n	810261c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102610:	68fb      	ldr	r3, [r7, #12]
 8102612:	2200      	movs	r2, #0
 8102614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102618:	2301      	movs	r3, #1
 810261a:	e0a9      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810261c:	68fb      	ldr	r3, [r7, #12]
 810261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102620:	b29b      	uxth	r3, r3
 8102622:	2bff      	cmp	r3, #255	; 0xff
 8102624:	d90e      	bls.n	8102644 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102626:	68fb      	ldr	r3, [r7, #12]
 8102628:	22ff      	movs	r2, #255	; 0xff
 810262a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 810262c:	68fb      	ldr	r3, [r7, #12]
 810262e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102630:	b2da      	uxtb	r2, r3
 8102632:	8979      	ldrh	r1, [r7, #10]
 8102634:	2300      	movs	r3, #0
 8102636:	9300      	str	r3, [sp, #0]
 8102638:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 810263c:	68f8      	ldr	r0, [r7, #12]
 810263e:	f000 fd45 	bl	81030cc <I2C_TransferConfig>
 8102642:	e00f      	b.n	8102664 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102644:	68fb      	ldr	r3, [r7, #12]
 8102646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102648:	b29a      	uxth	r2, r3
 810264a:	68fb      	ldr	r3, [r7, #12]
 810264c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 810264e:	68fb      	ldr	r3, [r7, #12]
 8102650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102652:	b2da      	uxtb	r2, r3
 8102654:	8979      	ldrh	r1, [r7, #10]
 8102656:	2300      	movs	r3, #0
 8102658:	9300      	str	r3, [sp, #0]
 810265a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810265e:	68f8      	ldr	r0, [r7, #12]
 8102660:	f000 fd34 	bl	81030cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102664:	697a      	ldr	r2, [r7, #20]
 8102666:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8102668:	68f8      	ldr	r0, [r7, #12]
 810266a:	f000 fbc4 	bl	8102df6 <I2C_WaitOnTXISFlagUntilTimeout>
 810266e:	4603      	mov	r3, r0
 8102670:	2b00      	cmp	r3, #0
 8102672:	d001      	beq.n	8102678 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8102674:	2301      	movs	r3, #1
 8102676:	e07b      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102678:	68fb      	ldr	r3, [r7, #12]
 810267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810267c:	781a      	ldrb	r2, [r3, #0]
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	681b      	ldr	r3, [r3, #0]
 8102682:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8102688:	1c5a      	adds	r2, r3, #1
 810268a:	68fb      	ldr	r3, [r7, #12]
 810268c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 810268e:	68fb      	ldr	r3, [r7, #12]
 8102690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102692:	b29b      	uxth	r3, r3
 8102694:	3b01      	subs	r3, #1
 8102696:	b29a      	uxth	r2, r3
 8102698:	68fb      	ldr	r3, [r7, #12]
 810269a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026a0:	3b01      	subs	r3, #1
 81026a2:	b29a      	uxth	r2, r3
 81026a4:	68fb      	ldr	r3, [r7, #12]
 81026a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81026a8:	68fb      	ldr	r3, [r7, #12]
 81026aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026ac:	b29b      	uxth	r3, r3
 81026ae:	2b00      	cmp	r3, #0
 81026b0:	d034      	beq.n	810271c <HAL_I2C_Mem_Write+0x1c8>
 81026b2:	68fb      	ldr	r3, [r7, #12]
 81026b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026b6:	2b00      	cmp	r3, #0
 81026b8:	d130      	bne.n	810271c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81026ba:	697b      	ldr	r3, [r7, #20]
 81026bc:	9300      	str	r3, [sp, #0]
 81026be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81026c0:	2200      	movs	r2, #0
 81026c2:	2180      	movs	r1, #128	; 0x80
 81026c4:	68f8      	ldr	r0, [r7, #12]
 81026c6:	f000 fb47 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 81026ca:	4603      	mov	r3, r0
 81026cc:	2b00      	cmp	r3, #0
 81026ce:	d001      	beq.n	81026d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 81026d0:	2301      	movs	r3, #1
 81026d2:	e04d      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81026d8:	b29b      	uxth	r3, r3
 81026da:	2bff      	cmp	r3, #255	; 0xff
 81026dc:	d90e      	bls.n	81026fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81026de:	68fb      	ldr	r3, [r7, #12]
 81026e0:	22ff      	movs	r2, #255	; 0xff
 81026e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81026e4:	68fb      	ldr	r3, [r7, #12]
 81026e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81026e8:	b2da      	uxtb	r2, r3
 81026ea:	8979      	ldrh	r1, [r7, #10]
 81026ec:	2300      	movs	r3, #0
 81026ee:	9300      	str	r3, [sp, #0]
 81026f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 81026f4:	68f8      	ldr	r0, [r7, #12]
 81026f6:	f000 fce9 	bl	81030cc <I2C_TransferConfig>
 81026fa:	e00f      	b.n	810271c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81026fc:	68fb      	ldr	r3, [r7, #12]
 81026fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102700:	b29a      	uxth	r2, r3
 8102702:	68fb      	ldr	r3, [r7, #12]
 8102704:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102706:	68fb      	ldr	r3, [r7, #12]
 8102708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810270a:	b2da      	uxtb	r2, r3
 810270c:	8979      	ldrh	r1, [r7, #10]
 810270e:	2300      	movs	r3, #0
 8102710:	9300      	str	r3, [sp, #0]
 8102712:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102716:	68f8      	ldr	r0, [r7, #12]
 8102718:	f000 fcd8 	bl	81030cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 810271c:	68fb      	ldr	r3, [r7, #12]
 810271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102720:	b29b      	uxth	r3, r3
 8102722:	2b00      	cmp	r3, #0
 8102724:	d19e      	bne.n	8102664 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102726:	697a      	ldr	r2, [r7, #20]
 8102728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810272a:	68f8      	ldr	r0, [r7, #12]
 810272c:	f000 fbaa 	bl	8102e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102730:	4603      	mov	r3, r0
 8102732:	2b00      	cmp	r3, #0
 8102734:	d001      	beq.n	810273a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8102736:	2301      	movs	r3, #1
 8102738:	e01a      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810273a:	68fb      	ldr	r3, [r7, #12]
 810273c:	681b      	ldr	r3, [r3, #0]
 810273e:	2220      	movs	r2, #32
 8102740:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102742:	68fb      	ldr	r3, [r7, #12]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	6859      	ldr	r1, [r3, #4]
 8102748:	68fb      	ldr	r3, [r7, #12]
 810274a:	681a      	ldr	r2, [r3, #0]
 810274c:	4b0a      	ldr	r3, [pc, #40]	; (8102778 <HAL_I2C_Mem_Write+0x224>)
 810274e:	400b      	ands	r3, r1
 8102750:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102752:	68fb      	ldr	r3, [r7, #12]
 8102754:	2220      	movs	r2, #32
 8102756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810275a:	68fb      	ldr	r3, [r7, #12]
 810275c:	2200      	movs	r2, #0
 810275e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102762:	68fb      	ldr	r3, [r7, #12]
 8102764:	2200      	movs	r2, #0
 8102766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810276a:	2300      	movs	r3, #0
 810276c:	e000      	b.n	8102770 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 810276e:	2302      	movs	r3, #2
  }
}
 8102770:	4618      	mov	r0, r3
 8102772:	3718      	adds	r7, #24
 8102774:	46bd      	mov	sp, r7
 8102776:	bd80      	pop	{r7, pc}
 8102778:	fe00e800 	.word	0xfe00e800

0810277c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810277c:	b580      	push	{r7, lr}
 810277e:	b088      	sub	sp, #32
 8102780:	af02      	add	r7, sp, #8
 8102782:	60f8      	str	r0, [r7, #12]
 8102784:	4608      	mov	r0, r1
 8102786:	4611      	mov	r1, r2
 8102788:	461a      	mov	r2, r3
 810278a:	4603      	mov	r3, r0
 810278c:	817b      	strh	r3, [r7, #10]
 810278e:	460b      	mov	r3, r1
 8102790:	813b      	strh	r3, [r7, #8]
 8102792:	4613      	mov	r3, r2
 8102794:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102796:	68fb      	ldr	r3, [r7, #12]
 8102798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 810279c:	b2db      	uxtb	r3, r3
 810279e:	2b20      	cmp	r3, #32
 81027a0:	f040 80fd 	bne.w	810299e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 81027a4:	6a3b      	ldr	r3, [r7, #32]
 81027a6:	2b00      	cmp	r3, #0
 81027a8:	d002      	beq.n	81027b0 <HAL_I2C_Mem_Read+0x34>
 81027aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 81027ac:	2b00      	cmp	r3, #0
 81027ae:	d105      	bne.n	81027bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 81027b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 81027b8:	2301      	movs	r3, #1
 81027ba:	e0f1      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81027bc:	68fb      	ldr	r3, [r7, #12]
 81027be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81027c2:	2b01      	cmp	r3, #1
 81027c4:	d101      	bne.n	81027ca <HAL_I2C_Mem_Read+0x4e>
 81027c6:	2302      	movs	r3, #2
 81027c8:	e0ea      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
 81027ca:	68fb      	ldr	r3, [r7, #12]
 81027cc:	2201      	movs	r2, #1
 81027ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 81027d2:	f7ff fb23 	bl	8101e1c <HAL_GetTick>
 81027d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81027d8:	697b      	ldr	r3, [r7, #20]
 81027da:	9300      	str	r3, [sp, #0]
 81027dc:	2319      	movs	r3, #25
 81027de:	2201      	movs	r2, #1
 81027e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 81027e4:	68f8      	ldr	r0, [r7, #12]
 81027e6:	f000 fab7 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 81027ea:	4603      	mov	r3, r0
 81027ec:	2b00      	cmp	r3, #0
 81027ee:	d001      	beq.n	81027f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81027f0:	2301      	movs	r3, #1
 81027f2:	e0d5      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81027f4:	68fb      	ldr	r3, [r7, #12]
 81027f6:	2222      	movs	r2, #34	; 0x22
 81027f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81027fc:	68fb      	ldr	r3, [r7, #12]
 81027fe:	2240      	movs	r2, #64	; 0x40
 8102800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102804:	68fb      	ldr	r3, [r7, #12]
 8102806:	2200      	movs	r2, #0
 8102808:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810280a:	68fb      	ldr	r3, [r7, #12]
 810280c:	6a3a      	ldr	r2, [r7, #32]
 810280e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8102810:	68fb      	ldr	r3, [r7, #12]
 8102812:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8102814:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8102816:	68fb      	ldr	r3, [r7, #12]
 8102818:	2200      	movs	r2, #0
 810281a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 810281c:	88f8      	ldrh	r0, [r7, #6]
 810281e:	893a      	ldrh	r2, [r7, #8]
 8102820:	8979      	ldrh	r1, [r7, #10]
 8102822:	697b      	ldr	r3, [r7, #20]
 8102824:	9301      	str	r3, [sp, #4]
 8102826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102828:	9300      	str	r3, [sp, #0]
 810282a:	4603      	mov	r3, r0
 810282c:	68f8      	ldr	r0, [r7, #12]
 810282e:	f000 fa1b 	bl	8102c68 <I2C_RequestMemoryRead>
 8102832:	4603      	mov	r3, r0
 8102834:	2b00      	cmp	r3, #0
 8102836:	d005      	beq.n	8102844 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102838:	68fb      	ldr	r3, [r7, #12]
 810283a:	2200      	movs	r2, #0
 810283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8102840:	2301      	movs	r3, #1
 8102842:	e0ad      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102844:	68fb      	ldr	r3, [r7, #12]
 8102846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102848:	b29b      	uxth	r3, r3
 810284a:	2bff      	cmp	r3, #255	; 0xff
 810284c:	d90e      	bls.n	810286c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 810284e:	68fb      	ldr	r3, [r7, #12]
 8102850:	22ff      	movs	r2, #255	; 0xff
 8102852:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102854:	68fb      	ldr	r3, [r7, #12]
 8102856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102858:	b2da      	uxtb	r2, r3
 810285a:	8979      	ldrh	r1, [r7, #10]
 810285c:	4b52      	ldr	r3, [pc, #328]	; (81029a8 <HAL_I2C_Mem_Read+0x22c>)
 810285e:	9300      	str	r3, [sp, #0]
 8102860:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102864:	68f8      	ldr	r0, [r7, #12]
 8102866:	f000 fc31 	bl	81030cc <I2C_TransferConfig>
 810286a:	e00f      	b.n	810288c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810286c:	68fb      	ldr	r3, [r7, #12]
 810286e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102870:	b29a      	uxth	r2, r3
 8102872:	68fb      	ldr	r3, [r7, #12]
 8102874:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102876:	68fb      	ldr	r3, [r7, #12]
 8102878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810287a:	b2da      	uxtb	r2, r3
 810287c:	8979      	ldrh	r1, [r7, #10]
 810287e:	4b4a      	ldr	r3, [pc, #296]	; (81029a8 <HAL_I2C_Mem_Read+0x22c>)
 8102880:	9300      	str	r3, [sp, #0]
 8102882:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102886:	68f8      	ldr	r0, [r7, #12]
 8102888:	f000 fc20 	bl	81030cc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 810288c:	697b      	ldr	r3, [r7, #20]
 810288e:	9300      	str	r3, [sp, #0]
 8102890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102892:	2200      	movs	r2, #0
 8102894:	2104      	movs	r1, #4
 8102896:	68f8      	ldr	r0, [r7, #12]
 8102898:	f000 fa5e 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 810289c:	4603      	mov	r3, r0
 810289e:	2b00      	cmp	r3, #0
 81028a0:	d001      	beq.n	81028a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 81028a2:	2301      	movs	r3, #1
 81028a4:	e07c      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 81028a6:	68fb      	ldr	r3, [r7, #12]
 81028a8:	681b      	ldr	r3, [r3, #0]
 81028aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028b0:	b2d2      	uxtb	r2, r2
 81028b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81028b4:	68fb      	ldr	r3, [r7, #12]
 81028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81028b8:	1c5a      	adds	r2, r3, #1
 81028ba:	68fb      	ldr	r3, [r7, #12]
 81028bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 81028be:	68fb      	ldr	r3, [r7, #12]
 81028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028c2:	3b01      	subs	r3, #1
 81028c4:	b29a      	uxth	r2, r3
 81028c6:	68fb      	ldr	r3, [r7, #12]
 81028c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028ce:	b29b      	uxth	r3, r3
 81028d0:	3b01      	subs	r3, #1
 81028d2:	b29a      	uxth	r2, r3
 81028d4:	68fb      	ldr	r3, [r7, #12]
 81028d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 81028d8:	68fb      	ldr	r3, [r7, #12]
 81028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 81028dc:	b29b      	uxth	r3, r3
 81028de:	2b00      	cmp	r3, #0
 81028e0:	d034      	beq.n	810294c <HAL_I2C_Mem_Read+0x1d0>
 81028e2:	68fb      	ldr	r3, [r7, #12]
 81028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 81028e6:	2b00      	cmp	r3, #0
 81028e8:	d130      	bne.n	810294c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 81028ea:	697b      	ldr	r3, [r7, #20]
 81028ec:	9300      	str	r3, [sp, #0]
 81028ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81028f0:	2200      	movs	r2, #0
 81028f2:	2180      	movs	r1, #128	; 0x80
 81028f4:	68f8      	ldr	r0, [r7, #12]
 81028f6:	f000 fa2f 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 81028fa:	4603      	mov	r3, r0
 81028fc:	2b00      	cmp	r3, #0
 81028fe:	d001      	beq.n	8102904 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102900:	2301      	movs	r3, #1
 8102902:	e04d      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102904:	68fb      	ldr	r3, [r7, #12]
 8102906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102908:	b29b      	uxth	r3, r3
 810290a:	2bff      	cmp	r3, #255	; 0xff
 810290c:	d90e      	bls.n	810292c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 810290e:	68fb      	ldr	r3, [r7, #12]
 8102910:	22ff      	movs	r2, #255	; 0xff
 8102912:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102914:	68fb      	ldr	r3, [r7, #12]
 8102916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8102918:	b2da      	uxtb	r2, r3
 810291a:	8979      	ldrh	r1, [r7, #10]
 810291c:	2300      	movs	r3, #0
 810291e:	9300      	str	r3, [sp, #0]
 8102920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102924:	68f8      	ldr	r0, [r7, #12]
 8102926:	f000 fbd1 	bl	81030cc <I2C_TransferConfig>
 810292a:	e00f      	b.n	810294c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 810292c:	68fb      	ldr	r3, [r7, #12]
 810292e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102930:	b29a      	uxth	r2, r3
 8102932:	68fb      	ldr	r3, [r7, #12]
 8102934:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102936:	68fb      	ldr	r3, [r7, #12]
 8102938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 810293a:	b2da      	uxtb	r2, r3
 810293c:	8979      	ldrh	r1, [r7, #10]
 810293e:	2300      	movs	r3, #0
 8102940:	9300      	str	r3, [sp, #0]
 8102942:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8102946:	68f8      	ldr	r0, [r7, #12]
 8102948:	f000 fbc0 	bl	81030cc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 810294c:	68fb      	ldr	r3, [r7, #12]
 810294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8102950:	b29b      	uxth	r3, r3
 8102952:	2b00      	cmp	r3, #0
 8102954:	d19a      	bne.n	810288c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102956:	697a      	ldr	r2, [r7, #20]
 8102958:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810295a:	68f8      	ldr	r0, [r7, #12]
 810295c:	f000 fa92 	bl	8102e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102960:	4603      	mov	r3, r0
 8102962:	2b00      	cmp	r3, #0
 8102964:	d001      	beq.n	810296a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102966:	2301      	movs	r3, #1
 8102968:	e01a      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 810296a:	68fb      	ldr	r3, [r7, #12]
 810296c:	681b      	ldr	r3, [r3, #0]
 810296e:	2220      	movs	r2, #32
 8102970:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102972:	68fb      	ldr	r3, [r7, #12]
 8102974:	681b      	ldr	r3, [r3, #0]
 8102976:	6859      	ldr	r1, [r3, #4]
 8102978:	68fb      	ldr	r3, [r7, #12]
 810297a:	681a      	ldr	r2, [r3, #0]
 810297c:	4b0b      	ldr	r3, [pc, #44]	; (81029ac <HAL_I2C_Mem_Read+0x230>)
 810297e:	400b      	ands	r3, r1
 8102980:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102982:	68fb      	ldr	r3, [r7, #12]
 8102984:	2220      	movs	r2, #32
 8102986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 810298a:	68fb      	ldr	r3, [r7, #12]
 810298c:	2200      	movs	r2, #0
 810298e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102992:	68fb      	ldr	r3, [r7, #12]
 8102994:	2200      	movs	r2, #0
 8102996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810299a:	2300      	movs	r3, #0
 810299c:	e000      	b.n	81029a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 810299e:	2302      	movs	r3, #2
  }
}
 81029a0:	4618      	mov	r0, r3
 81029a2:	3718      	adds	r7, #24
 81029a4:	46bd      	mov	sp, r7
 81029a6:	bd80      	pop	{r7, pc}
 81029a8:	80002400 	.word	0x80002400
 81029ac:	fe00e800 	.word	0xfe00e800

081029b0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 81029b0:	b580      	push	{r7, lr}
 81029b2:	b08a      	sub	sp, #40	; 0x28
 81029b4:	af02      	add	r7, sp, #8
 81029b6:	60f8      	str	r0, [r7, #12]
 81029b8:	607a      	str	r2, [r7, #4]
 81029ba:	603b      	str	r3, [r7, #0]
 81029bc:	460b      	mov	r3, r1
 81029be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 81029c0:	2300      	movs	r3, #0
 81029c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81029ca:	b2db      	uxtb	r3, r3
 81029cc:	2b20      	cmp	r3, #32
 81029ce:	f040 80f1 	bne.w	8102bb4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	699b      	ldr	r3, [r3, #24]
 81029d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 81029dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81029e0:	d101      	bne.n	81029e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 81029e2:	2302      	movs	r3, #2
 81029e4:	e0e7      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 81029e6:	68fb      	ldr	r3, [r7, #12]
 81029e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81029ec:	2b01      	cmp	r3, #1
 81029ee:	d101      	bne.n	81029f4 <HAL_I2C_IsDeviceReady+0x44>
 81029f0:	2302      	movs	r3, #2
 81029f2:	e0e0      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
 81029f4:	68fb      	ldr	r3, [r7, #12]
 81029f6:	2201      	movs	r2, #1
 81029f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	2224      	movs	r2, #36	; 0x24
 8102a00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102a04:	68fb      	ldr	r3, [r7, #12]
 8102a06:	2200      	movs	r2, #0
 8102a08:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8102a0a:	68fb      	ldr	r3, [r7, #12]
 8102a0c:	68db      	ldr	r3, [r3, #12]
 8102a0e:	2b01      	cmp	r3, #1
 8102a10:	d107      	bne.n	8102a22 <HAL_I2C_IsDeviceReady+0x72>
 8102a12:	897b      	ldrh	r3, [r7, #10]
 8102a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102a18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102a1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8102a20:	e004      	b.n	8102a2c <HAL_I2C_IsDeviceReady+0x7c>
 8102a22:	897b      	ldrh	r3, [r7, #10]
 8102a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102a28:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8102a2c:	68fa      	ldr	r2, [r7, #12]
 8102a2e:	6812      	ldr	r2, [r2, #0]
 8102a30:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8102a32:	f7ff f9f3 	bl	8101e1c <HAL_GetTick>
 8102a36:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102a38:	68fb      	ldr	r3, [r7, #12]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	699b      	ldr	r3, [r3, #24]
 8102a3e:	f003 0320 	and.w	r3, r3, #32
 8102a42:	2b20      	cmp	r3, #32
 8102a44:	bf0c      	ite	eq
 8102a46:	2301      	moveq	r3, #1
 8102a48:	2300      	movne	r3, #0
 8102a4a:	b2db      	uxtb	r3, r3
 8102a4c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102a4e:	68fb      	ldr	r3, [r7, #12]
 8102a50:	681b      	ldr	r3, [r3, #0]
 8102a52:	699b      	ldr	r3, [r3, #24]
 8102a54:	f003 0310 	and.w	r3, r3, #16
 8102a58:	2b10      	cmp	r3, #16
 8102a5a:	bf0c      	ite	eq
 8102a5c:	2301      	moveq	r3, #1
 8102a5e:	2300      	movne	r3, #0
 8102a60:	b2db      	uxtb	r3, r3
 8102a62:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102a64:	e034      	b.n	8102ad0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102a66:	683b      	ldr	r3, [r7, #0]
 8102a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102a6c:	d01a      	beq.n	8102aa4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102a6e:	f7ff f9d5 	bl	8101e1c <HAL_GetTick>
 8102a72:	4602      	mov	r2, r0
 8102a74:	69bb      	ldr	r3, [r7, #24]
 8102a76:	1ad3      	subs	r3, r2, r3
 8102a78:	683a      	ldr	r2, [r7, #0]
 8102a7a:	429a      	cmp	r2, r3
 8102a7c:	d302      	bcc.n	8102a84 <HAL_I2C_IsDeviceReady+0xd4>
 8102a7e:	683b      	ldr	r3, [r7, #0]
 8102a80:	2b00      	cmp	r3, #0
 8102a82:	d10f      	bne.n	8102aa4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102a84:	68fb      	ldr	r3, [r7, #12]
 8102a86:	2220      	movs	r2, #32
 8102a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102a8c:	68fb      	ldr	r3, [r7, #12]
 8102a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102a90:	f043 0220 	orr.w	r2, r3, #32
 8102a94:	68fb      	ldr	r3, [r7, #12]
 8102a96:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102a98:	68fb      	ldr	r3, [r7, #12]
 8102a9a:	2200      	movs	r2, #0
 8102a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8102aa0:	2301      	movs	r3, #1
 8102aa2:	e088      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102aa4:	68fb      	ldr	r3, [r7, #12]
 8102aa6:	681b      	ldr	r3, [r3, #0]
 8102aa8:	699b      	ldr	r3, [r3, #24]
 8102aaa:	f003 0320 	and.w	r3, r3, #32
 8102aae:	2b20      	cmp	r3, #32
 8102ab0:	bf0c      	ite	eq
 8102ab2:	2301      	moveq	r3, #1
 8102ab4:	2300      	movne	r3, #0
 8102ab6:	b2db      	uxtb	r3, r3
 8102ab8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102aba:	68fb      	ldr	r3, [r7, #12]
 8102abc:	681b      	ldr	r3, [r3, #0]
 8102abe:	699b      	ldr	r3, [r3, #24]
 8102ac0:	f003 0310 	and.w	r3, r3, #16
 8102ac4:	2b10      	cmp	r3, #16
 8102ac6:	bf0c      	ite	eq
 8102ac8:	2301      	moveq	r3, #1
 8102aca:	2300      	movne	r3, #0
 8102acc:	b2db      	uxtb	r3, r3
 8102ace:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102ad0:	7ffb      	ldrb	r3, [r7, #31]
 8102ad2:	2b00      	cmp	r3, #0
 8102ad4:	d102      	bne.n	8102adc <HAL_I2C_IsDeviceReady+0x12c>
 8102ad6:	7fbb      	ldrb	r3, [r7, #30]
 8102ad8:	2b00      	cmp	r3, #0
 8102ada:	d0c4      	beq.n	8102a66 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	681b      	ldr	r3, [r3, #0]
 8102ae0:	699b      	ldr	r3, [r3, #24]
 8102ae2:	f003 0310 	and.w	r3, r3, #16
 8102ae6:	2b10      	cmp	r3, #16
 8102ae8:	d01a      	beq.n	8102b20 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102aea:	69bb      	ldr	r3, [r7, #24]
 8102aec:	9300      	str	r3, [sp, #0]
 8102aee:	683b      	ldr	r3, [r7, #0]
 8102af0:	2200      	movs	r2, #0
 8102af2:	2120      	movs	r1, #32
 8102af4:	68f8      	ldr	r0, [r7, #12]
 8102af6:	f000 f92f 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 8102afa:	4603      	mov	r3, r0
 8102afc:	2b00      	cmp	r3, #0
 8102afe:	d001      	beq.n	8102b04 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8102b00:	2301      	movs	r3, #1
 8102b02:	e058      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b04:	68fb      	ldr	r3, [r7, #12]
 8102b06:	681b      	ldr	r3, [r3, #0]
 8102b08:	2220      	movs	r2, #32
 8102b0a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8102b0c:	68fb      	ldr	r3, [r7, #12]
 8102b0e:	2220      	movs	r2, #32
 8102b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102b14:	68fb      	ldr	r3, [r7, #12]
 8102b16:	2200      	movs	r2, #0
 8102b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8102b1c:	2300      	movs	r3, #0
 8102b1e:	e04a      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102b20:	69bb      	ldr	r3, [r7, #24]
 8102b22:	9300      	str	r3, [sp, #0]
 8102b24:	683b      	ldr	r3, [r7, #0]
 8102b26:	2200      	movs	r2, #0
 8102b28:	2120      	movs	r1, #32
 8102b2a:	68f8      	ldr	r0, [r7, #12]
 8102b2c:	f000 f914 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 8102b30:	4603      	mov	r3, r0
 8102b32:	2b00      	cmp	r3, #0
 8102b34:	d001      	beq.n	8102b3a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8102b36:	2301      	movs	r3, #1
 8102b38:	e03d      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	2210      	movs	r2, #16
 8102b40:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b42:	68fb      	ldr	r3, [r7, #12]
 8102b44:	681b      	ldr	r3, [r3, #0]
 8102b46:	2220      	movs	r2, #32
 8102b48:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8102b4a:	697b      	ldr	r3, [r7, #20]
 8102b4c:	687a      	ldr	r2, [r7, #4]
 8102b4e:	429a      	cmp	r2, r3
 8102b50:	d118      	bne.n	8102b84 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102b52:	68fb      	ldr	r3, [r7, #12]
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	685a      	ldr	r2, [r3, #4]
 8102b58:	68fb      	ldr	r3, [r7, #12]
 8102b5a:	681b      	ldr	r3, [r3, #0]
 8102b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102b60:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102b62:	69bb      	ldr	r3, [r7, #24]
 8102b64:	9300      	str	r3, [sp, #0]
 8102b66:	683b      	ldr	r3, [r7, #0]
 8102b68:	2200      	movs	r2, #0
 8102b6a:	2120      	movs	r1, #32
 8102b6c:	68f8      	ldr	r0, [r7, #12]
 8102b6e:	f000 f8f3 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 8102b72:	4603      	mov	r3, r0
 8102b74:	2b00      	cmp	r3, #0
 8102b76:	d001      	beq.n	8102b7c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8102b78:	2301      	movs	r3, #1
 8102b7a:	e01c      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b7c:	68fb      	ldr	r3, [r7, #12]
 8102b7e:	681b      	ldr	r3, [r3, #0]
 8102b80:	2220      	movs	r2, #32
 8102b82:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102b84:	697b      	ldr	r3, [r7, #20]
 8102b86:	3301      	adds	r3, #1
 8102b88:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102b8a:	697b      	ldr	r3, [r7, #20]
 8102b8c:	687a      	ldr	r2, [r7, #4]
 8102b8e:	429a      	cmp	r2, r3
 8102b90:	f63f af3b 	bhi.w	8102a0a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102b94:	68fb      	ldr	r3, [r7, #12]
 8102b96:	2220      	movs	r2, #32
 8102b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102b9c:	68fb      	ldr	r3, [r7, #12]
 8102b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ba0:	f043 0220 	orr.w	r2, r3, #32
 8102ba4:	68fb      	ldr	r3, [r7, #12]
 8102ba6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102ba8:	68fb      	ldr	r3, [r7, #12]
 8102baa:	2200      	movs	r2, #0
 8102bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8102bb0:	2301      	movs	r3, #1
 8102bb2:	e000      	b.n	8102bb6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8102bb4:	2302      	movs	r3, #2
  }
}
 8102bb6:	4618      	mov	r0, r3
 8102bb8:	3720      	adds	r7, #32
 8102bba:	46bd      	mov	sp, r7
 8102bbc:	bd80      	pop	{r7, pc}
	...

08102bc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8102bc0:	b580      	push	{r7, lr}
 8102bc2:	b086      	sub	sp, #24
 8102bc4:	af02      	add	r7, sp, #8
 8102bc6:	60f8      	str	r0, [r7, #12]
 8102bc8:	4608      	mov	r0, r1
 8102bca:	4611      	mov	r1, r2
 8102bcc:	461a      	mov	r2, r3
 8102bce:	4603      	mov	r3, r0
 8102bd0:	817b      	strh	r3, [r7, #10]
 8102bd2:	460b      	mov	r3, r1
 8102bd4:	813b      	strh	r3, [r7, #8]
 8102bd6:	4613      	mov	r3, r2
 8102bd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8102bda:	88fb      	ldrh	r3, [r7, #6]
 8102bdc:	b2da      	uxtb	r2, r3
 8102bde:	8979      	ldrh	r1, [r7, #10]
 8102be0:	4b20      	ldr	r3, [pc, #128]	; (8102c64 <I2C_RequestMemoryWrite+0xa4>)
 8102be2:	9300      	str	r3, [sp, #0]
 8102be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8102be8:	68f8      	ldr	r0, [r7, #12]
 8102bea:	f000 fa6f 	bl	81030cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102bee:	69fa      	ldr	r2, [r7, #28]
 8102bf0:	69b9      	ldr	r1, [r7, #24]
 8102bf2:	68f8      	ldr	r0, [r7, #12]
 8102bf4:	f000 f8ff 	bl	8102df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8102bf8:	4603      	mov	r3, r0
 8102bfa:	2b00      	cmp	r3, #0
 8102bfc:	d001      	beq.n	8102c02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102bfe:	2301      	movs	r3, #1
 8102c00:	e02c      	b.n	8102c5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102c02:	88fb      	ldrh	r3, [r7, #6]
 8102c04:	2b01      	cmp	r3, #1
 8102c06:	d105      	bne.n	8102c14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102c08:	893b      	ldrh	r3, [r7, #8]
 8102c0a:	b2da      	uxtb	r2, r3
 8102c0c:	68fb      	ldr	r3, [r7, #12]
 8102c0e:	681b      	ldr	r3, [r3, #0]
 8102c10:	629a      	str	r2, [r3, #40]	; 0x28
 8102c12:	e015      	b.n	8102c40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102c14:	893b      	ldrh	r3, [r7, #8]
 8102c16:	0a1b      	lsrs	r3, r3, #8
 8102c18:	b29b      	uxth	r3, r3
 8102c1a:	b2da      	uxtb	r2, r3
 8102c1c:	68fb      	ldr	r3, [r7, #12]
 8102c1e:	681b      	ldr	r3, [r3, #0]
 8102c20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c22:	69fa      	ldr	r2, [r7, #28]
 8102c24:	69b9      	ldr	r1, [r7, #24]
 8102c26:	68f8      	ldr	r0, [r7, #12]
 8102c28:	f000 f8e5 	bl	8102df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8102c2c:	4603      	mov	r3, r0
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	d001      	beq.n	8102c36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102c32:	2301      	movs	r3, #1
 8102c34:	e012      	b.n	8102c5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102c36:	893b      	ldrh	r3, [r7, #8]
 8102c38:	b2da      	uxtb	r2, r3
 8102c3a:	68fb      	ldr	r3, [r7, #12]
 8102c3c:	681b      	ldr	r3, [r3, #0]
 8102c3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102c40:	69fb      	ldr	r3, [r7, #28]
 8102c42:	9300      	str	r3, [sp, #0]
 8102c44:	69bb      	ldr	r3, [r7, #24]
 8102c46:	2200      	movs	r2, #0
 8102c48:	2180      	movs	r1, #128	; 0x80
 8102c4a:	68f8      	ldr	r0, [r7, #12]
 8102c4c:	f000 f884 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 8102c50:	4603      	mov	r3, r0
 8102c52:	2b00      	cmp	r3, #0
 8102c54:	d001      	beq.n	8102c5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102c56:	2301      	movs	r3, #1
 8102c58:	e000      	b.n	8102c5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102c5a:	2300      	movs	r3, #0
}
 8102c5c:	4618      	mov	r0, r3
 8102c5e:	3710      	adds	r7, #16
 8102c60:	46bd      	mov	sp, r7
 8102c62:	bd80      	pop	{r7, pc}
 8102c64:	80002000 	.word	0x80002000

08102c68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102c68:	b580      	push	{r7, lr}
 8102c6a:	b086      	sub	sp, #24
 8102c6c:	af02      	add	r7, sp, #8
 8102c6e:	60f8      	str	r0, [r7, #12]
 8102c70:	4608      	mov	r0, r1
 8102c72:	4611      	mov	r1, r2
 8102c74:	461a      	mov	r2, r3
 8102c76:	4603      	mov	r3, r0
 8102c78:	817b      	strh	r3, [r7, #10]
 8102c7a:	460b      	mov	r3, r1
 8102c7c:	813b      	strh	r3, [r7, #8]
 8102c7e:	4613      	mov	r3, r2
 8102c80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102c82:	88fb      	ldrh	r3, [r7, #6]
 8102c84:	b2da      	uxtb	r2, r3
 8102c86:	8979      	ldrh	r1, [r7, #10]
 8102c88:	4b20      	ldr	r3, [pc, #128]	; (8102d0c <I2C_RequestMemoryRead+0xa4>)
 8102c8a:	9300      	str	r3, [sp, #0]
 8102c8c:	2300      	movs	r3, #0
 8102c8e:	68f8      	ldr	r0, [r7, #12]
 8102c90:	f000 fa1c 	bl	81030cc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102c94:	69fa      	ldr	r2, [r7, #28]
 8102c96:	69b9      	ldr	r1, [r7, #24]
 8102c98:	68f8      	ldr	r0, [r7, #12]
 8102c9a:	f000 f8ac 	bl	8102df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8102c9e:	4603      	mov	r3, r0
 8102ca0:	2b00      	cmp	r3, #0
 8102ca2:	d001      	beq.n	8102ca8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102ca4:	2301      	movs	r3, #1
 8102ca6:	e02c      	b.n	8102d02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102ca8:	88fb      	ldrh	r3, [r7, #6]
 8102caa:	2b01      	cmp	r3, #1
 8102cac:	d105      	bne.n	8102cba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102cae:	893b      	ldrh	r3, [r7, #8]
 8102cb0:	b2da      	uxtb	r2, r3
 8102cb2:	68fb      	ldr	r3, [r7, #12]
 8102cb4:	681b      	ldr	r3, [r3, #0]
 8102cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8102cb8:	e015      	b.n	8102ce6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102cba:	893b      	ldrh	r3, [r7, #8]
 8102cbc:	0a1b      	lsrs	r3, r3, #8
 8102cbe:	b29b      	uxth	r3, r3
 8102cc0:	b2da      	uxtb	r2, r3
 8102cc2:	68fb      	ldr	r3, [r7, #12]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102cc8:	69fa      	ldr	r2, [r7, #28]
 8102cca:	69b9      	ldr	r1, [r7, #24]
 8102ccc:	68f8      	ldr	r0, [r7, #12]
 8102cce:	f000 f892 	bl	8102df6 <I2C_WaitOnTXISFlagUntilTimeout>
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d001      	beq.n	8102cdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102cd8:	2301      	movs	r3, #1
 8102cda:	e012      	b.n	8102d02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102cdc:	893b      	ldrh	r3, [r7, #8]
 8102cde:	b2da      	uxtb	r2, r3
 8102ce0:	68fb      	ldr	r3, [r7, #12]
 8102ce2:	681b      	ldr	r3, [r3, #0]
 8102ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102ce6:	69fb      	ldr	r3, [r7, #28]
 8102ce8:	9300      	str	r3, [sp, #0]
 8102cea:	69bb      	ldr	r3, [r7, #24]
 8102cec:	2200      	movs	r2, #0
 8102cee:	2140      	movs	r1, #64	; 0x40
 8102cf0:	68f8      	ldr	r0, [r7, #12]
 8102cf2:	f000 f831 	bl	8102d58 <I2C_WaitOnFlagUntilTimeout>
 8102cf6:	4603      	mov	r3, r0
 8102cf8:	2b00      	cmp	r3, #0
 8102cfa:	d001      	beq.n	8102d00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102cfc:	2301      	movs	r3, #1
 8102cfe:	e000      	b.n	8102d02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102d00:	2300      	movs	r3, #0
}
 8102d02:	4618      	mov	r0, r3
 8102d04:	3710      	adds	r7, #16
 8102d06:	46bd      	mov	sp, r7
 8102d08:	bd80      	pop	{r7, pc}
 8102d0a:	bf00      	nop
 8102d0c:	80002000 	.word	0x80002000

08102d10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102d10:	b480      	push	{r7}
 8102d12:	b083      	sub	sp, #12
 8102d14:	af00      	add	r7, sp, #0
 8102d16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102d18:	687b      	ldr	r3, [r7, #4]
 8102d1a:	681b      	ldr	r3, [r3, #0]
 8102d1c:	699b      	ldr	r3, [r3, #24]
 8102d1e:	f003 0302 	and.w	r3, r3, #2
 8102d22:	2b02      	cmp	r3, #2
 8102d24:	d103      	bne.n	8102d2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102d26:	687b      	ldr	r3, [r7, #4]
 8102d28:	681b      	ldr	r3, [r3, #0]
 8102d2a:	2200      	movs	r2, #0
 8102d2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102d2e:	687b      	ldr	r3, [r7, #4]
 8102d30:	681b      	ldr	r3, [r3, #0]
 8102d32:	699b      	ldr	r3, [r3, #24]
 8102d34:	f003 0301 	and.w	r3, r3, #1
 8102d38:	2b01      	cmp	r3, #1
 8102d3a:	d007      	beq.n	8102d4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102d3c:	687b      	ldr	r3, [r7, #4]
 8102d3e:	681b      	ldr	r3, [r3, #0]
 8102d40:	699a      	ldr	r2, [r3, #24]
 8102d42:	687b      	ldr	r3, [r7, #4]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	f042 0201 	orr.w	r2, r2, #1
 8102d4a:	619a      	str	r2, [r3, #24]
  }
}
 8102d4c:	bf00      	nop
 8102d4e:	370c      	adds	r7, #12
 8102d50:	46bd      	mov	sp, r7
 8102d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d56:	4770      	bx	lr

08102d58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102d58:	b580      	push	{r7, lr}
 8102d5a:	b084      	sub	sp, #16
 8102d5c:	af00      	add	r7, sp, #0
 8102d5e:	60f8      	str	r0, [r7, #12]
 8102d60:	60b9      	str	r1, [r7, #8]
 8102d62:	603b      	str	r3, [r7, #0]
 8102d64:	4613      	mov	r3, r2
 8102d66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102d68:	e031      	b.n	8102dce <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102d6a:	683b      	ldr	r3, [r7, #0]
 8102d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102d70:	d02d      	beq.n	8102dce <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102d72:	f7ff f853 	bl	8101e1c <HAL_GetTick>
 8102d76:	4602      	mov	r2, r0
 8102d78:	69bb      	ldr	r3, [r7, #24]
 8102d7a:	1ad3      	subs	r3, r2, r3
 8102d7c:	683a      	ldr	r2, [r7, #0]
 8102d7e:	429a      	cmp	r2, r3
 8102d80:	d302      	bcc.n	8102d88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8102d82:	683b      	ldr	r3, [r7, #0]
 8102d84:	2b00      	cmp	r3, #0
 8102d86:	d122      	bne.n	8102dce <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8102d88:	68fb      	ldr	r3, [r7, #12]
 8102d8a:	681b      	ldr	r3, [r3, #0]
 8102d8c:	699a      	ldr	r2, [r3, #24]
 8102d8e:	68bb      	ldr	r3, [r7, #8]
 8102d90:	4013      	ands	r3, r2
 8102d92:	68ba      	ldr	r2, [r7, #8]
 8102d94:	429a      	cmp	r2, r3
 8102d96:	bf0c      	ite	eq
 8102d98:	2301      	moveq	r3, #1
 8102d9a:	2300      	movne	r3, #0
 8102d9c:	b2db      	uxtb	r3, r3
 8102d9e:	461a      	mov	r2, r3
 8102da0:	79fb      	ldrb	r3, [r7, #7]
 8102da2:	429a      	cmp	r2, r3
 8102da4:	d113      	bne.n	8102dce <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102da6:	68fb      	ldr	r3, [r7, #12]
 8102da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102daa:	f043 0220 	orr.w	r2, r3, #32
 8102dae:	68fb      	ldr	r3, [r7, #12]
 8102db0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102db2:	68fb      	ldr	r3, [r7, #12]
 8102db4:	2220      	movs	r2, #32
 8102db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102dba:	68fb      	ldr	r3, [r7, #12]
 8102dbc:	2200      	movs	r2, #0
 8102dbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102dc2:	68fb      	ldr	r3, [r7, #12]
 8102dc4:	2200      	movs	r2, #0
 8102dc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8102dca:	2301      	movs	r3, #1
 8102dcc:	e00f      	b.n	8102dee <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102dce:	68fb      	ldr	r3, [r7, #12]
 8102dd0:	681b      	ldr	r3, [r3, #0]
 8102dd2:	699a      	ldr	r2, [r3, #24]
 8102dd4:	68bb      	ldr	r3, [r7, #8]
 8102dd6:	4013      	ands	r3, r2
 8102dd8:	68ba      	ldr	r2, [r7, #8]
 8102dda:	429a      	cmp	r2, r3
 8102ddc:	bf0c      	ite	eq
 8102dde:	2301      	moveq	r3, #1
 8102de0:	2300      	movne	r3, #0
 8102de2:	b2db      	uxtb	r3, r3
 8102de4:	461a      	mov	r2, r3
 8102de6:	79fb      	ldrb	r3, [r7, #7]
 8102de8:	429a      	cmp	r2, r3
 8102dea:	d0be      	beq.n	8102d6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8102dec:	2300      	movs	r3, #0
}
 8102dee:	4618      	mov	r0, r3
 8102df0:	3710      	adds	r7, #16
 8102df2:	46bd      	mov	sp, r7
 8102df4:	bd80      	pop	{r7, pc}

08102df6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102df6:	b580      	push	{r7, lr}
 8102df8:	b084      	sub	sp, #16
 8102dfa:	af00      	add	r7, sp, #0
 8102dfc:	60f8      	str	r0, [r7, #12]
 8102dfe:	60b9      	str	r1, [r7, #8]
 8102e00:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102e02:	e033      	b.n	8102e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e04:	687a      	ldr	r2, [r7, #4]
 8102e06:	68b9      	ldr	r1, [r7, #8]
 8102e08:	68f8      	ldr	r0, [r7, #12]
 8102e0a:	f000 f87f 	bl	8102f0c <I2C_IsErrorOccurred>
 8102e0e:	4603      	mov	r3, r0
 8102e10:	2b00      	cmp	r3, #0
 8102e12:	d001      	beq.n	8102e18 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102e14:	2301      	movs	r3, #1
 8102e16:	e031      	b.n	8102e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102e18:	68bb      	ldr	r3, [r7, #8]
 8102e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102e1e:	d025      	beq.n	8102e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102e20:	f7fe fffc 	bl	8101e1c <HAL_GetTick>
 8102e24:	4602      	mov	r2, r0
 8102e26:	687b      	ldr	r3, [r7, #4]
 8102e28:	1ad3      	subs	r3, r2, r3
 8102e2a:	68ba      	ldr	r2, [r7, #8]
 8102e2c:	429a      	cmp	r2, r3
 8102e2e:	d302      	bcc.n	8102e36 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102e30:	68bb      	ldr	r3, [r7, #8]
 8102e32:	2b00      	cmp	r3, #0
 8102e34:	d11a      	bne.n	8102e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8102e36:	68fb      	ldr	r3, [r7, #12]
 8102e38:	681b      	ldr	r3, [r3, #0]
 8102e3a:	699b      	ldr	r3, [r3, #24]
 8102e3c:	f003 0302 	and.w	r3, r3, #2
 8102e40:	2b02      	cmp	r3, #2
 8102e42:	d013      	beq.n	8102e6c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102e44:	68fb      	ldr	r3, [r7, #12]
 8102e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102e48:	f043 0220 	orr.w	r2, r3, #32
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102e50:	68fb      	ldr	r3, [r7, #12]
 8102e52:	2220      	movs	r2, #32
 8102e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102e58:	68fb      	ldr	r3, [r7, #12]
 8102e5a:	2200      	movs	r2, #0
 8102e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	2200      	movs	r2, #0
 8102e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8102e68:	2301      	movs	r3, #1
 8102e6a:	e007      	b.n	8102e7c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102e6c:	68fb      	ldr	r3, [r7, #12]
 8102e6e:	681b      	ldr	r3, [r3, #0]
 8102e70:	699b      	ldr	r3, [r3, #24]
 8102e72:	f003 0302 	and.w	r3, r3, #2
 8102e76:	2b02      	cmp	r3, #2
 8102e78:	d1c4      	bne.n	8102e04 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8102e7a:	2300      	movs	r3, #0
}
 8102e7c:	4618      	mov	r0, r3
 8102e7e:	3710      	adds	r7, #16
 8102e80:	46bd      	mov	sp, r7
 8102e82:	bd80      	pop	{r7, pc}

08102e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102e84:	b580      	push	{r7, lr}
 8102e86:	b084      	sub	sp, #16
 8102e88:	af00      	add	r7, sp, #0
 8102e8a:	60f8      	str	r0, [r7, #12]
 8102e8c:	60b9      	str	r1, [r7, #8]
 8102e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102e90:	e02f      	b.n	8102ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e92:	687a      	ldr	r2, [r7, #4]
 8102e94:	68b9      	ldr	r1, [r7, #8]
 8102e96:	68f8      	ldr	r0, [r7, #12]
 8102e98:	f000 f838 	bl	8102f0c <I2C_IsErrorOccurred>
 8102e9c:	4603      	mov	r3, r0
 8102e9e:	2b00      	cmp	r3, #0
 8102ea0:	d001      	beq.n	8102ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102ea2:	2301      	movs	r3, #1
 8102ea4:	e02d      	b.n	8102f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102ea6:	f7fe ffb9 	bl	8101e1c <HAL_GetTick>
 8102eaa:	4602      	mov	r2, r0
 8102eac:	687b      	ldr	r3, [r7, #4]
 8102eae:	1ad3      	subs	r3, r2, r3
 8102eb0:	68ba      	ldr	r2, [r7, #8]
 8102eb2:	429a      	cmp	r2, r3
 8102eb4:	d302      	bcc.n	8102ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8102eb6:	68bb      	ldr	r3, [r7, #8]
 8102eb8:	2b00      	cmp	r3, #0
 8102eba:	d11a      	bne.n	8102ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8102ebc:	68fb      	ldr	r3, [r7, #12]
 8102ebe:	681b      	ldr	r3, [r3, #0]
 8102ec0:	699b      	ldr	r3, [r3, #24]
 8102ec2:	f003 0320 	and.w	r3, r3, #32
 8102ec6:	2b20      	cmp	r3, #32
 8102ec8:	d013      	beq.n	8102ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102eca:	68fb      	ldr	r3, [r7, #12]
 8102ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102ece:	f043 0220 	orr.w	r2, r3, #32
 8102ed2:	68fb      	ldr	r3, [r7, #12]
 8102ed4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8102ed6:	68fb      	ldr	r3, [r7, #12]
 8102ed8:	2220      	movs	r2, #32
 8102eda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8102ede:	68fb      	ldr	r3, [r7, #12]
 8102ee0:	2200      	movs	r2, #0
 8102ee2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102ee6:	68fb      	ldr	r3, [r7, #12]
 8102ee8:	2200      	movs	r2, #0
 8102eea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8102eee:	2301      	movs	r3, #1
 8102ef0:	e007      	b.n	8102f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102ef2:	68fb      	ldr	r3, [r7, #12]
 8102ef4:	681b      	ldr	r3, [r3, #0]
 8102ef6:	699b      	ldr	r3, [r3, #24]
 8102ef8:	f003 0320 	and.w	r3, r3, #32
 8102efc:	2b20      	cmp	r3, #32
 8102efe:	d1c8      	bne.n	8102e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8102f00:	2300      	movs	r3, #0
}
 8102f02:	4618      	mov	r0, r3
 8102f04:	3710      	adds	r7, #16
 8102f06:	46bd      	mov	sp, r7
 8102f08:	bd80      	pop	{r7, pc}
	...

08102f0c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8102f0c:	b580      	push	{r7, lr}
 8102f0e:	b08a      	sub	sp, #40	; 0x28
 8102f10:	af00      	add	r7, sp, #0
 8102f12:	60f8      	str	r0, [r7, #12]
 8102f14:	60b9      	str	r1, [r7, #8]
 8102f16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8102f18:	2300      	movs	r3, #0
 8102f1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8102f1e:	68fb      	ldr	r3, [r7, #12]
 8102f20:	681b      	ldr	r3, [r3, #0]
 8102f22:	699b      	ldr	r3, [r3, #24]
 8102f24:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8102f26:	2300      	movs	r3, #0
 8102f28:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8102f2a:	687b      	ldr	r3, [r7, #4]
 8102f2c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8102f2e:	69bb      	ldr	r3, [r7, #24]
 8102f30:	f003 0310 	and.w	r3, r3, #16
 8102f34:	2b00      	cmp	r3, #0
 8102f36:	d068      	beq.n	810300a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102f38:	68fb      	ldr	r3, [r7, #12]
 8102f3a:	681b      	ldr	r3, [r3, #0]
 8102f3c:	2210      	movs	r2, #16
 8102f3e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102f40:	e049      	b.n	8102fd6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8102f42:	68bb      	ldr	r3, [r7, #8]
 8102f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102f48:	d045      	beq.n	8102fd6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102f4a:	f7fe ff67 	bl	8101e1c <HAL_GetTick>
 8102f4e:	4602      	mov	r2, r0
 8102f50:	69fb      	ldr	r3, [r7, #28]
 8102f52:	1ad3      	subs	r3, r2, r3
 8102f54:	68ba      	ldr	r2, [r7, #8]
 8102f56:	429a      	cmp	r2, r3
 8102f58:	d302      	bcc.n	8102f60 <I2C_IsErrorOccurred+0x54>
 8102f5a:	68bb      	ldr	r3, [r7, #8]
 8102f5c:	2b00      	cmp	r3, #0
 8102f5e:	d13a      	bne.n	8102fd6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	681b      	ldr	r3, [r3, #0]
 8102f64:	685b      	ldr	r3, [r3, #4]
 8102f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8102f6a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8102f6c:	68fb      	ldr	r3, [r7, #12]
 8102f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8102f72:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	681b      	ldr	r3, [r3, #0]
 8102f78:	699b      	ldr	r3, [r3, #24]
 8102f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8102f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102f82:	d121      	bne.n	8102fc8 <I2C_IsErrorOccurred+0xbc>
 8102f84:	697b      	ldr	r3, [r7, #20]
 8102f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102f8a:	d01d      	beq.n	8102fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8102f8c:	7cfb      	ldrb	r3, [r7, #19]
 8102f8e:	2b20      	cmp	r3, #32
 8102f90:	d01a      	beq.n	8102fc8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	681b      	ldr	r3, [r3, #0]
 8102f96:	685a      	ldr	r2, [r3, #4]
 8102f98:	68fb      	ldr	r3, [r7, #12]
 8102f9a:	681b      	ldr	r3, [r3, #0]
 8102f9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8102fa0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8102fa2:	f7fe ff3b 	bl	8101e1c <HAL_GetTick>
 8102fa6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102fa8:	e00e      	b.n	8102fc8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8102faa:	f7fe ff37 	bl	8101e1c <HAL_GetTick>
 8102fae:	4602      	mov	r2, r0
 8102fb0:	69fb      	ldr	r3, [r7, #28]
 8102fb2:	1ad3      	subs	r3, r2, r3
 8102fb4:	2b19      	cmp	r3, #25
 8102fb6:	d907      	bls.n	8102fc8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8102fb8:	6a3b      	ldr	r3, [r7, #32]
 8102fba:	f043 0320 	orr.w	r3, r3, #32
 8102fbe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8102fc0:	2301      	movs	r3, #1
 8102fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8102fc6:	e006      	b.n	8102fd6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8102fc8:	68fb      	ldr	r3, [r7, #12]
 8102fca:	681b      	ldr	r3, [r3, #0]
 8102fcc:	699b      	ldr	r3, [r3, #24]
 8102fce:	f003 0320 	and.w	r3, r3, #32
 8102fd2:	2b20      	cmp	r3, #32
 8102fd4:	d1e9      	bne.n	8102faa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8102fd6:	68fb      	ldr	r3, [r7, #12]
 8102fd8:	681b      	ldr	r3, [r3, #0]
 8102fda:	699b      	ldr	r3, [r3, #24]
 8102fdc:	f003 0320 	and.w	r3, r3, #32
 8102fe0:	2b20      	cmp	r3, #32
 8102fe2:	d003      	beq.n	8102fec <I2C_IsErrorOccurred+0xe0>
 8102fe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102fe8:	2b00      	cmp	r3, #0
 8102fea:	d0aa      	beq.n	8102f42 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8102fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8102ff0:	2b00      	cmp	r3, #0
 8102ff2:	d103      	bne.n	8102ffc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102ff4:	68fb      	ldr	r3, [r7, #12]
 8102ff6:	681b      	ldr	r3, [r3, #0]
 8102ff8:	2220      	movs	r2, #32
 8102ffa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8102ffc:	6a3b      	ldr	r3, [r7, #32]
 8102ffe:	f043 0304 	orr.w	r3, r3, #4
 8103002:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8103004:	2301      	movs	r3, #1
 8103006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 810300a:	68fb      	ldr	r3, [r7, #12]
 810300c:	681b      	ldr	r3, [r3, #0]
 810300e:	699b      	ldr	r3, [r3, #24]
 8103010:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8103012:	69bb      	ldr	r3, [r7, #24]
 8103014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103018:	2b00      	cmp	r3, #0
 810301a:	d00b      	beq.n	8103034 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 810301c:	6a3b      	ldr	r3, [r7, #32]
 810301e:	f043 0301 	orr.w	r3, r3, #1
 8103022:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8103024:	68fb      	ldr	r3, [r7, #12]
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	f44f 7280 	mov.w	r2, #256	; 0x100
 810302c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 810302e:	2301      	movs	r3, #1
 8103030:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8103034:	69bb      	ldr	r3, [r7, #24]
 8103036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 810303a:	2b00      	cmp	r3, #0
 810303c:	d00b      	beq.n	8103056 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 810303e:	6a3b      	ldr	r3, [r7, #32]
 8103040:	f043 0308 	orr.w	r3, r3, #8
 8103044:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8103046:	68fb      	ldr	r3, [r7, #12]
 8103048:	681b      	ldr	r3, [r3, #0]
 810304a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 810304e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103050:	2301      	movs	r3, #1
 8103052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8103056:	69bb      	ldr	r3, [r7, #24]
 8103058:	f403 7300 	and.w	r3, r3, #512	; 0x200
 810305c:	2b00      	cmp	r3, #0
 810305e:	d00b      	beq.n	8103078 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103060:	6a3b      	ldr	r3, [r7, #32]
 8103062:	f043 0302 	orr.w	r3, r3, #2
 8103066:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8103068:	68fb      	ldr	r3, [r7, #12]
 810306a:	681b      	ldr	r3, [r3, #0]
 810306c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8103070:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103072:	2301      	movs	r3, #1
 8103074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8103078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 810307c:	2b00      	cmp	r3, #0
 810307e:	d01c      	beq.n	81030ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8103080:	68f8      	ldr	r0, [r7, #12]
 8103082:	f7ff fe45 	bl	8102d10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8103086:	68fb      	ldr	r3, [r7, #12]
 8103088:	681b      	ldr	r3, [r3, #0]
 810308a:	6859      	ldr	r1, [r3, #4]
 810308c:	68fb      	ldr	r3, [r7, #12]
 810308e:	681a      	ldr	r2, [r3, #0]
 8103090:	4b0d      	ldr	r3, [pc, #52]	; (81030c8 <I2C_IsErrorOccurred+0x1bc>)
 8103092:	400b      	ands	r3, r1
 8103094:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810309a:	6a3b      	ldr	r3, [r7, #32]
 810309c:	431a      	orrs	r2, r3
 810309e:	68fb      	ldr	r3, [r7, #12]
 81030a0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 81030a2:	68fb      	ldr	r3, [r7, #12]
 81030a4:	2220      	movs	r2, #32
 81030a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 81030aa:	68fb      	ldr	r3, [r7, #12]
 81030ac:	2200      	movs	r2, #0
 81030ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	2200      	movs	r2, #0
 81030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 81030ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 81030be:	4618      	mov	r0, r3
 81030c0:	3728      	adds	r7, #40	; 0x28
 81030c2:	46bd      	mov	sp, r7
 81030c4:	bd80      	pop	{r7, pc}
 81030c6:	bf00      	nop
 81030c8:	fe00e800 	.word	0xfe00e800

081030cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 81030cc:	b480      	push	{r7}
 81030ce:	b087      	sub	sp, #28
 81030d0:	af00      	add	r7, sp, #0
 81030d2:	60f8      	str	r0, [r7, #12]
 81030d4:	607b      	str	r3, [r7, #4]
 81030d6:	460b      	mov	r3, r1
 81030d8:	817b      	strh	r3, [r7, #10]
 81030da:	4613      	mov	r3, r2
 81030dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81030de:	897b      	ldrh	r3, [r7, #10]
 81030e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81030e4:	7a7b      	ldrb	r3, [r7, #9]
 81030e6:	041b      	lsls	r3, r3, #16
 81030e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81030ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 81030f2:	6a3b      	ldr	r3, [r7, #32]
 81030f4:	4313      	orrs	r3, r2
 81030f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 81030fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81030fc:	68fb      	ldr	r3, [r7, #12]
 81030fe:	681b      	ldr	r3, [r3, #0]
 8103100:	685a      	ldr	r2, [r3, #4]
 8103102:	6a3b      	ldr	r3, [r7, #32]
 8103104:	0d5b      	lsrs	r3, r3, #21
 8103106:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 810310a:	4b08      	ldr	r3, [pc, #32]	; (810312c <I2C_TransferConfig+0x60>)
 810310c:	430b      	orrs	r3, r1
 810310e:	43db      	mvns	r3, r3
 8103110:	ea02 0103 	and.w	r1, r2, r3
 8103114:	68fb      	ldr	r3, [r7, #12]
 8103116:	681b      	ldr	r3, [r3, #0]
 8103118:	697a      	ldr	r2, [r7, #20]
 810311a:	430a      	orrs	r2, r1
 810311c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 810311e:	bf00      	nop
 8103120:	371c      	adds	r7, #28
 8103122:	46bd      	mov	sp, r7
 8103124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103128:	4770      	bx	lr
 810312a:	bf00      	nop
 810312c:	03ff63ff 	.word	0x03ff63ff

08103130 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8103130:	b480      	push	{r7}
 8103132:	b083      	sub	sp, #12
 8103134:	af00      	add	r7, sp, #0
 8103136:	6078      	str	r0, [r7, #4]
 8103138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810313a:	687b      	ldr	r3, [r7, #4]
 810313c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8103140:	b2db      	uxtb	r3, r3
 8103142:	2b20      	cmp	r3, #32
 8103144:	d138      	bne.n	81031b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103146:	687b      	ldr	r3, [r7, #4]
 8103148:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810314c:	2b01      	cmp	r3, #1
 810314e:	d101      	bne.n	8103154 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8103150:	2302      	movs	r3, #2
 8103152:	e032      	b.n	81031ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	2201      	movs	r2, #1
 8103158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	2224      	movs	r2, #36	; 0x24
 8103160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103164:	687b      	ldr	r3, [r7, #4]
 8103166:	681b      	ldr	r3, [r3, #0]
 8103168:	681a      	ldr	r2, [r3, #0]
 810316a:	687b      	ldr	r3, [r7, #4]
 810316c:	681b      	ldr	r3, [r3, #0]
 810316e:	f022 0201 	bic.w	r2, r2, #1
 8103172:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	681b      	ldr	r3, [r3, #0]
 8103178:	681a      	ldr	r2, [r3, #0]
 810317a:	687b      	ldr	r3, [r7, #4]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8103182:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103184:	687b      	ldr	r3, [r7, #4]
 8103186:	681b      	ldr	r3, [r3, #0]
 8103188:	6819      	ldr	r1, [r3, #0]
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	683a      	ldr	r2, [r7, #0]
 8103190:	430a      	orrs	r2, r1
 8103192:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103194:	687b      	ldr	r3, [r7, #4]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	681a      	ldr	r2, [r3, #0]
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	f042 0201 	orr.w	r2, r2, #1
 81031a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81031a4:	687b      	ldr	r3, [r7, #4]
 81031a6:	2220      	movs	r2, #32
 81031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	2200      	movs	r2, #0
 81031b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 81031b4:	2300      	movs	r3, #0
 81031b6:	e000      	b.n	81031ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 81031b8:	2302      	movs	r3, #2
  }
}
 81031ba:	4618      	mov	r0, r3
 81031bc:	370c      	adds	r7, #12
 81031be:	46bd      	mov	sp, r7
 81031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81031c4:	4770      	bx	lr

081031c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 81031c6:	b480      	push	{r7}
 81031c8:	b085      	sub	sp, #20
 81031ca:	af00      	add	r7, sp, #0
 81031cc:	6078      	str	r0, [r7, #4]
 81031ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81031d0:	687b      	ldr	r3, [r7, #4]
 81031d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 81031d6:	b2db      	uxtb	r3, r3
 81031d8:	2b20      	cmp	r3, #32
 81031da:	d139      	bne.n	8103250 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 81031e2:	2b01      	cmp	r3, #1
 81031e4:	d101      	bne.n	81031ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 81031e6:	2302      	movs	r3, #2
 81031e8:	e033      	b.n	8103252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 81031ea:	687b      	ldr	r3, [r7, #4]
 81031ec:	2201      	movs	r2, #1
 81031ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	2224      	movs	r2, #36	; 0x24
 81031f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 81031fa:	687b      	ldr	r3, [r7, #4]
 81031fc:	681b      	ldr	r3, [r3, #0]
 81031fe:	681a      	ldr	r2, [r3, #0]
 8103200:	687b      	ldr	r3, [r7, #4]
 8103202:	681b      	ldr	r3, [r3, #0]
 8103204:	f022 0201 	bic.w	r2, r2, #1
 8103208:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8103212:	68fb      	ldr	r3, [r7, #12]
 8103214:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8103218:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 810321a:	683b      	ldr	r3, [r7, #0]
 810321c:	021b      	lsls	r3, r3, #8
 810321e:	68fa      	ldr	r2, [r7, #12]
 8103220:	4313      	orrs	r3, r2
 8103222:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	68fa      	ldr	r2, [r7, #12]
 810322a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 810322c:	687b      	ldr	r3, [r7, #4]
 810322e:	681b      	ldr	r3, [r3, #0]
 8103230:	681a      	ldr	r2, [r3, #0]
 8103232:	687b      	ldr	r3, [r7, #4]
 8103234:	681b      	ldr	r3, [r3, #0]
 8103236:	f042 0201 	orr.w	r2, r2, #1
 810323a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 810323c:	687b      	ldr	r3, [r7, #4]
 810323e:	2220      	movs	r2, #32
 8103240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103244:	687b      	ldr	r3, [r7, #4]
 8103246:	2200      	movs	r2, #0
 8103248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 810324c:	2300      	movs	r3, #0
 810324e:	e000      	b.n	8103252 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8103250:	2302      	movs	r3, #2
  }
}
 8103252:	4618      	mov	r0, r3
 8103254:	3714      	adds	r7, #20
 8103256:	46bd      	mov	sp, r7
 8103258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810325c:	4770      	bx	lr
	...

08103260 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103260:	b580      	push	{r7, lr}
 8103262:	b084      	sub	sp, #16
 8103264:	af00      	add	r7, sp, #0
 8103266:	60f8      	str	r0, [r7, #12]
 8103268:	460b      	mov	r3, r1
 810326a:	607a      	str	r2, [r7, #4]
 810326c:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810326e:	4b37      	ldr	r3, [pc, #220]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103270:	681b      	ldr	r3, [r3, #0]
 8103272:	f023 0201 	bic.w	r2, r3, #1
 8103276:	4935      	ldr	r1, [pc, #212]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103278:	68fb      	ldr	r3, [r7, #12]
 810327a:	4313      	orrs	r3, r2
 810327c:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810327e:	687b      	ldr	r3, [r7, #4]
 8103280:	2b00      	cmp	r3, #0
 8103282:	d123      	bne.n	81032cc <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103284:	f7fe fee6 	bl	8102054 <HAL_GetCurrentCPUID>
 8103288:	4603      	mov	r3, r0
 810328a:	2b03      	cmp	r3, #3
 810328c:	d158      	bne.n	8103340 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810328e:	4b2f      	ldr	r3, [pc, #188]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103290:	691b      	ldr	r3, [r3, #16]
 8103292:	4a2e      	ldr	r2, [pc, #184]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103294:	f023 0301 	bic.w	r3, r3, #1
 8103298:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810329a:	4b2d      	ldr	r3, [pc, #180]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810329c:	691b      	ldr	r3, [r3, #16]
 810329e:	4a2c      	ldr	r2, [pc, #176]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032a0:	f043 0304 	orr.w	r3, r3, #4
 81032a4:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81032a6:	f3bf 8f4f 	dsb	sy
}
 81032aa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81032ac:	f3bf 8f6f 	isb	sy
}
 81032b0:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81032b2:	7afb      	ldrb	r3, [r7, #11]
 81032b4:	2b01      	cmp	r3, #1
 81032b6:	d101      	bne.n	81032bc <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81032b8:	bf30      	wfi
 81032ba:	e000      	b.n	81032be <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81032bc:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032be:	4b24      	ldr	r3, [pc, #144]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032c0:	691b      	ldr	r3, [r3, #16]
 81032c2:	4a23      	ldr	r2, [pc, #140]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032c4:	f023 0304 	bic.w	r3, r3, #4
 81032c8:	6113      	str	r3, [r2, #16]
 81032ca:	e03c      	b.n	8103346 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81032cc:	687b      	ldr	r3, [r7, #4]
 81032ce:	2b01      	cmp	r3, #1
 81032d0:	d123      	bne.n	810331a <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81032d2:	f7fe febf 	bl	8102054 <HAL_GetCurrentCPUID>
 81032d6:	4603      	mov	r3, r0
 81032d8:	2b01      	cmp	r3, #1
 81032da:	d133      	bne.n	8103344 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81032dc:	4b1b      	ldr	r3, [pc, #108]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032de:	695b      	ldr	r3, [r3, #20]
 81032e0:	4a1a      	ldr	r2, [pc, #104]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 81032e2:	f023 0302 	bic.w	r3, r3, #2
 81032e6:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81032e8:	4b19      	ldr	r3, [pc, #100]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032ea:	691b      	ldr	r3, [r3, #16]
 81032ec:	4a18      	ldr	r2, [pc, #96]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81032ee:	f043 0304 	orr.w	r3, r3, #4
 81032f2:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81032f4:	f3bf 8f4f 	dsb	sy
}
 81032f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81032fa:	f3bf 8f6f 	isb	sy
}
 81032fe:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103300:	7afb      	ldrb	r3, [r7, #11]
 8103302:	2b01      	cmp	r3, #1
 8103304:	d101      	bne.n	810330a <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103306:	bf30      	wfi
 8103308:	e000      	b.n	810330c <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 810330a:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810330c:	4b10      	ldr	r3, [pc, #64]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810330e:	691b      	ldr	r3, [r3, #16]
 8103310:	4a0f      	ldr	r2, [pc, #60]	; (8103350 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103312:	f023 0304 	bic.w	r3, r3, #4
 8103316:	6113      	str	r3, [r2, #16]
 8103318:	e015      	b.n	8103346 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 810331a:	f7fe fe9b 	bl	8102054 <HAL_GetCurrentCPUID>
 810331e:	4603      	mov	r3, r0
 8103320:	2b03      	cmp	r3, #3
 8103322:	d106      	bne.n	8103332 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103324:	4b09      	ldr	r3, [pc, #36]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103326:	691b      	ldr	r3, [r3, #16]
 8103328:	4a08      	ldr	r2, [pc, #32]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 810332a:	f023 0304 	bic.w	r3, r3, #4
 810332e:	6113      	str	r3, [r2, #16]
 8103330:	e009      	b.n	8103346 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8103332:	4b06      	ldr	r3, [pc, #24]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103334:	695b      	ldr	r3, [r3, #20]
 8103336:	4a05      	ldr	r2, [pc, #20]	; (810334c <HAL_PWREx_EnterSTOPMode+0xec>)
 8103338:	f023 0304 	bic.w	r3, r3, #4
 810333c:	6153      	str	r3, [r2, #20]
 810333e:	e002      	b.n	8103346 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103340:	bf00      	nop
 8103342:	e000      	b.n	8103346 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103344:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103346:	3710      	adds	r7, #16
 8103348:	46bd      	mov	sp, r7
 810334a:	bd80      	pop	{r7, pc}
 810334c:	58024800 	.word	0x58024800
 8103350:	e000ed00 	.word	0xe000ed00

08103354 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103354:	b580      	push	{r7, lr}
 8103356:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103358:	f7fe fe7c 	bl	8102054 <HAL_GetCurrentCPUID>
 810335c:	4603      	mov	r3, r0
 810335e:	2b03      	cmp	r3, #3
 8103360:	d101      	bne.n	8103366 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103362:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103364:	e001      	b.n	810336a <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103366:	bf40      	sev
    __WFE ();
 8103368:	bf20      	wfe
}
 810336a:	bf00      	nop
 810336c:	bd80      	pop	{r7, pc}
	...

08103370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103370:	b480      	push	{r7}
 8103372:	b089      	sub	sp, #36	; 0x24
 8103374:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103376:	4bb3      	ldr	r3, [pc, #716]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103378:	691b      	ldr	r3, [r3, #16]
 810337a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810337e:	2b18      	cmp	r3, #24
 8103380:	f200 8155 	bhi.w	810362e <HAL_RCC_GetSysClockFreq+0x2be>
 8103384:	a201      	add	r2, pc, #4	; (adr r2, 810338c <HAL_RCC_GetSysClockFreq+0x1c>)
 8103386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810338a:	bf00      	nop
 810338c:	081033f1 	.word	0x081033f1
 8103390:	0810362f 	.word	0x0810362f
 8103394:	0810362f 	.word	0x0810362f
 8103398:	0810362f 	.word	0x0810362f
 810339c:	0810362f 	.word	0x0810362f
 81033a0:	0810362f 	.word	0x0810362f
 81033a4:	0810362f 	.word	0x0810362f
 81033a8:	0810362f 	.word	0x0810362f
 81033ac:	08103417 	.word	0x08103417
 81033b0:	0810362f 	.word	0x0810362f
 81033b4:	0810362f 	.word	0x0810362f
 81033b8:	0810362f 	.word	0x0810362f
 81033bc:	0810362f 	.word	0x0810362f
 81033c0:	0810362f 	.word	0x0810362f
 81033c4:	0810362f 	.word	0x0810362f
 81033c8:	0810362f 	.word	0x0810362f
 81033cc:	0810341d 	.word	0x0810341d
 81033d0:	0810362f 	.word	0x0810362f
 81033d4:	0810362f 	.word	0x0810362f
 81033d8:	0810362f 	.word	0x0810362f
 81033dc:	0810362f 	.word	0x0810362f
 81033e0:	0810362f 	.word	0x0810362f
 81033e4:	0810362f 	.word	0x0810362f
 81033e8:	0810362f 	.word	0x0810362f
 81033ec:	08103423 	.word	0x08103423
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81033f0:	4b94      	ldr	r3, [pc, #592]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033f2:	681b      	ldr	r3, [r3, #0]
 81033f4:	f003 0320 	and.w	r3, r3, #32
 81033f8:	2b00      	cmp	r3, #0
 81033fa:	d009      	beq.n	8103410 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81033fc:	4b91      	ldr	r3, [pc, #580]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81033fe:	681b      	ldr	r3, [r3, #0]
 8103400:	08db      	lsrs	r3, r3, #3
 8103402:	f003 0303 	and.w	r3, r3, #3
 8103406:	4a90      	ldr	r2, [pc, #576]	; (8103648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103408:	fa22 f303 	lsr.w	r3, r2, r3
 810340c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810340e:	e111      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103410:	4b8d      	ldr	r3, [pc, #564]	; (8103648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103412:	61bb      	str	r3, [r7, #24]
      break;
 8103414:	e10e      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8103416:	4b8d      	ldr	r3, [pc, #564]	; (810364c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103418:	61bb      	str	r3, [r7, #24]
      break;
 810341a:	e10b      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 810341c:	4b8c      	ldr	r3, [pc, #560]	; (8103650 <HAL_RCC_GetSysClockFreq+0x2e0>)
 810341e:	61bb      	str	r3, [r7, #24]
      break;
 8103420:	e108      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103422:	4b88      	ldr	r3, [pc, #544]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103426:	f003 0303 	and.w	r3, r3, #3
 810342a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 810342c:	4b85      	ldr	r3, [pc, #532]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810342e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103430:	091b      	lsrs	r3, r3, #4
 8103432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103436:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103438:	4b82      	ldr	r3, [pc, #520]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810343c:	f003 0301 	and.w	r3, r3, #1
 8103440:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8103442:	4b80      	ldr	r3, [pc, #512]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103446:	08db      	lsrs	r3, r3, #3
 8103448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810344c:	68fa      	ldr	r2, [r7, #12]
 810344e:	fb02 f303 	mul.w	r3, r2, r3
 8103452:	ee07 3a90 	vmov	s15, r3
 8103456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810345a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810345e:	693b      	ldr	r3, [r7, #16]
 8103460:	2b00      	cmp	r3, #0
 8103462:	f000 80e1 	beq.w	8103628 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103466:	697b      	ldr	r3, [r7, #20]
 8103468:	2b02      	cmp	r3, #2
 810346a:	f000 8083 	beq.w	8103574 <HAL_RCC_GetSysClockFreq+0x204>
 810346e:	697b      	ldr	r3, [r7, #20]
 8103470:	2b02      	cmp	r3, #2
 8103472:	f200 80a1 	bhi.w	81035b8 <HAL_RCC_GetSysClockFreq+0x248>
 8103476:	697b      	ldr	r3, [r7, #20]
 8103478:	2b00      	cmp	r3, #0
 810347a:	d003      	beq.n	8103484 <HAL_RCC_GetSysClockFreq+0x114>
 810347c:	697b      	ldr	r3, [r7, #20]
 810347e:	2b01      	cmp	r3, #1
 8103480:	d056      	beq.n	8103530 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103482:	e099      	b.n	81035b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103484:	4b6f      	ldr	r3, [pc, #444]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103486:	681b      	ldr	r3, [r3, #0]
 8103488:	f003 0320 	and.w	r3, r3, #32
 810348c:	2b00      	cmp	r3, #0
 810348e:	d02d      	beq.n	81034ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103490:	4b6c      	ldr	r3, [pc, #432]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103492:	681b      	ldr	r3, [r3, #0]
 8103494:	08db      	lsrs	r3, r3, #3
 8103496:	f003 0303 	and.w	r3, r3, #3
 810349a:	4a6b      	ldr	r2, [pc, #428]	; (8103648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810349c:	fa22 f303 	lsr.w	r3, r2, r3
 81034a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034a2:	687b      	ldr	r3, [r7, #4]
 81034a4:	ee07 3a90 	vmov	s15, r3
 81034a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ac:	693b      	ldr	r3, [r7, #16]
 81034ae:	ee07 3a90 	vmov	s15, r3
 81034b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034ba:	4b62      	ldr	r3, [pc, #392]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81034be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81034c2:	ee07 3a90 	vmov	s15, r3
 81034c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81034ca:	ed97 6a02 	vldr	s12, [r7, #8]
 81034ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103654 <HAL_RCC_GetSysClockFreq+0x2e4>
 81034d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81034d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81034da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81034de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81034e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81034e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81034ea:	e087      	b.n	81035fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81034ec:	693b      	ldr	r3, [r7, #16]
 81034ee:	ee07 3a90 	vmov	s15, r3
 81034f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81034f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103658 <HAL_RCC_GetSysClockFreq+0x2e8>
 81034fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81034fe:	4b51      	ldr	r3, [pc, #324]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103506:	ee07 3a90 	vmov	s15, r3
 810350a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810350e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103512:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103654 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810351a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810351e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103526:	ee67 7a27 	vmul.f32	s15, s14, s15
 810352a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810352e:	e065      	b.n	81035fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103530:	693b      	ldr	r3, [r7, #16]
 8103532:	ee07 3a90 	vmov	s15, r3
 8103536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810353a:	eddf 6a48 	vldr	s13, [pc, #288]	; 810365c <HAL_RCC_GetSysClockFreq+0x2ec>
 810353e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103542:	4b40      	ldr	r3, [pc, #256]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810354a:	ee07 3a90 	vmov	s15, r3
 810354e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103552:	ed97 6a02 	vldr	s12, [r7, #8]
 8103556:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103654 <HAL_RCC_GetSysClockFreq+0x2e4>
 810355a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810355e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810356a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810356e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103572:	e043      	b.n	81035fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103574:	693b      	ldr	r3, [r7, #16]
 8103576:	ee07 3a90 	vmov	s15, r3
 810357a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810357e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103660 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103586:	4b2f      	ldr	r3, [pc, #188]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810358e:	ee07 3a90 	vmov	s15, r3
 8103592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103596:	ed97 6a02 	vldr	s12, [r7, #8]
 810359a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103654 <HAL_RCC_GetSysClockFreq+0x2e4>
 810359e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035b6:	e021      	b.n	81035fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81035b8:	693b      	ldr	r3, [r7, #16]
 81035ba:	ee07 3a90 	vmov	s15, r3
 81035be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 810365c <HAL_RCC_GetSysClockFreq+0x2ec>
 81035c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81035ca:	4b1e      	ldr	r3, [pc, #120]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81035ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81035d2:	ee07 3a90 	vmov	s15, r3
 81035d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81035da:	ed97 6a02 	vldr	s12, [r7, #8]
 81035de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103654 <HAL_RCC_GetSysClockFreq+0x2e4>
 81035e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81035e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81035ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81035ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81035f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81035f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81035fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81035fc:	4b11      	ldr	r3, [pc, #68]	; (8103644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103600:	0a5b      	lsrs	r3, r3, #9
 8103602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103606:	3301      	adds	r3, #1
 8103608:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810360a:	683b      	ldr	r3, [r7, #0]
 810360c:	ee07 3a90 	vmov	s15, r3
 8103610:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103614:	edd7 6a07 	vldr	s13, [r7, #28]
 8103618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810361c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103620:	ee17 3a90 	vmov	r3, s15
 8103624:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8103626:	e005      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8103628:	2300      	movs	r3, #0
 810362a:	61bb      	str	r3, [r7, #24]
      break;
 810362c:	e002      	b.n	8103634 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810362e:	4b07      	ldr	r3, [pc, #28]	; (810364c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103630:	61bb      	str	r3, [r7, #24]
      break;
 8103632:	bf00      	nop
  }

  return sysclockfreq;
 8103634:	69bb      	ldr	r3, [r7, #24]
}
 8103636:	4618      	mov	r0, r3
 8103638:	3724      	adds	r7, #36	; 0x24
 810363a:	46bd      	mov	sp, r7
 810363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103640:	4770      	bx	lr
 8103642:	bf00      	nop
 8103644:	58024400 	.word	0x58024400
 8103648:	03d09000 	.word	0x03d09000
 810364c:	003d0900 	.word	0x003d0900
 8103650:	007a1200 	.word	0x007a1200
 8103654:	46000000 	.word	0x46000000
 8103658:	4c742400 	.word	0x4c742400
 810365c:	4a742400 	.word	0x4a742400
 8103660:	4af42400 	.word	0x4af42400

08103664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103664:	b580      	push	{r7, lr}
 8103666:	b082      	sub	sp, #8
 8103668:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810366a:	f7ff fe81 	bl	8103370 <HAL_RCC_GetSysClockFreq>
 810366e:	4602      	mov	r2, r0
 8103670:	4b11      	ldr	r3, [pc, #68]	; (81036b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8103672:	699b      	ldr	r3, [r3, #24]
 8103674:	0a1b      	lsrs	r3, r3, #8
 8103676:	f003 030f 	and.w	r3, r3, #15
 810367a:	4910      	ldr	r1, [pc, #64]	; (81036bc <HAL_RCC_GetHCLKFreq+0x58>)
 810367c:	5ccb      	ldrb	r3, [r1, r3]
 810367e:	f003 031f 	and.w	r3, r3, #31
 8103682:	fa22 f303 	lsr.w	r3, r2, r3
 8103686:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103688:	4b0b      	ldr	r3, [pc, #44]	; (81036b8 <HAL_RCC_GetHCLKFreq+0x54>)
 810368a:	699b      	ldr	r3, [r3, #24]
 810368c:	f003 030f 	and.w	r3, r3, #15
 8103690:	4a0a      	ldr	r2, [pc, #40]	; (81036bc <HAL_RCC_GetHCLKFreq+0x58>)
 8103692:	5cd3      	ldrb	r3, [r2, r3]
 8103694:	f003 031f 	and.w	r3, r3, #31
 8103698:	687a      	ldr	r2, [r7, #4]
 810369a:	fa22 f303 	lsr.w	r3, r2, r3
 810369e:	4a08      	ldr	r2, [pc, #32]	; (81036c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036a0:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81036a2:	4b07      	ldr	r3, [pc, #28]	; (81036c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036a4:	681b      	ldr	r3, [r3, #0]
 81036a6:	4a07      	ldr	r2, [pc, #28]	; (81036c4 <HAL_RCC_GetHCLKFreq+0x60>)
 81036a8:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81036aa:	4b05      	ldr	r3, [pc, #20]	; (81036c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 81036ac:	681b      	ldr	r3, [r3, #0]
}
 81036ae:	4618      	mov	r0, r3
 81036b0:	3708      	adds	r7, #8
 81036b2:	46bd      	mov	sp, r7
 81036b4:	bd80      	pop	{r7, pc}
 81036b6:	bf00      	nop
 81036b8:	58024400 	.word	0x58024400
 81036bc:	0810af8c 	.word	0x0810af8c
 81036c0:	10000004 	.word	0x10000004
 81036c4:	10000000 	.word	0x10000000

081036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81036c8:	b580      	push	{r7, lr}
 81036ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81036cc:	f7ff ffca 	bl	8103664 <HAL_RCC_GetHCLKFreq>
 81036d0:	4602      	mov	r2, r0
 81036d2:	4b06      	ldr	r3, [pc, #24]	; (81036ec <HAL_RCC_GetPCLK1Freq+0x24>)
 81036d4:	69db      	ldr	r3, [r3, #28]
 81036d6:	091b      	lsrs	r3, r3, #4
 81036d8:	f003 0307 	and.w	r3, r3, #7
 81036dc:	4904      	ldr	r1, [pc, #16]	; (81036f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 81036de:	5ccb      	ldrb	r3, [r1, r3]
 81036e0:	f003 031f 	and.w	r3, r3, #31
 81036e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 81036e8:	4618      	mov	r0, r3
 81036ea:	bd80      	pop	{r7, pc}
 81036ec:	58024400 	.word	0x58024400
 81036f0:	0810af8c 	.word	0x0810af8c

081036f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 81036f4:	b580      	push	{r7, lr}
 81036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 81036f8:	f7ff ffb4 	bl	8103664 <HAL_RCC_GetHCLKFreq>
 81036fc:	4602      	mov	r2, r0
 81036fe:	4b06      	ldr	r3, [pc, #24]	; (8103718 <HAL_RCC_GetPCLK2Freq+0x24>)
 8103700:	69db      	ldr	r3, [r3, #28]
 8103702:	0a1b      	lsrs	r3, r3, #8
 8103704:	f003 0307 	and.w	r3, r3, #7
 8103708:	4904      	ldr	r1, [pc, #16]	; (810371c <HAL_RCC_GetPCLK2Freq+0x28>)
 810370a:	5ccb      	ldrb	r3, [r1, r3]
 810370c:	f003 031f 	and.w	r3, r3, #31
 8103710:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8103714:	4618      	mov	r0, r3
 8103716:	bd80      	pop	{r7, pc}
 8103718:	58024400 	.word	0x58024400
 810371c:	0810af8c 	.word	0x0810af8c

08103720 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103724:	b0ca      	sub	sp, #296	; 0x128
 8103726:	af00      	add	r7, sp, #0
 8103728:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 810372c:	2300      	movs	r3, #0
 810372e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103732:	2300      	movs	r3, #0
 8103734:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103740:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8103744:	2500      	movs	r5, #0
 8103746:	ea54 0305 	orrs.w	r3, r4, r5
 810374a:	d049      	beq.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 810374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103750:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8103752:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103756:	d02f      	beq.n	81037b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810375c:	d828      	bhi.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810375e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103762:	d01a      	beq.n	810379a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8103764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103768:	d822      	bhi.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810376a:	2b00      	cmp	r3, #0
 810376c:	d003      	beq.n	8103776 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103772:	d007      	beq.n	8103784 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103774:	e01c      	b.n	81037b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103776:	4bb8      	ldr	r3, [pc, #736]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810377a:	4ab7      	ldr	r2, [pc, #732]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103780:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103782:	e01a      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103788:	3308      	adds	r3, #8
 810378a:	2102      	movs	r1, #2
 810378c:	4618      	mov	r0, r3
 810378e:	f001 fc8f 	bl	81050b0 <RCCEx_PLL2_Config>
 8103792:	4603      	mov	r3, r0
 8103794:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103798:	e00f      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810379a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810379e:	3328      	adds	r3, #40	; 0x28
 81037a0:	2102      	movs	r1, #2
 81037a2:	4618      	mov	r0, r3
 81037a4:	f001 fd36 	bl	8105214 <RCCEx_PLL3_Config>
 81037a8:	4603      	mov	r3, r0
 81037aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81037ae:	e004      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81037b0:	2301      	movs	r3, #1
 81037b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81037b6:	e000      	b.n	81037ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81037b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81037ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81037be:	2b00      	cmp	r3, #0
 81037c0:	d10a      	bne.n	81037d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81037c2:	4ba5      	ldr	r3, [pc, #660]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81037c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81037ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81037ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 81037d0:	4aa1      	ldr	r2, [pc, #644]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81037d2:	430b      	orrs	r3, r1
 81037d4:	6513      	str	r3, [r2, #80]	; 0x50
 81037d6:	e003      	b.n	81037e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81037dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81037e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 81037ec:	f04f 0900 	mov.w	r9, #0
 81037f0:	ea58 0309 	orrs.w	r3, r8, r9
 81037f4:	d047      	beq.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81037f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81037fc:	2b04      	cmp	r3, #4
 81037fe:	d82a      	bhi.n	8103856 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8103800:	a201      	add	r2, pc, #4	; (adr r2, 8103808 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8103802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103806:	bf00      	nop
 8103808:	0810381d 	.word	0x0810381d
 810380c:	0810382b 	.word	0x0810382b
 8103810:	08103841 	.word	0x08103841
 8103814:	0810385f 	.word	0x0810385f
 8103818:	0810385f 	.word	0x0810385f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810381c:	4b8e      	ldr	r3, [pc, #568]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103820:	4a8d      	ldr	r2, [pc, #564]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103826:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103828:	e01a      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810382e:	3308      	adds	r3, #8
 8103830:	2100      	movs	r1, #0
 8103832:	4618      	mov	r0, r3
 8103834:	f001 fc3c 	bl	81050b0 <RCCEx_PLL2_Config>
 8103838:	4603      	mov	r3, r0
 810383a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810383e:	e00f      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103844:	3328      	adds	r3, #40	; 0x28
 8103846:	2100      	movs	r1, #0
 8103848:	4618      	mov	r0, r3
 810384a:	f001 fce3 	bl	8105214 <RCCEx_PLL3_Config>
 810384e:	4603      	mov	r3, r0
 8103850:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103854:	e004      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103856:	2301      	movs	r3, #1
 8103858:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810385c:	e000      	b.n	8103860 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103864:	2b00      	cmp	r3, #0
 8103866:	d10a      	bne.n	810387e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103868:	4b7b      	ldr	r3, [pc, #492]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810386a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810386c:	f023 0107 	bic.w	r1, r3, #7
 8103870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103876:	4a78      	ldr	r2, [pc, #480]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103878:	430b      	orrs	r3, r1
 810387a:	6513      	str	r3, [r2, #80]	; 0x50
 810387c:	e003      	b.n	8103886 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810387e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103882:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810388e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8103892:	f04f 0b00 	mov.w	fp, #0
 8103896:	ea5a 030b 	orrs.w	r3, sl, fp
 810389a:	d04c      	beq.n	8103936 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81038a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038a6:	d030      	beq.n	810390a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81038a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81038ac:	d829      	bhi.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038ae:	2bc0      	cmp	r3, #192	; 0xc0
 81038b0:	d02d      	beq.n	810390e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81038b2:	2bc0      	cmp	r3, #192	; 0xc0
 81038b4:	d825      	bhi.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038b6:	2b80      	cmp	r3, #128	; 0x80
 81038b8:	d018      	beq.n	81038ec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81038ba:	2b80      	cmp	r3, #128	; 0x80
 81038bc:	d821      	bhi.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81038be:	2b00      	cmp	r3, #0
 81038c0:	d002      	beq.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81038c2:	2b40      	cmp	r3, #64	; 0x40
 81038c4:	d007      	beq.n	81038d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81038c6:	e01c      	b.n	8103902 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81038c8:	4b63      	ldr	r3, [pc, #396]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81038cc:	4a62      	ldr	r2, [pc, #392]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81038d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81038d4:	e01c      	b.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038da:	3308      	adds	r3, #8
 81038dc:	2100      	movs	r1, #0
 81038de:	4618      	mov	r0, r3
 81038e0:	f001 fbe6 	bl	81050b0 <RCCEx_PLL2_Config>
 81038e4:	4603      	mov	r3, r0
 81038e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81038ea:	e011      	b.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81038f0:	3328      	adds	r3, #40	; 0x28
 81038f2:	2100      	movs	r1, #0
 81038f4:	4618      	mov	r0, r3
 81038f6:	f001 fc8d 	bl	8105214 <RCCEx_PLL3_Config>
 81038fa:	4603      	mov	r3, r0
 81038fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8103900:	e006      	b.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103902:	2301      	movs	r3, #1
 8103904:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103908:	e002      	b.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810390a:	bf00      	nop
 810390c:	e000      	b.n	8103910 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810390e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103914:	2b00      	cmp	r3, #0
 8103916:	d10a      	bne.n	810392e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103918:	4b4f      	ldr	r3, [pc, #316]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810391a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810391c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8103920:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8103926:	4a4c      	ldr	r2, [pc, #304]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103928:	430b      	orrs	r3, r1
 810392a:	6513      	str	r3, [r2, #80]	; 0x50
 810392c:	e003      	b.n	8103936 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810392e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103932:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810393e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8103942:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8103946:	2300      	movs	r3, #0
 8103948:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 810394c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8103950:	460b      	mov	r3, r1
 8103952:	4313      	orrs	r3, r2
 8103954:	d053      	beq.n	81039fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810395a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 810395e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103962:	d035      	beq.n	81039d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103968:	d82e      	bhi.n	81039c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810396a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 810396e:	d031      	beq.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103970:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103974:	d828      	bhi.n	81039c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103976:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 810397a:	d01a      	beq.n	81039b2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 810397c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103980:	d822      	bhi.n	81039c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103982:	2b00      	cmp	r3, #0
 8103984:	d003      	beq.n	810398e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810398a:	d007      	beq.n	810399c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810398c:	e01c      	b.n	81039c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810398e:	4b32      	ldr	r3, [pc, #200]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103992:	4a31      	ldr	r2, [pc, #196]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103998:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810399a:	e01c      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039a0:	3308      	adds	r3, #8
 81039a2:	2100      	movs	r1, #0
 81039a4:	4618      	mov	r0, r3
 81039a6:	f001 fb83 	bl	81050b0 <RCCEx_PLL2_Config>
 81039aa:	4603      	mov	r3, r0
 81039ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81039b0:	e011      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039b6:	3328      	adds	r3, #40	; 0x28
 81039b8:	2100      	movs	r1, #0
 81039ba:	4618      	mov	r0, r3
 81039bc:	f001 fc2a 	bl	8105214 <RCCEx_PLL3_Config>
 81039c0:	4603      	mov	r3, r0
 81039c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81039c6:	e006      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81039c8:	2301      	movs	r3, #1
 81039ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81039ce:	e002      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81039d0:	bf00      	nop
 81039d2:	e000      	b.n	81039d6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81039d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81039da:	2b00      	cmp	r3, #0
 81039dc:	d10b      	bne.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 81039de:	4b1e      	ldr	r3, [pc, #120]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81039e2:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 81039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81039ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 81039ee:	4a1a      	ldr	r2, [pc, #104]	; (8103a58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039f0:	430b      	orrs	r3, r1
 81039f2:	6593      	str	r3, [r2, #88]	; 0x58
 81039f4:	e003      	b.n	81039fe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81039f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81039fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 81039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a06:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8103a0a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8103a0e:	2300      	movs	r3, #0
 8103a10:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8103a14:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8103a18:	460b      	mov	r3, r1
 8103a1a:	4313      	orrs	r3, r2
 8103a1c:	d056      	beq.n	8103acc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a22:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103a26:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103a2a:	d038      	beq.n	8103a9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103a2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103a30:	d831      	bhi.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103a36:	d034      	beq.n	8103aa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103a38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103a3c:	d82b      	bhi.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103a42:	d01d      	beq.n	8103a80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103a44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103a48:	d825      	bhi.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a4a:	2b00      	cmp	r3, #0
 8103a4c:	d006      	beq.n	8103a5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103a4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103a52:	d00a      	beq.n	8103a6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103a54:	e01f      	b.n	8103a96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103a56:	bf00      	nop
 8103a58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a5c:	4ba2      	ldr	r3, [pc, #648]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a60:	4aa1      	ldr	r2, [pc, #644]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a68:	e01c      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a6e:	3308      	adds	r3, #8
 8103a70:	2100      	movs	r1, #0
 8103a72:	4618      	mov	r0, r3
 8103a74:	f001 fb1c 	bl	81050b0 <RCCEx_PLL2_Config>
 8103a78:	4603      	mov	r3, r0
 8103a7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103a7e:	e011      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103a84:	3328      	adds	r3, #40	; 0x28
 8103a86:	2100      	movs	r1, #0
 8103a88:	4618      	mov	r0, r3
 8103a8a:	f001 fbc3 	bl	8105214 <RCCEx_PLL3_Config>
 8103a8e:	4603      	mov	r3, r0
 8103a90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a94:	e006      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103a96:	2301      	movs	r3, #1
 8103a98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103a9c:	e002      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103a9e:	bf00      	nop
 8103aa0:	e000      	b.n	8103aa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103aa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103aa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103aa8:	2b00      	cmp	r3, #0
 8103aaa:	d10b      	bne.n	8103ac4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103aac:	4b8e      	ldr	r3, [pc, #568]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103ab0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8103ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ab8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8103abc:	4a8a      	ldr	r2, [pc, #552]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103abe:	430b      	orrs	r3, r1
 8103ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8103ac2:	e003      	b.n	8103acc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ac4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ac8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103acc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103ad4:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8103ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8103adc:	2300      	movs	r3, #0
 8103ade:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8103ae2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8103ae6:	460b      	mov	r3, r1
 8103ae8:	4313      	orrs	r3, r2
 8103aea:	d03a      	beq.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103af2:	2b30      	cmp	r3, #48	; 0x30
 8103af4:	d01f      	beq.n	8103b36 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103af6:	2b30      	cmp	r3, #48	; 0x30
 8103af8:	d819      	bhi.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103afa:	2b20      	cmp	r3, #32
 8103afc:	d00c      	beq.n	8103b18 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103afe:	2b20      	cmp	r3, #32
 8103b00:	d815      	bhi.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103b02:	2b00      	cmp	r3, #0
 8103b04:	d019      	beq.n	8103b3a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103b06:	2b10      	cmp	r3, #16
 8103b08:	d111      	bne.n	8103b2e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b0a:	4b77      	ldr	r3, [pc, #476]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b0e:	4a76      	ldr	r2, [pc, #472]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103b14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103b16:	e011      	b.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b1c:	3308      	adds	r3, #8
 8103b1e:	2102      	movs	r1, #2
 8103b20:	4618      	mov	r0, r3
 8103b22:	f001 fac5 	bl	81050b0 <RCCEx_PLL2_Config>
 8103b26:	4603      	mov	r3, r0
 8103b28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103b2c:	e006      	b.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103b2e:	2301      	movs	r3, #1
 8103b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103b34:	e002      	b.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103b36:	bf00      	nop
 8103b38:	e000      	b.n	8103b3c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b40:	2b00      	cmp	r3, #0
 8103b42:	d10a      	bne.n	8103b5a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103b44:	4b68      	ldr	r3, [pc, #416]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b48:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8103b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103b52:	4a65      	ldr	r2, [pc, #404]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b54:	430b      	orrs	r3, r1
 8103b56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103b58:	e003      	b.n	8103b62 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103b5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103b6a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8103b6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8103b72:	2300      	movs	r3, #0
 8103b74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8103b78:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8103b7c:	460b      	mov	r3, r1
 8103b7e:	4313      	orrs	r3, r2
 8103b80:	d051      	beq.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103b86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103b8c:	d035      	beq.n	8103bfa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8103b92:	d82e      	bhi.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103b94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103b98:	d031      	beq.n	8103bfe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103b9a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8103b9e:	d828      	bhi.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103ba4:	d01a      	beq.n	8103bdc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8103baa:	d822      	bhi.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103bac:	2b00      	cmp	r3, #0
 8103bae:	d003      	beq.n	8103bb8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103bb4:	d007      	beq.n	8103bc6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103bb6:	e01c      	b.n	8103bf2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bb8:	4b4b      	ldr	r3, [pc, #300]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bbc:	4a4a      	ldr	r2, [pc, #296]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103bc4:	e01c      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103bca:	3308      	adds	r3, #8
 8103bcc:	2100      	movs	r1, #0
 8103bce:	4618      	mov	r0, r3
 8103bd0:	f001 fa6e 	bl	81050b0 <RCCEx_PLL2_Config>
 8103bd4:	4603      	mov	r3, r0
 8103bd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103bda:	e011      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103be0:	3328      	adds	r3, #40	; 0x28
 8103be2:	2100      	movs	r1, #0
 8103be4:	4618      	mov	r0, r3
 8103be6:	f001 fb15 	bl	8105214 <RCCEx_PLL3_Config>
 8103bea:	4603      	mov	r3, r0
 8103bec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103bf0:	e006      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103bf2:	2301      	movs	r3, #1
 8103bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103bf8:	e002      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103bfa:	bf00      	nop
 8103bfc:	e000      	b.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103bfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c04:	2b00      	cmp	r3, #0
 8103c06:	d10a      	bne.n	8103c1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103c08:	4b37      	ldr	r3, [pc, #220]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103c0c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8103c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8103c16:	4a34      	ldr	r2, [pc, #208]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c18:	430b      	orrs	r3, r1
 8103c1a:	6513      	str	r3, [r2, #80]	; 0x50
 8103c1c:	e003      	b.n	8103c26 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103c22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c2e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8103c32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8103c36:	2300      	movs	r3, #0
 8103c38:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8103c3c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8103c40:	460b      	mov	r3, r1
 8103c42:	4313      	orrs	r3, r2
 8103c44:	d056      	beq.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103c50:	d033      	beq.n	8103cba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103c52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8103c56:	d82c      	bhi.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103c5c:	d02f      	beq.n	8103cbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103c5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8103c62:	d826      	bhi.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c64:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103c68:	d02b      	beq.n	8103cc2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103c6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8103c6e:	d820      	bhi.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103c74:	d012      	beq.n	8103c9c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103c76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103c7a:	d81a      	bhi.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103c7c:	2b00      	cmp	r3, #0
 8103c7e:	d022      	beq.n	8103cc6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8103c84:	d115      	bne.n	8103cb2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103c8a:	3308      	adds	r3, #8
 8103c8c:	2101      	movs	r1, #1
 8103c8e:	4618      	mov	r0, r3
 8103c90:	f001 fa0e 	bl	81050b0 <RCCEx_PLL2_Config>
 8103c94:	4603      	mov	r3, r0
 8103c96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103c9a:	e015      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ca0:	3328      	adds	r3, #40	; 0x28
 8103ca2:	2101      	movs	r1, #1
 8103ca4:	4618      	mov	r0, r3
 8103ca6:	f001 fab5 	bl	8105214 <RCCEx_PLL3_Config>
 8103caa:	4603      	mov	r3, r0
 8103cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103cb0:	e00a      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cb2:	2301      	movs	r3, #1
 8103cb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103cb8:	e006      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cba:	bf00      	nop
 8103cbc:	e004      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cbe:	bf00      	nop
 8103cc0:	e002      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cc2:	bf00      	nop
 8103cc4:	e000      	b.n	8103cc8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103cc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ccc:	2b00      	cmp	r3, #0
 8103cce:	d10d      	bne.n	8103cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103cd0:	4b05      	ldr	r3, [pc, #20]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103cd4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8103cd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103cde:	4a02      	ldr	r2, [pc, #8]	; (8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ce0:	430b      	orrs	r3, r1
 8103ce2:	6513      	str	r3, [r2, #80]	; 0x50
 8103ce4:	e006      	b.n	8103cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103ce6:	bf00      	nop
 8103ce8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103cf0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103cfc:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8103d00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8103d04:	2300      	movs	r3, #0
 8103d06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8103d0a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8103d0e:	460b      	mov	r3, r1
 8103d10:	4313      	orrs	r3, r2
 8103d12:	d055      	beq.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103d1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103d20:	d033      	beq.n	8103d8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8103d26:	d82c      	bhi.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d2c:	d02f      	beq.n	8103d8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8103d32:	d826      	bhi.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d34:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103d38:	d02b      	beq.n	8103d92 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8103d3e:	d820      	bhi.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d44:	d012      	beq.n	8103d6c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103d4a:	d81a      	bhi.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103d4c:	2b00      	cmp	r3, #0
 8103d4e:	d022      	beq.n	8103d96 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103d50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103d54:	d115      	bne.n	8103d82 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d5a:	3308      	adds	r3, #8
 8103d5c:	2101      	movs	r1, #1
 8103d5e:	4618      	mov	r0, r3
 8103d60:	f001 f9a6 	bl	81050b0 <RCCEx_PLL2_Config>
 8103d64:	4603      	mov	r3, r0
 8103d66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103d6a:	e015      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103d70:	3328      	adds	r3, #40	; 0x28
 8103d72:	2101      	movs	r1, #1
 8103d74:	4618      	mov	r0, r3
 8103d76:	f001 fa4d 	bl	8105214 <RCCEx_PLL3_Config>
 8103d7a:	4603      	mov	r3, r0
 8103d7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103d80:	e00a      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103d82:	2301      	movs	r3, #1
 8103d84:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103d88:	e006      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d8a:	bf00      	nop
 8103d8c:	e004      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d8e:	bf00      	nop
 8103d90:	e002      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d92:	bf00      	nop
 8103d94:	e000      	b.n	8103d98 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103d96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103d98:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103d9c:	2b00      	cmp	r3, #0
 8103d9e:	d10b      	bne.n	8103db8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103da0:	4ba4      	ldr	r3, [pc, #656]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103da4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8103da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8103db0:	4aa0      	ldr	r2, [pc, #640]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103db2:	430b      	orrs	r3, r1
 8103db4:	6593      	str	r3, [r2, #88]	; 0x58
 8103db6:	e003      	b.n	8103dc0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103db8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103dbc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103dc8:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8103dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8103dd0:	2300      	movs	r3, #0
 8103dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8103dd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8103dda:	460b      	mov	r3, r1
 8103ddc:	4313      	orrs	r3, r2
 8103dde:	d037      	beq.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103dea:	d00e      	beq.n	8103e0a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8103df0:	d816      	bhi.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103df2:	2b00      	cmp	r3, #0
 8103df4:	d018      	beq.n	8103e28 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103df6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8103dfa:	d111      	bne.n	8103e20 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103dfc:	4b8d      	ldr	r3, [pc, #564]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e00:	4a8c      	ldr	r2, [pc, #560]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103e08:	e00f      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e0e:	3308      	adds	r3, #8
 8103e10:	2101      	movs	r1, #1
 8103e12:	4618      	mov	r0, r3
 8103e14:	f001 f94c 	bl	81050b0 <RCCEx_PLL2_Config>
 8103e18:	4603      	mov	r3, r0
 8103e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103e1e:	e004      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103e20:	2301      	movs	r3, #1
 8103e22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103e26:	e000      	b.n	8103e2a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e2e:	2b00      	cmp	r3, #0
 8103e30:	d10a      	bne.n	8103e48 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103e32:	4b80      	ldr	r3, [pc, #512]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e36:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8103e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103e40:	4a7c      	ldr	r2, [pc, #496]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e42:	430b      	orrs	r3, r1
 8103e44:	6513      	str	r3, [r2, #80]	; 0x50
 8103e46:	e003      	b.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103e4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103e58:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8103e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8103e60:	2300      	movs	r3, #0
 8103e62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8103e66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8103e6a:	460b      	mov	r3, r1
 8103e6c:	4313      	orrs	r3, r2
 8103e6e:	d039      	beq.n	8103ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103e76:	2b03      	cmp	r3, #3
 8103e78:	d81c      	bhi.n	8103eb4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103e7a:	a201      	add	r2, pc, #4	; (adr r2, 8103e80 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103e80:	08103ebd 	.word	0x08103ebd
 8103e84:	08103e91 	.word	0x08103e91
 8103e88:	08103e9f 	.word	0x08103e9f
 8103e8c:	08103ebd 	.word	0x08103ebd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e90:	4b68      	ldr	r3, [pc, #416]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e94:	4a67      	ldr	r2, [pc, #412]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103e9c:	e00f      	b.n	8103ebe <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ea2:	3308      	adds	r3, #8
 8103ea4:	2102      	movs	r1, #2
 8103ea6:	4618      	mov	r0, r3
 8103ea8:	f001 f902 	bl	81050b0 <RCCEx_PLL2_Config>
 8103eac:	4603      	mov	r3, r0
 8103eae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103eb2:	e004      	b.n	8103ebe <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103eb4:	2301      	movs	r3, #1
 8103eb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103eba:	e000      	b.n	8103ebe <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103ebc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ebe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ec2:	2b00      	cmp	r3, #0
 8103ec4:	d10a      	bne.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103ec6:	4b5b      	ldr	r3, [pc, #364]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103eca:	f023 0103 	bic.w	r1, r3, #3
 8103ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103ed4:	4a57      	ldr	r2, [pc, #348]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ed6:	430b      	orrs	r3, r1
 8103ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8103eda:	e003      	b.n	8103ee4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103edc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103ee0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8103ef0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8103ef4:	2300      	movs	r3, #0
 8103ef6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8103efa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8103efe:	460b      	mov	r3, r1
 8103f00:	4313      	orrs	r3, r2
 8103f02:	f000 809f 	beq.w	8104044 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103f06:	4b4c      	ldr	r3, [pc, #304]	; (8104038 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	4a4b      	ldr	r2, [pc, #300]	; (8104038 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103f10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103f12:	f7fd ff83 	bl	8101e1c <HAL_GetTick>
 8103f16:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f1a:	e00b      	b.n	8103f34 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8103f1c:	f7fd ff7e 	bl	8101e1c <HAL_GetTick>
 8103f20:	4602      	mov	r2, r0
 8103f22:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8103f26:	1ad3      	subs	r3, r2, r3
 8103f28:	2b64      	cmp	r3, #100	; 0x64
 8103f2a:	d903      	bls.n	8103f34 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8103f2c:	2303      	movs	r3, #3
 8103f2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103f32:	e005      	b.n	8103f40 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8103f34:	4b40      	ldr	r3, [pc, #256]	; (8104038 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103f36:	681b      	ldr	r3, [r3, #0]
 8103f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103f3c:	2b00      	cmp	r3, #0
 8103f3e:	d0ed      	beq.n	8103f1c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8103f40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103f44:	2b00      	cmp	r3, #0
 8103f46:	d179      	bne.n	810403c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8103f48:	4b3a      	ldr	r3, [pc, #232]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8103f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103f54:	4053      	eors	r3, r2
 8103f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103f5a:	2b00      	cmp	r3, #0
 8103f5c:	d015      	beq.n	8103f8a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8103f5e:	4b35      	ldr	r3, [pc, #212]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8103f66:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8103f6a:	4b32      	ldr	r3, [pc, #200]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f6e:	4a31      	ldr	r2, [pc, #196]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8103f74:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8103f76:	4b2f      	ldr	r3, [pc, #188]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103f7a:	4a2e      	ldr	r2, [pc, #184]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8103f80:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8103f82:	4a2c      	ldr	r2, [pc, #176]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8103f88:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8103f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103f8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103f96:	d118      	bne.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8103f98:	f7fd ff40 	bl	8101e1c <HAL_GetTick>
 8103f9c:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fa0:	e00d      	b.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8103fa2:	f7fd ff3b 	bl	8101e1c <HAL_GetTick>
 8103fa6:	4602      	mov	r2, r0
 8103fa8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8103fac:	1ad2      	subs	r2, r2, r3
 8103fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8103fb2:	429a      	cmp	r2, r3
 8103fb4:	d903      	bls.n	8103fbe <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8103fb6:	2303      	movs	r3, #3
 8103fb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8103fbc:	e005      	b.n	8103fca <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8103fbe:	4b1d      	ldr	r3, [pc, #116]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8103fc2:	f003 0302 	and.w	r3, r3, #2
 8103fc6:	2b00      	cmp	r3, #0
 8103fc8:	d0eb      	beq.n	8103fa2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8103fca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103fce:	2b00      	cmp	r3, #0
 8103fd0:	d12b      	bne.n	810402a <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8103fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103fd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103fda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8103fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103fe2:	d110      	bne.n	8104006 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8103fe4:	4b13      	ldr	r3, [pc, #76]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fe6:	691b      	ldr	r3, [r3, #16]
 8103fe8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8103fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103ff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8103ff4:	091b      	lsrs	r3, r3, #4
 8103ff6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8103ffa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8103ffe:	4a0d      	ldr	r2, [pc, #52]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104000:	430b      	orrs	r3, r1
 8104002:	6113      	str	r3, [r2, #16]
 8104004:	e005      	b.n	8104012 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8104006:	4b0b      	ldr	r3, [pc, #44]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104008:	691b      	ldr	r3, [r3, #16]
 810400a:	4a0a      	ldr	r2, [pc, #40]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810400c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8104010:	6113      	str	r3, [r2, #16]
 8104012:	4b08      	ldr	r3, [pc, #32]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104014:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8104016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810401a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 810401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8104022:	4a04      	ldr	r2, [pc, #16]	; (8104034 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104024:	430b      	orrs	r3, r1
 8104026:	6713      	str	r3, [r2, #112]	; 0x70
 8104028:	e00c      	b.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810402a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810402e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8104032:	e007      	b.n	8104044 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8104034:	58024400 	.word	0x58024400
 8104038:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810403c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104040:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104048:	e9d3 2300 	ldrd	r2, r3, [r3]
 810404c:	f002 0301 	and.w	r3, r2, #1
 8104050:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8104054:	2300      	movs	r3, #0
 8104056:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 810405a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 810405e:	460b      	mov	r3, r1
 8104060:	4313      	orrs	r3, r2
 8104062:	f000 8089 	beq.w	8104178 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8104066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810406a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 810406c:	2b28      	cmp	r3, #40	; 0x28
 810406e:	d86b      	bhi.n	8104148 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104070:	a201      	add	r2, pc, #4	; (adr r2, 8104078 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8104072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104076:	bf00      	nop
 8104078:	08104151 	.word	0x08104151
 810407c:	08104149 	.word	0x08104149
 8104080:	08104149 	.word	0x08104149
 8104084:	08104149 	.word	0x08104149
 8104088:	08104149 	.word	0x08104149
 810408c:	08104149 	.word	0x08104149
 8104090:	08104149 	.word	0x08104149
 8104094:	08104149 	.word	0x08104149
 8104098:	0810411d 	.word	0x0810411d
 810409c:	08104149 	.word	0x08104149
 81040a0:	08104149 	.word	0x08104149
 81040a4:	08104149 	.word	0x08104149
 81040a8:	08104149 	.word	0x08104149
 81040ac:	08104149 	.word	0x08104149
 81040b0:	08104149 	.word	0x08104149
 81040b4:	08104149 	.word	0x08104149
 81040b8:	08104133 	.word	0x08104133
 81040bc:	08104149 	.word	0x08104149
 81040c0:	08104149 	.word	0x08104149
 81040c4:	08104149 	.word	0x08104149
 81040c8:	08104149 	.word	0x08104149
 81040cc:	08104149 	.word	0x08104149
 81040d0:	08104149 	.word	0x08104149
 81040d4:	08104149 	.word	0x08104149
 81040d8:	08104151 	.word	0x08104151
 81040dc:	08104149 	.word	0x08104149
 81040e0:	08104149 	.word	0x08104149
 81040e4:	08104149 	.word	0x08104149
 81040e8:	08104149 	.word	0x08104149
 81040ec:	08104149 	.word	0x08104149
 81040f0:	08104149 	.word	0x08104149
 81040f4:	08104149 	.word	0x08104149
 81040f8:	08104151 	.word	0x08104151
 81040fc:	08104149 	.word	0x08104149
 8104100:	08104149 	.word	0x08104149
 8104104:	08104149 	.word	0x08104149
 8104108:	08104149 	.word	0x08104149
 810410c:	08104149 	.word	0x08104149
 8104110:	08104149 	.word	0x08104149
 8104114:	08104149 	.word	0x08104149
 8104118:	08104151 	.word	0x08104151
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810411c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104120:	3308      	adds	r3, #8
 8104122:	2101      	movs	r1, #1
 8104124:	4618      	mov	r0, r3
 8104126:	f000 ffc3 	bl	81050b0 <RCCEx_PLL2_Config>
 810412a:	4603      	mov	r3, r0
 810412c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104130:	e00f      	b.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104132:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104136:	3328      	adds	r3, #40	; 0x28
 8104138:	2101      	movs	r1, #1
 810413a:	4618      	mov	r0, r3
 810413c:	f001 f86a 	bl	8105214 <RCCEx_PLL3_Config>
 8104140:	4603      	mov	r3, r0
 8104142:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104146:	e004      	b.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104148:	2301      	movs	r3, #1
 810414a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810414e:	e000      	b.n	8104152 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104152:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104156:	2b00      	cmp	r3, #0
 8104158:	d10a      	bne.n	8104170 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810415a:	4bbf      	ldr	r3, [pc, #764]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810415c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810415e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8104162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104168:	4abb      	ldr	r2, [pc, #748]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810416a:	430b      	orrs	r3, r1
 810416c:	6553      	str	r3, [r2, #84]	; 0x54
 810416e:	e003      	b.n	8104178 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104170:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104174:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104180:	f002 0302 	and.w	r3, r2, #2
 8104184:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104188:	2300      	movs	r3, #0
 810418a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 810418e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8104192:	460b      	mov	r3, r1
 8104194:	4313      	orrs	r3, r2
 8104196:	d041      	beq.n	810421c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104198:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810419c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810419e:	2b05      	cmp	r3, #5
 81041a0:	d824      	bhi.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81041a2:	a201      	add	r2, pc, #4	; (adr r2, 81041a8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81041a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81041a8:	081041f5 	.word	0x081041f5
 81041ac:	081041c1 	.word	0x081041c1
 81041b0:	081041d7 	.word	0x081041d7
 81041b4:	081041f5 	.word	0x081041f5
 81041b8:	081041f5 	.word	0x081041f5
 81041bc:	081041f5 	.word	0x081041f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041c4:	3308      	adds	r3, #8
 81041c6:	2101      	movs	r1, #1
 81041c8:	4618      	mov	r0, r3
 81041ca:	f000 ff71 	bl	81050b0 <RCCEx_PLL2_Config>
 81041ce:	4603      	mov	r3, r0
 81041d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81041d4:	e00f      	b.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81041d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81041da:	3328      	adds	r3, #40	; 0x28
 81041dc:	2101      	movs	r1, #1
 81041de:	4618      	mov	r0, r3
 81041e0:	f001 f818 	bl	8105214 <RCCEx_PLL3_Config>
 81041e4:	4603      	mov	r3, r0
 81041e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81041ea:	e004      	b.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81041ec:	2301      	movs	r3, #1
 81041ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81041f2:	e000      	b.n	81041f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81041fa:	2b00      	cmp	r3, #0
 81041fc:	d10a      	bne.n	8104214 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81041fe:	4b96      	ldr	r3, [pc, #600]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104202:	f023 0107 	bic.w	r1, r3, #7
 8104206:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810420a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810420c:	4a92      	ldr	r2, [pc, #584]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810420e:	430b      	orrs	r3, r1
 8104210:	6553      	str	r3, [r2, #84]	; 0x54
 8104212:	e003      	b.n	810421c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104214:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104218:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104224:	f002 0304 	and.w	r3, r2, #4
 8104228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 810422c:	2300      	movs	r3, #0
 810422e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104232:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8104236:	460b      	mov	r3, r1
 8104238:	4313      	orrs	r3, r2
 810423a:	d044      	beq.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810423c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104244:	2b05      	cmp	r3, #5
 8104246:	d825      	bhi.n	8104294 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8104248:	a201      	add	r2, pc, #4	; (adr r2, 8104250 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810424a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810424e:	bf00      	nop
 8104250:	0810429d 	.word	0x0810429d
 8104254:	08104269 	.word	0x08104269
 8104258:	0810427f 	.word	0x0810427f
 810425c:	0810429d 	.word	0x0810429d
 8104260:	0810429d 	.word	0x0810429d
 8104264:	0810429d 	.word	0x0810429d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810426c:	3308      	adds	r3, #8
 810426e:	2101      	movs	r1, #1
 8104270:	4618      	mov	r0, r3
 8104272:	f000 ff1d 	bl	81050b0 <RCCEx_PLL2_Config>
 8104276:	4603      	mov	r3, r0
 8104278:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810427c:	e00f      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104282:	3328      	adds	r3, #40	; 0x28
 8104284:	2101      	movs	r1, #1
 8104286:	4618      	mov	r0, r3
 8104288:	f000 ffc4 	bl	8105214 <RCCEx_PLL3_Config>
 810428c:	4603      	mov	r3, r0
 810428e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104292:	e004      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104294:	2301      	movs	r3, #1
 8104296:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810429a:	e000      	b.n	810429e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 810429c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810429e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81042a2:	2b00      	cmp	r3, #0
 81042a4:	d10b      	bne.n	81042be <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81042a6:	4b6c      	ldr	r3, [pc, #432]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81042aa:	f023 0107 	bic.w	r1, r3, #7
 81042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 81042b6:	4a68      	ldr	r2, [pc, #416]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042b8:	430b      	orrs	r3, r1
 81042ba:	6593      	str	r3, [r2, #88]	; 0x58
 81042bc:	e003      	b.n	81042c6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81042c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81042ce:	f002 0320 	and.w	r3, r2, #32
 81042d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 81042d6:	2300      	movs	r3, #0
 81042d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 81042dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 81042e0:	460b      	mov	r3, r1
 81042e2:	4313      	orrs	r3, r2
 81042e4:	d055      	beq.n	8104392 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81042ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81042f2:	d033      	beq.n	810435c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81042f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 81042f8:	d82c      	bhi.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81042fe:	d02f      	beq.n	8104360 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8104300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104304:	d826      	bhi.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104306:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810430a:	d02b      	beq.n	8104364 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 810430c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104310:	d820      	bhi.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104312:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104316:	d012      	beq.n	810433e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810431c:	d81a      	bhi.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810431e:	2b00      	cmp	r3, #0
 8104320:	d022      	beq.n	8104368 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8104322:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104326:	d115      	bne.n	8104354 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810432c:	3308      	adds	r3, #8
 810432e:	2100      	movs	r1, #0
 8104330:	4618      	mov	r0, r3
 8104332:	f000 febd 	bl	81050b0 <RCCEx_PLL2_Config>
 8104336:	4603      	mov	r3, r0
 8104338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810433c:	e015      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104342:	3328      	adds	r3, #40	; 0x28
 8104344:	2102      	movs	r1, #2
 8104346:	4618      	mov	r0, r3
 8104348:	f000 ff64 	bl	8105214 <RCCEx_PLL3_Config>
 810434c:	4603      	mov	r3, r0
 810434e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104352:	e00a      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104354:	2301      	movs	r3, #1
 8104356:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810435a:	e006      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810435c:	bf00      	nop
 810435e:	e004      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104360:	bf00      	nop
 8104362:	e002      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104364:	bf00      	nop
 8104366:	e000      	b.n	810436a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104368:	bf00      	nop
    }

    if (ret == HAL_OK)
 810436a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810436e:	2b00      	cmp	r3, #0
 8104370:	d10b      	bne.n	810438a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8104372:	4b39      	ldr	r3, [pc, #228]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104376:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 810437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810437e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104382:	4a35      	ldr	r2, [pc, #212]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104384:	430b      	orrs	r3, r1
 8104386:	6553      	str	r3, [r2, #84]	; 0x54
 8104388:	e003      	b.n	8104392 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810438a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810438e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8104392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104396:	e9d3 2300 	ldrd	r2, r3, [r3]
 810439a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 810439e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 81043a2:	2300      	movs	r3, #0
 81043a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 81043a8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 81043ac:	460b      	mov	r3, r1
 81043ae:	4313      	orrs	r3, r2
 81043b0:	d058      	beq.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81043b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 81043ba:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043be:	d033      	beq.n	8104428 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81043c0:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81043c4:	d82c      	bhi.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81043ca:	d02f      	beq.n	810442c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81043cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81043d0:	d826      	bhi.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81043d6:	d02b      	beq.n	8104430 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81043d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81043dc:	d820      	bhi.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81043e2:	d012      	beq.n	810440a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81043e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81043e8:	d81a      	bhi.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81043ea:	2b00      	cmp	r3, #0
 81043ec:	d022      	beq.n	8104434 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81043ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 81043f2:	d115      	bne.n	8104420 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81043f8:	3308      	adds	r3, #8
 81043fa:	2100      	movs	r1, #0
 81043fc:	4618      	mov	r0, r3
 81043fe:	f000 fe57 	bl	81050b0 <RCCEx_PLL2_Config>
 8104402:	4603      	mov	r3, r0
 8104404:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104408:	e015      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810440e:	3328      	adds	r3, #40	; 0x28
 8104410:	2102      	movs	r1, #2
 8104412:	4618      	mov	r0, r3
 8104414:	f000 fefe 	bl	8105214 <RCCEx_PLL3_Config>
 8104418:	4603      	mov	r3, r0
 810441a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810441e:	e00a      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104420:	2301      	movs	r3, #1
 8104422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104426:	e006      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104428:	bf00      	nop
 810442a:	e004      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810442c:	bf00      	nop
 810442e:	e002      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104430:	bf00      	nop
 8104432:	e000      	b.n	8104436 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104434:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104436:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810443a:	2b00      	cmp	r3, #0
 810443c:	d10e      	bne.n	810445c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810443e:	4b06      	ldr	r3, [pc, #24]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104442:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8104446:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810444a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810444e:	4a02      	ldr	r2, [pc, #8]	; (8104458 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104450:	430b      	orrs	r3, r1
 8104452:	6593      	str	r3, [r2, #88]	; 0x58
 8104454:	e006      	b.n	8104464 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8104456:	bf00      	nop
 8104458:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810445c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104460:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104468:	e9d3 2300 	ldrd	r2, r3, [r3]
 810446c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8104470:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8104474:	2300      	movs	r3, #0
 8104476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 810447a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 810447e:	460b      	mov	r3, r1
 8104480:	4313      	orrs	r3, r2
 8104482:	d055      	beq.n	8104530 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8104484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104488:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 810448c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104490:	d033      	beq.n	81044fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8104492:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104496:	d82c      	bhi.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810449c:	d02f      	beq.n	81044fe <HAL_RCCEx_PeriphCLKConfig+0xdde>
 810449e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 81044a2:	d826      	bhi.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044a4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044a8:	d02b      	beq.n	8104502 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81044aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 81044ae:	d820      	bhi.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044b4:	d012      	beq.n	81044dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81044b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81044ba:	d81a      	bhi.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81044bc:	2b00      	cmp	r3, #0
 81044be:	d022      	beq.n	8104506 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81044c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81044c4:	d115      	bne.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044ca:	3308      	adds	r3, #8
 81044cc:	2100      	movs	r1, #0
 81044ce:	4618      	mov	r0, r3
 81044d0:	f000 fdee 	bl	81050b0 <RCCEx_PLL2_Config>
 81044d4:	4603      	mov	r3, r0
 81044d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81044da:	e015      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81044e0:	3328      	adds	r3, #40	; 0x28
 81044e2:	2102      	movs	r1, #2
 81044e4:	4618      	mov	r0, r3
 81044e6:	f000 fe95 	bl	8105214 <RCCEx_PLL3_Config>
 81044ea:	4603      	mov	r3, r0
 81044ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81044f0:	e00a      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81044f2:	2301      	movs	r3, #1
 81044f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81044f8:	e006      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81044fa:	bf00      	nop
 81044fc:	e004      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81044fe:	bf00      	nop
 8104500:	e002      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104502:	bf00      	nop
 8104504:	e000      	b.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8104506:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104508:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810450c:	2b00      	cmp	r3, #0
 810450e:	d10b      	bne.n	8104528 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8104510:	4ba1      	ldr	r3, [pc, #644]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104514:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8104518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810451c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8104520:	4a9d      	ldr	r2, [pc, #628]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104522:	430b      	orrs	r3, r1
 8104524:	6593      	str	r3, [r2, #88]	; 0x58
 8104526:	e003      	b.n	8104530 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810452c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104530:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104538:	f002 0308 	and.w	r3, r2, #8
 810453c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8104540:	2300      	movs	r3, #0
 8104542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104546:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 810454a:	460b      	mov	r3, r1
 810454c:	4313      	orrs	r3, r2
 810454e:	d01e      	beq.n	810458e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104550:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810455c:	d10c      	bne.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104562:	3328      	adds	r3, #40	; 0x28
 8104564:	2102      	movs	r1, #2
 8104566:	4618      	mov	r0, r3
 8104568:	f000 fe54 	bl	8105214 <RCCEx_PLL3_Config>
 810456c:	4603      	mov	r3, r0
 810456e:	2b00      	cmp	r3, #0
 8104570:	d002      	beq.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8104572:	2301      	movs	r3, #1
 8104574:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104578:	4b87      	ldr	r3, [pc, #540]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810457c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8104580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104584:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104588:	4a83      	ldr	r2, [pc, #524]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810458a:	430b      	orrs	r3, r1
 810458c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104596:	f002 0310 	and.w	r3, r2, #16
 810459a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 810459e:	2300      	movs	r3, #0
 81045a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 81045a4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 81045a8:	460b      	mov	r3, r1
 81045aa:	4313      	orrs	r3, r2
 81045ac:	d01e      	beq.n	81045ec <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81045b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81045ba:	d10c      	bne.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045c0:	3328      	adds	r3, #40	; 0x28
 81045c2:	2102      	movs	r1, #2
 81045c4:	4618      	mov	r0, r3
 81045c6:	f000 fe25 	bl	8105214 <RCCEx_PLL3_Config>
 81045ca:	4603      	mov	r3, r0
 81045cc:	2b00      	cmp	r3, #0
 81045ce:	d002      	beq.n	81045d6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81045d0:	2301      	movs	r3, #1
 81045d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81045d6:	4b70      	ldr	r3, [pc, #448]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81045da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 81045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81045e6:	4a6c      	ldr	r2, [pc, #432]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045e8:	430b      	orrs	r3, r1
 81045ea:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81045f4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 81045f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81045fc:	2300      	movs	r3, #0
 81045fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8104602:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8104606:	460b      	mov	r3, r1
 8104608:	4313      	orrs	r3, r2
 810460a:	d03e      	beq.n	810468a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810460c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104610:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8104614:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104618:	d022      	beq.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810461a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810461e:	d81b      	bhi.n	8104658 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104620:	2b00      	cmp	r3, #0
 8104622:	d003      	beq.n	810462c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8104624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104628:	d00b      	beq.n	8104642 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810462a:	e015      	b.n	8104658 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810462c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104630:	3308      	adds	r3, #8
 8104632:	2100      	movs	r1, #0
 8104634:	4618      	mov	r0, r3
 8104636:	f000 fd3b 	bl	81050b0 <RCCEx_PLL2_Config>
 810463a:	4603      	mov	r3, r0
 810463c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104640:	e00f      	b.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104646:	3328      	adds	r3, #40	; 0x28
 8104648:	2102      	movs	r1, #2
 810464a:	4618      	mov	r0, r3
 810464c:	f000 fde2 	bl	8105214 <RCCEx_PLL3_Config>
 8104650:	4603      	mov	r3, r0
 8104652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104656:	e004      	b.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104658:	2301      	movs	r3, #1
 810465a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810465e:	e000      	b.n	8104662 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8104660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104666:	2b00      	cmp	r3, #0
 8104668:	d10b      	bne.n	8104682 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810466a:	4b4b      	ldr	r3, [pc, #300]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810466e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8104672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104676:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 810467a:	4a47      	ldr	r2, [pc, #284]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810467c:	430b      	orrs	r3, r1
 810467e:	6593      	str	r3, [r2, #88]	; 0x58
 8104680:	e003      	b.n	810468a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104692:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8104696:	67bb      	str	r3, [r7, #120]	; 0x78
 8104698:	2300      	movs	r3, #0
 810469a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810469c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81046a0:	460b      	mov	r3, r1
 81046a2:	4313      	orrs	r3, r2
 81046a4:	d03b      	beq.n	810471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81046ae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81046b2:	d01f      	beq.n	81046f4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81046b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81046b8:	d818      	bhi.n	81046ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81046ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81046be:	d003      	beq.n	81046c8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81046c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81046c4:	d007      	beq.n	81046d6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81046c6:	e011      	b.n	81046ec <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81046c8:	4b33      	ldr	r3, [pc, #204]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81046cc:	4a32      	ldr	r2, [pc, #200]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81046d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81046d4:	e00f      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81046d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81046da:	3328      	adds	r3, #40	; 0x28
 81046dc:	2101      	movs	r1, #1
 81046de:	4618      	mov	r0, r3
 81046e0:	f000 fd98 	bl	8105214 <RCCEx_PLL3_Config>
 81046e4:	4603      	mov	r3, r0
 81046e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81046ea:	e004      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81046ec:	2301      	movs	r3, #1
 81046ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81046f2:	e000      	b.n	81046f6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81046f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81046f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81046fa:	2b00      	cmp	r3, #0
 81046fc:	d10b      	bne.n	8104716 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81046fe:	4b26      	ldr	r3, [pc, #152]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104702:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8104706:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810470e:	4a22      	ldr	r2, [pc, #136]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104710:	430b      	orrs	r3, r1
 8104712:	6553      	str	r3, [r2, #84]	; 0x54
 8104714:	e003      	b.n	810471e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810471a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104726:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 810472a:	673b      	str	r3, [r7, #112]	; 0x70
 810472c:	2300      	movs	r3, #0
 810472e:	677b      	str	r3, [r7, #116]	; 0x74
 8104730:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8104734:	460b      	mov	r3, r1
 8104736:	4313      	orrs	r3, r2
 8104738:	d034      	beq.n	81047a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104740:	2b00      	cmp	r3, #0
 8104742:	d003      	beq.n	810474c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8104744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104748:	d007      	beq.n	810475a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810474a:	e011      	b.n	8104770 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810474c:	4b12      	ldr	r3, [pc, #72]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810474e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104750:	4a11      	ldr	r2, [pc, #68]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104752:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104756:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104758:	e00e      	b.n	8104778 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810475e:	3308      	adds	r3, #8
 8104760:	2102      	movs	r1, #2
 8104762:	4618      	mov	r0, r3
 8104764:	f000 fca4 	bl	81050b0 <RCCEx_PLL2_Config>
 8104768:	4603      	mov	r3, r0
 810476a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810476e:	e003      	b.n	8104778 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104770:	2301      	movs	r3, #1
 8104772:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104778:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810477c:	2b00      	cmp	r3, #0
 810477e:	d10d      	bne.n	810479c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104780:	4b05      	ldr	r3, [pc, #20]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104784:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8104788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810478c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810478e:	4a02      	ldr	r2, [pc, #8]	; (8104798 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104790:	430b      	orrs	r3, r1
 8104792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8104794:	e006      	b.n	81047a4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8104796:	bf00      	nop
 8104798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810479c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81047a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81047a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047ac:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 81047b2:	2300      	movs	r3, #0
 81047b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 81047b6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81047ba:	460b      	mov	r3, r1
 81047bc:	4313      	orrs	r3, r2
 81047be:	d00c      	beq.n	81047da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047c4:	3328      	adds	r3, #40	; 0x28
 81047c6:	2102      	movs	r1, #2
 81047c8:	4618      	mov	r0, r3
 81047ca:	f000 fd23 	bl	8105214 <RCCEx_PLL3_Config>
 81047ce:	4603      	mov	r3, r0
 81047d0:	2b00      	cmp	r3, #0
 81047d2:	d002      	beq.n	81047da <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81047d4:	2301      	movs	r3, #1
 81047d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81047e2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 81047e6:	663b      	str	r3, [r7, #96]	; 0x60
 81047e8:	2300      	movs	r3, #0
 81047ea:	667b      	str	r3, [r7, #100]	; 0x64
 81047ec:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 81047f0:	460b      	mov	r3, r1
 81047f2:	4313      	orrs	r3, r2
 81047f4:	d038      	beq.n	8104868 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81047f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81047fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81047fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104802:	d018      	beq.n	8104836 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8104804:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104808:	d811      	bhi.n	810482e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810480a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810480e:	d014      	beq.n	810483a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8104810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104814:	d80b      	bhi.n	810482e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8104816:	2b00      	cmp	r3, #0
 8104818:	d011      	beq.n	810483e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810481a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810481e:	d106      	bne.n	810482e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104820:	4bc3      	ldr	r3, [pc, #780]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104824:	4ac2      	ldr	r2, [pc, #776]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810482a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 810482c:	e008      	b.n	8104840 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810482e:	2301      	movs	r3, #1
 8104830:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8104834:	e004      	b.n	8104840 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104836:	bf00      	nop
 8104838:	e002      	b.n	8104840 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810483a:	bf00      	nop
 810483c:	e000      	b.n	8104840 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810483e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104840:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104844:	2b00      	cmp	r3, #0
 8104846:	d10b      	bne.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104848:	4bb9      	ldr	r3, [pc, #740]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810484c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8104850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104858:	4ab5      	ldr	r2, [pc, #724]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810485a:	430b      	orrs	r3, r1
 810485c:	6553      	str	r3, [r2, #84]	; 0x54
 810485e:	e003      	b.n	8104868 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104864:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810486c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104870:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8104874:	65bb      	str	r3, [r7, #88]	; 0x58
 8104876:	2300      	movs	r3, #0
 8104878:	65fb      	str	r3, [r7, #92]	; 0x5c
 810487a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 810487e:	460b      	mov	r3, r1
 8104880:	4313      	orrs	r3, r2
 8104882:	d009      	beq.n	8104898 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104884:	4baa      	ldr	r3, [pc, #680]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104888:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 810488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104892:	4aa7      	ldr	r2, [pc, #668]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104894:	430b      	orrs	r3, r1
 8104896:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048a0:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81048a4:	653b      	str	r3, [r7, #80]	; 0x50
 81048a6:	2300      	movs	r3, #0
 81048a8:	657b      	str	r3, [r7, #84]	; 0x54
 81048aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81048ae:	460b      	mov	r3, r1
 81048b0:	4313      	orrs	r3, r2
 81048b2:	d00a      	beq.n	81048ca <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81048b4:	4b9e      	ldr	r3, [pc, #632]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048b6:	691b      	ldr	r3, [r3, #16]
 81048b8:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81048bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81048c4:	4a9a      	ldr	r2, [pc, #616]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048c6:	430b      	orrs	r3, r1
 81048c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81048ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048d2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 81048d6:	64bb      	str	r3, [r7, #72]	; 0x48
 81048d8:	2300      	movs	r3, #0
 81048da:	64fb      	str	r3, [r7, #76]	; 0x4c
 81048dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 81048e0:	460b      	mov	r3, r1
 81048e2:	4313      	orrs	r3, r2
 81048e4:	d009      	beq.n	81048fa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81048e6:	4b92      	ldr	r3, [pc, #584]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81048ea:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 81048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81048f4:	4a8e      	ldr	r2, [pc, #568]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81048f6:	430b      	orrs	r3, r1
 81048f8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81048fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81048fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104902:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8104906:	643b      	str	r3, [r7, #64]	; 0x40
 8104908:	2300      	movs	r3, #0
 810490a:	647b      	str	r3, [r7, #68]	; 0x44
 810490c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8104910:	460b      	mov	r3, r1
 8104912:	4313      	orrs	r3, r2
 8104914:	d00e      	beq.n	8104934 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104916:	4b86      	ldr	r3, [pc, #536]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104918:	691b      	ldr	r3, [r3, #16]
 810491a:	4a85      	ldr	r2, [pc, #532]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810491c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104920:	6113      	str	r3, [r2, #16]
 8104922:	4b83      	ldr	r3, [pc, #524]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104924:	6919      	ldr	r1, [r3, #16]
 8104926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810492a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 810492e:	4a80      	ldr	r2, [pc, #512]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104930:	430b      	orrs	r3, r1
 8104932:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104934:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104938:	e9d3 2300 	ldrd	r2, r3, [r3]
 810493c:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8104940:	63bb      	str	r3, [r7, #56]	; 0x38
 8104942:	2300      	movs	r3, #0
 8104944:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104946:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810494a:	460b      	mov	r3, r1
 810494c:	4313      	orrs	r3, r2
 810494e:	d009      	beq.n	8104964 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104950:	4b77      	ldr	r3, [pc, #476]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104954:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8104958:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810495c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810495e:	4a74      	ldr	r2, [pc, #464]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104960:	430b      	orrs	r3, r1
 8104962:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104968:	e9d3 2300 	ldrd	r2, r3, [r3]
 810496c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8104970:	633b      	str	r3, [r7, #48]	; 0x30
 8104972:	2300      	movs	r3, #0
 8104974:	637b      	str	r3, [r7, #52]	; 0x34
 8104976:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 810497a:	460b      	mov	r3, r1
 810497c:	4313      	orrs	r3, r2
 810497e:	d00a      	beq.n	8104996 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104980:	4b6b      	ldr	r3, [pc, #428]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104984:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8104988:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810498c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104990:	4a67      	ldr	r2, [pc, #412]	; (8104b30 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104992:	430b      	orrs	r3, r1
 8104994:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810499a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810499e:	2100      	movs	r1, #0
 81049a0:	62b9      	str	r1, [r7, #40]	; 0x28
 81049a2:	f003 0301 	and.w	r3, r3, #1
 81049a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 81049a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81049ac:	460b      	mov	r3, r1
 81049ae:	4313      	orrs	r3, r2
 81049b0:	d011      	beq.n	81049d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049b6:	3308      	adds	r3, #8
 81049b8:	2100      	movs	r1, #0
 81049ba:	4618      	mov	r0, r3
 81049bc:	f000 fb78 	bl	81050b0 <RCCEx_PLL2_Config>
 81049c0:	4603      	mov	r3, r0
 81049c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81049c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049ca:	2b00      	cmp	r3, #0
 81049cc:	d003      	beq.n	81049d6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81049d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049de:	2100      	movs	r1, #0
 81049e0:	6239      	str	r1, [r7, #32]
 81049e2:	f003 0302 	and.w	r3, r3, #2
 81049e6:	627b      	str	r3, [r7, #36]	; 0x24
 81049e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81049ec:	460b      	mov	r3, r1
 81049ee:	4313      	orrs	r3, r2
 81049f0:	d011      	beq.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81049f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81049f6:	3308      	adds	r3, #8
 81049f8:	2101      	movs	r1, #1
 81049fa:	4618      	mov	r0, r3
 81049fc:	f000 fb58 	bl	81050b0 <RCCEx_PLL2_Config>
 8104a00:	4603      	mov	r3, r0
 8104a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104a06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d003      	beq.n	8104a16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a1e:	2100      	movs	r1, #0
 8104a20:	61b9      	str	r1, [r7, #24]
 8104a22:	f003 0304 	and.w	r3, r3, #4
 8104a26:	61fb      	str	r3, [r7, #28]
 8104a28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104a2c:	460b      	mov	r3, r1
 8104a2e:	4313      	orrs	r3, r2
 8104a30:	d011      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a36:	3308      	adds	r3, #8
 8104a38:	2102      	movs	r1, #2
 8104a3a:	4618      	mov	r0, r3
 8104a3c:	f000 fb38 	bl	81050b0 <RCCEx_PLL2_Config>
 8104a40:	4603      	mov	r3, r0
 8104a42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104a46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a4a:	2b00      	cmp	r3, #0
 8104a4c:	d003      	beq.n	8104a56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a5e:	2100      	movs	r1, #0
 8104a60:	6139      	str	r1, [r7, #16]
 8104a62:	f003 0308 	and.w	r3, r3, #8
 8104a66:	617b      	str	r3, [r7, #20]
 8104a68:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104a6c:	460b      	mov	r3, r1
 8104a6e:	4313      	orrs	r3, r2
 8104a70:	d011      	beq.n	8104a96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a76:	3328      	adds	r3, #40	; 0x28
 8104a78:	2100      	movs	r1, #0
 8104a7a:	4618      	mov	r0, r3
 8104a7c:	f000 fbca 	bl	8105214 <RCCEx_PLL3_Config>
 8104a80:	4603      	mov	r3, r0
 8104a82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8104a86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a8a:	2b00      	cmp	r3, #0
 8104a8c:	d003      	beq.n	8104a96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104a92:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a9e:	2100      	movs	r1, #0
 8104aa0:	60b9      	str	r1, [r7, #8]
 8104aa2:	f003 0310 	and.w	r3, r3, #16
 8104aa6:	60fb      	str	r3, [r7, #12]
 8104aa8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104aac:	460b      	mov	r3, r1
 8104aae:	4313      	orrs	r3, r2
 8104ab0:	d011      	beq.n	8104ad6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ab6:	3328      	adds	r3, #40	; 0x28
 8104ab8:	2101      	movs	r1, #1
 8104aba:	4618      	mov	r0, r3
 8104abc:	f000 fbaa 	bl	8105214 <RCCEx_PLL3_Config>
 8104ac0:	4603      	mov	r3, r0
 8104ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104aca:	2b00      	cmp	r3, #0
 8104acc:	d003      	beq.n	8104ad6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ace:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104ad2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ade:	2100      	movs	r1, #0
 8104ae0:	6039      	str	r1, [r7, #0]
 8104ae2:	f003 0320 	and.w	r3, r3, #32
 8104ae6:	607b      	str	r3, [r7, #4]
 8104ae8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104aec:	460b      	mov	r3, r1
 8104aee:	4313      	orrs	r3, r2
 8104af0:	d011      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8104af6:	3328      	adds	r3, #40	; 0x28
 8104af8:	2102      	movs	r1, #2
 8104afa:	4618      	mov	r0, r3
 8104afc:	f000 fb8a 	bl	8105214 <RCCEx_PLL3_Config>
 8104b00:	4603      	mov	r3, r0
 8104b02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8104b06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b0a:	2b00      	cmp	r3, #0
 8104b0c:	d003      	beq.n	8104b16 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b0e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8104b12:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8104b16:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8104b1a:	2b00      	cmp	r3, #0
 8104b1c:	d101      	bne.n	8104b22 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104b1e:	2300      	movs	r3, #0
 8104b20:	e000      	b.n	8104b24 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104b22:	2301      	movs	r3, #1
}
 8104b24:	4618      	mov	r0, r3
 8104b26:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8104b2a:	46bd      	mov	sp, r7
 8104b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104b30:	58024400 	.word	0x58024400

08104b34 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8104b34:	b580      	push	{r7, lr}
 8104b36:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8104b38:	f7fe fd94 	bl	8103664 <HAL_RCC_GetHCLKFreq>
 8104b3c:	4602      	mov	r2, r0
 8104b3e:	4b06      	ldr	r3, [pc, #24]	; (8104b58 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8104b40:	6a1b      	ldr	r3, [r3, #32]
 8104b42:	091b      	lsrs	r3, r3, #4
 8104b44:	f003 0307 	and.w	r3, r3, #7
 8104b48:	4904      	ldr	r1, [pc, #16]	; (8104b5c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8104b4a:	5ccb      	ldrb	r3, [r1, r3]
 8104b4c:	f003 031f 	and.w	r3, r3, #31
 8104b50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8104b54:	4618      	mov	r0, r3
 8104b56:	bd80      	pop	{r7, pc}
 8104b58:	58024400 	.word	0x58024400
 8104b5c:	0810af8c 	.word	0x0810af8c

08104b60 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8104b60:	b480      	push	{r7}
 8104b62:	b089      	sub	sp, #36	; 0x24
 8104b64:	af00      	add	r7, sp, #0
 8104b66:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104b68:	4ba1      	ldr	r3, [pc, #644]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b6c:	f003 0303 	and.w	r3, r3, #3
 8104b70:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8104b72:	4b9f      	ldr	r3, [pc, #636]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104b76:	0b1b      	lsrs	r3, r3, #12
 8104b78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104b7c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8104b7e:	4b9c      	ldr	r3, [pc, #624]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104b82:	091b      	lsrs	r3, r3, #4
 8104b84:	f003 0301 	and.w	r3, r3, #1
 8104b88:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8104b8a:	4b99      	ldr	r3, [pc, #612]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8104b8e:	08db      	lsrs	r3, r3, #3
 8104b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104b94:	693a      	ldr	r2, [r7, #16]
 8104b96:	fb02 f303 	mul.w	r3, r2, r3
 8104b9a:	ee07 3a90 	vmov	s15, r3
 8104b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ba2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8104ba6:	697b      	ldr	r3, [r7, #20]
 8104ba8:	2b00      	cmp	r3, #0
 8104baa:	f000 8111 	beq.w	8104dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8104bae:	69bb      	ldr	r3, [r7, #24]
 8104bb0:	2b02      	cmp	r3, #2
 8104bb2:	f000 8083 	beq.w	8104cbc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8104bb6:	69bb      	ldr	r3, [r7, #24]
 8104bb8:	2b02      	cmp	r3, #2
 8104bba:	f200 80a1 	bhi.w	8104d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8104bbe:	69bb      	ldr	r3, [r7, #24]
 8104bc0:	2b00      	cmp	r3, #0
 8104bc2:	d003      	beq.n	8104bcc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8104bc4:	69bb      	ldr	r3, [r7, #24]
 8104bc6:	2b01      	cmp	r3, #1
 8104bc8:	d056      	beq.n	8104c78 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8104bca:	e099      	b.n	8104d00 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104bcc:	4b88      	ldr	r3, [pc, #544]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	f003 0320 	and.w	r3, r3, #32
 8104bd4:	2b00      	cmp	r3, #0
 8104bd6:	d02d      	beq.n	8104c34 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104bd8:	4b85      	ldr	r3, [pc, #532]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104bda:	681b      	ldr	r3, [r3, #0]
 8104bdc:	08db      	lsrs	r3, r3, #3
 8104bde:	f003 0303 	and.w	r3, r3, #3
 8104be2:	4a84      	ldr	r2, [pc, #528]	; (8104df4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8104be4:	fa22 f303 	lsr.w	r3, r2, r3
 8104be8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104bea:	68bb      	ldr	r3, [r7, #8]
 8104bec:	ee07 3a90 	vmov	s15, r3
 8104bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104bf4:	697b      	ldr	r3, [r7, #20]
 8104bf6:	ee07 3a90 	vmov	s15, r3
 8104bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c02:	4b7b      	ldr	r3, [pc, #492]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c0a:	ee07 3a90 	vmov	s15, r3
 8104c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8104df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104c32:	e087      	b.n	8104d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104c34:	697b      	ldr	r3, [r7, #20]
 8104c36:	ee07 3a90 	vmov	s15, r3
 8104c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8104dfc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8104c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c46:	4b6a      	ldr	r3, [pc, #424]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c4e:	ee07 3a90 	vmov	s15, r3
 8104c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8104df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104c76:	e065      	b.n	8104d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104c78:	697b      	ldr	r3, [r7, #20]
 8104c7a:	ee07 3a90 	vmov	s15, r3
 8104c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104c82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8104e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104c8a:	4b59      	ldr	r3, [pc, #356]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104c92:	ee07 3a90 	vmov	s15, r3
 8104c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8104c9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8104df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104cba:	e043      	b.n	8104d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104cbc:	697b      	ldr	r3, [r7, #20]
 8104cbe:	ee07 3a90 	vmov	s15, r3
 8104cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104cc6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8104e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8104cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104cce:	4b48      	ldr	r3, [pc, #288]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104cd6:	ee07 3a90 	vmov	s15, r3
 8104cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ce2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8104df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104cfe:	e021      	b.n	8104d44 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8104d00:	697b      	ldr	r3, [r7, #20]
 8104d02:	ee07 3a90 	vmov	s15, r3
 8104d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8104e00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8104d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104d12:	4b37      	ldr	r3, [pc, #220]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104d1a:	ee07 3a90 	vmov	s15, r3
 8104d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8104d26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8104df8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8104d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104d42:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8104d44:	4b2a      	ldr	r3, [pc, #168]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d48:	0a5b      	lsrs	r3, r3, #9
 8104d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d4e:	ee07 3a90 	vmov	s15, r3
 8104d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d6a:	ee17 2a90 	vmov	r2, s15
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8104d72:	4b1f      	ldr	r3, [pc, #124]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104d76:	0c1b      	lsrs	r3, r3, #16
 8104d78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104d7c:	ee07 3a90 	vmov	s15, r3
 8104d80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104d84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104d88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104d8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8104d90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104d94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104d98:	ee17 2a90 	vmov	r2, s15
 8104d9c:	687b      	ldr	r3, [r7, #4]
 8104d9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8104da0:	4b13      	ldr	r3, [pc, #76]	; (8104df0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8104da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8104da4:	0e1b      	lsrs	r3, r3, #24
 8104da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104daa:	ee07 3a90 	vmov	s15, r3
 8104dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104db2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8104db6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8104dba:	edd7 6a07 	vldr	s13, [r7, #28]
 8104dbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8104dc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8104dc6:	ee17 2a90 	vmov	r2, s15
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8104dce:	e008      	b.n	8104de2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8104dd0:	687b      	ldr	r3, [r7, #4]
 8104dd2:	2200      	movs	r2, #0
 8104dd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8104dd6:	687b      	ldr	r3, [r7, #4]
 8104dd8:	2200      	movs	r2, #0
 8104dda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8104ddc:	687b      	ldr	r3, [r7, #4]
 8104dde:	2200      	movs	r2, #0
 8104de0:	609a      	str	r2, [r3, #8]
}
 8104de2:	bf00      	nop
 8104de4:	3724      	adds	r7, #36	; 0x24
 8104de6:	46bd      	mov	sp, r7
 8104de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104dec:	4770      	bx	lr
 8104dee:	bf00      	nop
 8104df0:	58024400 	.word	0x58024400
 8104df4:	03d09000 	.word	0x03d09000
 8104df8:	46000000 	.word	0x46000000
 8104dfc:	4c742400 	.word	0x4c742400
 8104e00:	4a742400 	.word	0x4a742400
 8104e04:	4af42400 	.word	0x4af42400

08104e08 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8104e08:	b480      	push	{r7}
 8104e0a:	b089      	sub	sp, #36	; 0x24
 8104e0c:	af00      	add	r7, sp, #0
 8104e0e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8104e10:	4ba1      	ldr	r3, [pc, #644]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e14:	f003 0303 	and.w	r3, r3, #3
 8104e18:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8104e1a:	4b9f      	ldr	r3, [pc, #636]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8104e1e:	0d1b      	lsrs	r3, r3, #20
 8104e20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8104e24:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8104e26:	4b9c      	ldr	r3, [pc, #624]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104e2a:	0a1b      	lsrs	r3, r3, #8
 8104e2c:	f003 0301 	and.w	r3, r3, #1
 8104e30:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8104e32:	4b99      	ldr	r3, [pc, #612]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8104e36:	08db      	lsrs	r3, r3, #3
 8104e38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8104e3c:	693a      	ldr	r2, [r7, #16]
 8104e3e:	fb02 f303 	mul.w	r3, r2, r3
 8104e42:	ee07 3a90 	vmov	s15, r3
 8104e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104e4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8104e4e:	697b      	ldr	r3, [r7, #20]
 8104e50:	2b00      	cmp	r3, #0
 8104e52:	f000 8111 	beq.w	8105078 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8104e56:	69bb      	ldr	r3, [r7, #24]
 8104e58:	2b02      	cmp	r3, #2
 8104e5a:	f000 8083 	beq.w	8104f64 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8104e5e:	69bb      	ldr	r3, [r7, #24]
 8104e60:	2b02      	cmp	r3, #2
 8104e62:	f200 80a1 	bhi.w	8104fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8104e66:	69bb      	ldr	r3, [r7, #24]
 8104e68:	2b00      	cmp	r3, #0
 8104e6a:	d003      	beq.n	8104e74 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8104e6c:	69bb      	ldr	r3, [r7, #24]
 8104e6e:	2b01      	cmp	r3, #1
 8104e70:	d056      	beq.n	8104f20 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8104e72:	e099      	b.n	8104fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e74:	4b88      	ldr	r3, [pc, #544]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e76:	681b      	ldr	r3, [r3, #0]
 8104e78:	f003 0320 	and.w	r3, r3, #32
 8104e7c:	2b00      	cmp	r3, #0
 8104e7e:	d02d      	beq.n	8104edc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8104e80:	4b85      	ldr	r3, [pc, #532]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104e82:	681b      	ldr	r3, [r3, #0]
 8104e84:	08db      	lsrs	r3, r3, #3
 8104e86:	f003 0303 	and.w	r3, r3, #3
 8104e8a:	4a84      	ldr	r2, [pc, #528]	; (810509c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8104e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8104e90:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104e92:	68bb      	ldr	r3, [r7, #8]
 8104e94:	ee07 3a90 	vmov	s15, r3
 8104e98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104e9c:	697b      	ldr	r3, [r7, #20]
 8104e9e:	ee07 3a90 	vmov	s15, r3
 8104ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ea6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eaa:	4b7b      	ldr	r3, [pc, #492]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104eb2:	ee07 3a90 	vmov	s15, r3
 8104eb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104eba:	ed97 6a03 	vldr	s12, [r7, #12]
 8104ebe:	eddf 5a78 	vldr	s11, [pc, #480]	; 81050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104ec2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104ec6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104eca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104ece:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104ed6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8104eda:	e087      	b.n	8104fec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104edc:	697b      	ldr	r3, [r7, #20]
 8104ede:	ee07 3a90 	vmov	s15, r3
 8104ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ee6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8104eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104eee:	4b6a      	ldr	r3, [pc, #424]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104ef6:	ee07 3a90 	vmov	s15, r3
 8104efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104efe:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f02:	eddf 5a67 	vldr	s11, [pc, #412]	; 81050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f1e:	e065      	b.n	8104fec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104f20:	697b      	ldr	r3, [r7, #20]
 8104f22:	ee07 3a90 	vmov	s15, r3
 8104f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f32:	4b59      	ldr	r3, [pc, #356]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f3a:	ee07 3a90 	vmov	s15, r3
 8104f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f42:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f46:	eddf 5a56 	vldr	s11, [pc, #344]	; 81050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104f5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104f62:	e043      	b.n	8104fec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104f64:	697b      	ldr	r3, [r7, #20]
 8104f66:	ee07 3a90 	vmov	s15, r3
 8104f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104f6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81050ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8104f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104f76:	4b48      	ldr	r3, [pc, #288]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104f7e:	ee07 3a90 	vmov	s15, r3
 8104f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104f86:	ed97 6a03 	vldr	s12, [r7, #12]
 8104f8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 81050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104fa2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104fa6:	e021      	b.n	8104fec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8104fa8:	697b      	ldr	r3, [r7, #20]
 8104faa:	ee07 3a90 	vmov	s15, r3
 8104fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104fb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81050a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8104fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8104fba:	4b37      	ldr	r3, [pc, #220]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8104fc2:	ee07 3a90 	vmov	s15, r3
 8104fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8104fca:	ed97 6a03 	vldr	s12, [r7, #12]
 8104fce:	eddf 5a34 	vldr	s11, [pc, #208]	; 81050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8104fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8104fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8104fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8104fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8104fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8104fe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8104fea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8104fec:	4b2a      	ldr	r3, [pc, #168]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8104fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8104ff0:	0a5b      	lsrs	r3, r3, #9
 8104ff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8104ff6:	ee07 3a90 	vmov	s15, r3
 8104ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8104ffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105002:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105006:	edd7 6a07 	vldr	s13, [r7, #28]
 810500a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810500e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105012:	ee17 2a90 	vmov	r2, s15
 8105016:	687b      	ldr	r3, [r7, #4]
 8105018:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810501a:	4b1f      	ldr	r3, [pc, #124]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810501e:	0c1b      	lsrs	r3, r3, #16
 8105020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105024:	ee07 3a90 	vmov	s15, r3
 8105028:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810502c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105030:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105034:	edd7 6a07 	vldr	s13, [r7, #28]
 8105038:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810503c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105040:	ee17 2a90 	vmov	r2, s15
 8105044:	687b      	ldr	r3, [r7, #4]
 8105046:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8105048:	4b13      	ldr	r3, [pc, #76]	; (8105098 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810504c:	0e1b      	lsrs	r3, r3, #24
 810504e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105052:	ee07 3a90 	vmov	s15, r3
 8105056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810505a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810505e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105062:	edd7 6a07 	vldr	s13, [r7, #28]
 8105066:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810506a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810506e:	ee17 2a90 	vmov	r2, s15
 8105072:	687b      	ldr	r3, [r7, #4]
 8105074:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105076:	e008      	b.n	810508a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105078:	687b      	ldr	r3, [r7, #4]
 810507a:	2200      	movs	r2, #0
 810507c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810507e:	687b      	ldr	r3, [r7, #4]
 8105080:	2200      	movs	r2, #0
 8105082:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105084:	687b      	ldr	r3, [r7, #4]
 8105086:	2200      	movs	r2, #0
 8105088:	609a      	str	r2, [r3, #8]
}
 810508a:	bf00      	nop
 810508c:	3724      	adds	r7, #36	; 0x24
 810508e:	46bd      	mov	sp, r7
 8105090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105094:	4770      	bx	lr
 8105096:	bf00      	nop
 8105098:	58024400 	.word	0x58024400
 810509c:	03d09000 	.word	0x03d09000
 81050a0:	46000000 	.word	0x46000000
 81050a4:	4c742400 	.word	0x4c742400
 81050a8:	4a742400 	.word	0x4a742400
 81050ac:	4af42400 	.word	0x4af42400

081050b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81050b0:	b580      	push	{r7, lr}
 81050b2:	b084      	sub	sp, #16
 81050b4:	af00      	add	r7, sp, #0
 81050b6:	6078      	str	r0, [r7, #4]
 81050b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81050ba:	2300      	movs	r3, #0
 81050bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81050be:	4b54      	ldr	r3, [pc, #336]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81050c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81050c2:	f003 0303 	and.w	r3, r3, #3
 81050c6:	2b03      	cmp	r3, #3
 81050c8:	d101      	bne.n	81050ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81050ca:	2301      	movs	r3, #1
 81050cc:	e09b      	b.n	8105206 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81050ce:	4b50      	ldr	r3, [pc, #320]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81050d0:	681b      	ldr	r3, [r3, #0]
 81050d2:	4a4f      	ldr	r2, [pc, #316]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81050d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 81050d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81050da:	f7fc fe9f 	bl	8101e1c <HAL_GetTick>
 81050de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81050e0:	e008      	b.n	81050f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81050e2:	f7fc fe9b 	bl	8101e1c <HAL_GetTick>
 81050e6:	4602      	mov	r2, r0
 81050e8:	68bb      	ldr	r3, [r7, #8]
 81050ea:	1ad3      	subs	r3, r2, r3
 81050ec:	2b02      	cmp	r3, #2
 81050ee:	d901      	bls.n	81050f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81050f0:	2303      	movs	r3, #3
 81050f2:	e088      	b.n	8105206 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81050f4:	4b46      	ldr	r3, [pc, #280]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81050f6:	681b      	ldr	r3, [r3, #0]
 81050f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81050fc:	2b00      	cmp	r3, #0
 81050fe:	d1f0      	bne.n	81050e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105100:	4b43      	ldr	r3, [pc, #268]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105104:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105108:	687b      	ldr	r3, [r7, #4]
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	031b      	lsls	r3, r3, #12
 810510e:	4940      	ldr	r1, [pc, #256]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105110:	4313      	orrs	r3, r2
 8105112:	628b      	str	r3, [r1, #40]	; 0x28
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	685b      	ldr	r3, [r3, #4]
 8105118:	3b01      	subs	r3, #1
 810511a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	689b      	ldr	r3, [r3, #8]
 8105122:	3b01      	subs	r3, #1
 8105124:	025b      	lsls	r3, r3, #9
 8105126:	b29b      	uxth	r3, r3
 8105128:	431a      	orrs	r2, r3
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	68db      	ldr	r3, [r3, #12]
 810512e:	3b01      	subs	r3, #1
 8105130:	041b      	lsls	r3, r3, #16
 8105132:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105136:	431a      	orrs	r2, r3
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	691b      	ldr	r3, [r3, #16]
 810513c:	3b01      	subs	r3, #1
 810513e:	061b      	lsls	r3, r3, #24
 8105140:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105144:	4932      	ldr	r1, [pc, #200]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105146:	4313      	orrs	r3, r2
 8105148:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810514a:	4b31      	ldr	r3, [pc, #196]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 810514c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810514e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105152:	687b      	ldr	r3, [r7, #4]
 8105154:	695b      	ldr	r3, [r3, #20]
 8105156:	492e      	ldr	r1, [pc, #184]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105158:	4313      	orrs	r3, r2
 810515a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810515c:	4b2c      	ldr	r3, [pc, #176]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 810515e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105160:	f023 0220 	bic.w	r2, r3, #32
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	699b      	ldr	r3, [r3, #24]
 8105168:	4929      	ldr	r1, [pc, #164]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 810516a:	4313      	orrs	r3, r2
 810516c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810516e:	4b28      	ldr	r3, [pc, #160]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105172:	4a27      	ldr	r2, [pc, #156]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105174:	f023 0310 	bic.w	r3, r3, #16
 8105178:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810517a:	4b25      	ldr	r3, [pc, #148]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 810517c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 810517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105182:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105186:	687a      	ldr	r2, [r7, #4]
 8105188:	69d2      	ldr	r2, [r2, #28]
 810518a:	00d2      	lsls	r2, r2, #3
 810518c:	4920      	ldr	r1, [pc, #128]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 810518e:	4313      	orrs	r3, r2
 8105190:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105192:	4b1f      	ldr	r3, [pc, #124]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105196:	4a1e      	ldr	r2, [pc, #120]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 8105198:	f043 0310 	orr.w	r3, r3, #16
 810519c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810519e:	683b      	ldr	r3, [r7, #0]
 81051a0:	2b00      	cmp	r3, #0
 81051a2:	d106      	bne.n	81051b2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81051a4:	4b1a      	ldr	r3, [pc, #104]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051a8:	4a19      	ldr	r2, [pc, #100]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 81051ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 81051b0:	e00f      	b.n	81051d2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81051b2:	683b      	ldr	r3, [r7, #0]
 81051b4:	2b01      	cmp	r3, #1
 81051b6:	d106      	bne.n	81051c6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81051b8:	4b15      	ldr	r3, [pc, #84]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051bc:	4a14      	ldr	r2, [pc, #80]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 81051c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 81051c4:	e005      	b.n	81051d2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81051c6:	4b12      	ldr	r3, [pc, #72]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81051ca:	4a11      	ldr	r2, [pc, #68]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 81051d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81051d2:	4b0f      	ldr	r3, [pc, #60]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051d4:	681b      	ldr	r3, [r3, #0]
 81051d6:	4a0e      	ldr	r2, [pc, #56]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 81051dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81051de:	f7fc fe1d 	bl	8101e1c <HAL_GetTick>
 81051e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81051e4:	e008      	b.n	81051f8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81051e6:	f7fc fe19 	bl	8101e1c <HAL_GetTick>
 81051ea:	4602      	mov	r2, r0
 81051ec:	68bb      	ldr	r3, [r7, #8]
 81051ee:	1ad3      	subs	r3, r2, r3
 81051f0:	2b02      	cmp	r3, #2
 81051f2:	d901      	bls.n	81051f8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81051f4:	2303      	movs	r3, #3
 81051f6:	e006      	b.n	8105206 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81051f8:	4b05      	ldr	r3, [pc, #20]	; (8105210 <RCCEx_PLL2_Config+0x160>)
 81051fa:	681b      	ldr	r3, [r3, #0]
 81051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105200:	2b00      	cmp	r3, #0
 8105202:	d0f0      	beq.n	81051e6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105204:	7bfb      	ldrb	r3, [r7, #15]
}
 8105206:	4618      	mov	r0, r3
 8105208:	3710      	adds	r7, #16
 810520a:	46bd      	mov	sp, r7
 810520c:	bd80      	pop	{r7, pc}
 810520e:	bf00      	nop
 8105210:	58024400 	.word	0x58024400

08105214 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105214:	b580      	push	{r7, lr}
 8105216:	b084      	sub	sp, #16
 8105218:	af00      	add	r7, sp, #0
 810521a:	6078      	str	r0, [r7, #4]
 810521c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810521e:	2300      	movs	r3, #0
 8105220:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105222:	4b54      	ldr	r3, [pc, #336]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105226:	f003 0303 	and.w	r3, r3, #3
 810522a:	2b03      	cmp	r3, #3
 810522c:	d101      	bne.n	8105232 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810522e:	2301      	movs	r3, #1
 8105230:	e09b      	b.n	810536a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105232:	4b50      	ldr	r3, [pc, #320]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105234:	681b      	ldr	r3, [r3, #0]
 8105236:	4a4f      	ldr	r2, [pc, #316]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810523c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810523e:	f7fc fded 	bl	8101e1c <HAL_GetTick>
 8105242:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105244:	e008      	b.n	8105258 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8105246:	f7fc fde9 	bl	8101e1c <HAL_GetTick>
 810524a:	4602      	mov	r2, r0
 810524c:	68bb      	ldr	r3, [r7, #8]
 810524e:	1ad3      	subs	r3, r2, r3
 8105250:	2b02      	cmp	r3, #2
 8105252:	d901      	bls.n	8105258 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105254:	2303      	movs	r3, #3
 8105256:	e088      	b.n	810536a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105258:	4b46      	ldr	r3, [pc, #280]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810525a:	681b      	ldr	r3, [r3, #0]
 810525c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105260:	2b00      	cmp	r3, #0
 8105262:	d1f0      	bne.n	8105246 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105264:	4b43      	ldr	r3, [pc, #268]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105268:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	681b      	ldr	r3, [r3, #0]
 8105270:	051b      	lsls	r3, r3, #20
 8105272:	4940      	ldr	r1, [pc, #256]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105274:	4313      	orrs	r3, r2
 8105276:	628b      	str	r3, [r1, #40]	; 0x28
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	685b      	ldr	r3, [r3, #4]
 810527c:	3b01      	subs	r3, #1
 810527e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105282:	687b      	ldr	r3, [r7, #4]
 8105284:	689b      	ldr	r3, [r3, #8]
 8105286:	3b01      	subs	r3, #1
 8105288:	025b      	lsls	r3, r3, #9
 810528a:	b29b      	uxth	r3, r3
 810528c:	431a      	orrs	r2, r3
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	68db      	ldr	r3, [r3, #12]
 8105292:	3b01      	subs	r3, #1
 8105294:	041b      	lsls	r3, r3, #16
 8105296:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 810529a:	431a      	orrs	r2, r3
 810529c:	687b      	ldr	r3, [r7, #4]
 810529e:	691b      	ldr	r3, [r3, #16]
 81052a0:	3b01      	subs	r3, #1
 81052a2:	061b      	lsls	r3, r3, #24
 81052a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 81052a8:	4932      	ldr	r1, [pc, #200]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052aa:	4313      	orrs	r3, r2
 81052ac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81052ae:	4b31      	ldr	r3, [pc, #196]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052b2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 81052b6:	687b      	ldr	r3, [r7, #4]
 81052b8:	695b      	ldr	r3, [r3, #20]
 81052ba:	492e      	ldr	r1, [pc, #184]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052bc:	4313      	orrs	r3, r2
 81052be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81052c0:	4b2c      	ldr	r3, [pc, #176]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052c4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	699b      	ldr	r3, [r3, #24]
 81052cc:	4929      	ldr	r1, [pc, #164]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052ce:	4313      	orrs	r3, r2
 81052d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81052d2:	4b28      	ldr	r3, [pc, #160]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052d6:	4a27      	ldr	r2, [pc, #156]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81052dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81052de:	4b25      	ldr	r3, [pc, #148]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81052e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81052e6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 81052ea:	687a      	ldr	r2, [r7, #4]
 81052ec:	69d2      	ldr	r2, [r2, #28]
 81052ee:	00d2      	lsls	r2, r2, #3
 81052f0:	4920      	ldr	r1, [pc, #128]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052f2:	4313      	orrs	r3, r2
 81052f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81052f6:	4b1f      	ldr	r3, [pc, #124]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81052fa:	4a1e      	ldr	r2, [pc, #120]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 81052fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8105302:	683b      	ldr	r3, [r7, #0]
 8105304:	2b00      	cmp	r3, #0
 8105306:	d106      	bne.n	8105316 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105308:	4b1a      	ldr	r3, [pc, #104]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810530a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810530c:	4a19      	ldr	r2, [pc, #100]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810530e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105314:	e00f      	b.n	8105336 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8105316:	683b      	ldr	r3, [r7, #0]
 8105318:	2b01      	cmp	r3, #1
 810531a:	d106      	bne.n	810532a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 810531c:	4b15      	ldr	r3, [pc, #84]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810531e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105320:	4a14      	ldr	r2, [pc, #80]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105328:	e005      	b.n	8105336 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 810532a:	4b12      	ldr	r3, [pc, #72]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810532c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810532e:	4a11      	ldr	r2, [pc, #68]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105336:	4b0f      	ldr	r3, [pc, #60]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 8105338:	681b      	ldr	r3, [r3, #0]
 810533a:	4a0e      	ldr	r2, [pc, #56]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810533c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105342:	f7fc fd6b 	bl	8101e1c <HAL_GetTick>
 8105346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105348:	e008      	b.n	810535c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810534a:	f7fc fd67 	bl	8101e1c <HAL_GetTick>
 810534e:	4602      	mov	r2, r0
 8105350:	68bb      	ldr	r3, [r7, #8]
 8105352:	1ad3      	subs	r3, r2, r3
 8105354:	2b02      	cmp	r3, #2
 8105356:	d901      	bls.n	810535c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105358:	2303      	movs	r3, #3
 810535a:	e006      	b.n	810536a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810535c:	4b05      	ldr	r3, [pc, #20]	; (8105374 <RCCEx_PLL3_Config+0x160>)
 810535e:	681b      	ldr	r3, [r3, #0]
 8105360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105364:	2b00      	cmp	r3, #0
 8105366:	d0f0      	beq.n	810534a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105368:	7bfb      	ldrb	r3, [r7, #15]
}
 810536a:	4618      	mov	r0, r3
 810536c:	3710      	adds	r7, #16
 810536e:	46bd      	mov	sp, r7
 8105370:	bd80      	pop	{r7, pc}
 8105372:	bf00      	nop
 8105374:	58024400 	.word	0x58024400

08105378 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8105378:	b580      	push	{r7, lr}
 810537a:	b082      	sub	sp, #8
 810537c:	af00      	add	r7, sp, #0
 810537e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	2b00      	cmp	r3, #0
 8105384:	d101      	bne.n	810538a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8105386:	2301      	movs	r3, #1
 8105388:	e042      	b.n	8105410 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8105390:	2b00      	cmp	r3, #0
 8105392:	d106      	bne.n	81053a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8105394:	687b      	ldr	r3, [r7, #4]
 8105396:	2200      	movs	r2, #0
 8105398:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810539c:	6878      	ldr	r0, [r7, #4]
 810539e:	f7fc fb0b 	bl	81019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81053a2:	687b      	ldr	r3, [r7, #4]
 81053a4:	2224      	movs	r2, #36	; 0x24
 81053a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 81053aa:	687b      	ldr	r3, [r7, #4]
 81053ac:	681b      	ldr	r3, [r3, #0]
 81053ae:	681a      	ldr	r2, [r3, #0]
 81053b0:	687b      	ldr	r3, [r7, #4]
 81053b2:	681b      	ldr	r3, [r3, #0]
 81053b4:	f022 0201 	bic.w	r2, r2, #1
 81053b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81053ba:	6878      	ldr	r0, [r7, #4]
 81053bc:	f000 f8ba 	bl	8105534 <UART_SetConfig>
 81053c0:	4603      	mov	r3, r0
 81053c2:	2b01      	cmp	r3, #1
 81053c4:	d101      	bne.n	81053ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 81053c6:	2301      	movs	r3, #1
 81053c8:	e022      	b.n	8105410 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81053ce:	2b00      	cmp	r3, #0
 81053d0:	d002      	beq.n	81053d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 81053d2:	6878      	ldr	r0, [r7, #4]
 81053d4:	f000 fe16 	bl	8106004 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	681b      	ldr	r3, [r3, #0]
 81053dc:	685a      	ldr	r2, [r3, #4]
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 81053e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	689a      	ldr	r2, [r3, #8]
 81053ee:	687b      	ldr	r3, [r7, #4]
 81053f0:	681b      	ldr	r3, [r3, #0]
 81053f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 81053f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 81053f8:	687b      	ldr	r3, [r7, #4]
 81053fa:	681b      	ldr	r3, [r3, #0]
 81053fc:	681a      	ldr	r2, [r3, #0]
 81053fe:	687b      	ldr	r3, [r7, #4]
 8105400:	681b      	ldr	r3, [r3, #0]
 8105402:	f042 0201 	orr.w	r2, r2, #1
 8105406:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8105408:	6878      	ldr	r0, [r7, #4]
 810540a:	f000 fe9d 	bl	8106148 <UART_CheckIdleState>
 810540e:	4603      	mov	r3, r0
}
 8105410:	4618      	mov	r0, r3
 8105412:	3708      	adds	r7, #8
 8105414:	46bd      	mov	sp, r7
 8105416:	bd80      	pop	{r7, pc}

08105418 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8105418:	b580      	push	{r7, lr}
 810541a:	b08a      	sub	sp, #40	; 0x28
 810541c:	af02      	add	r7, sp, #8
 810541e:	60f8      	str	r0, [r7, #12]
 8105420:	60b9      	str	r1, [r7, #8]
 8105422:	603b      	str	r3, [r7, #0]
 8105424:	4613      	mov	r3, r2
 8105426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8105428:	68fb      	ldr	r3, [r7, #12]
 810542a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 810542e:	2b20      	cmp	r3, #32
 8105430:	d17b      	bne.n	810552a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8105432:	68bb      	ldr	r3, [r7, #8]
 8105434:	2b00      	cmp	r3, #0
 8105436:	d002      	beq.n	810543e <HAL_UART_Transmit+0x26>
 8105438:	88fb      	ldrh	r3, [r7, #6]
 810543a:	2b00      	cmp	r3, #0
 810543c:	d101      	bne.n	8105442 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810543e:	2301      	movs	r3, #1
 8105440:	e074      	b.n	810552c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105442:	68fb      	ldr	r3, [r7, #12]
 8105444:	2200      	movs	r2, #0
 8105446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810544a:	68fb      	ldr	r3, [r7, #12]
 810544c:	2221      	movs	r2, #33	; 0x21
 810544e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8105452:	f7fc fce3 	bl	8101e1c <HAL_GetTick>
 8105456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8105458:	68fb      	ldr	r3, [r7, #12]
 810545a:	88fa      	ldrh	r2, [r7, #6]
 810545c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8105460:	68fb      	ldr	r3, [r7, #12]
 8105462:	88fa      	ldrh	r2, [r7, #6]
 8105464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8105468:	68fb      	ldr	r3, [r7, #12]
 810546a:	689b      	ldr	r3, [r3, #8]
 810546c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105470:	d108      	bne.n	8105484 <HAL_UART_Transmit+0x6c>
 8105472:	68fb      	ldr	r3, [r7, #12]
 8105474:	691b      	ldr	r3, [r3, #16]
 8105476:	2b00      	cmp	r3, #0
 8105478:	d104      	bne.n	8105484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810547a:	2300      	movs	r3, #0
 810547c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810547e:	68bb      	ldr	r3, [r7, #8]
 8105480:	61bb      	str	r3, [r7, #24]
 8105482:	e003      	b.n	810548c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8105484:	68bb      	ldr	r3, [r7, #8]
 8105486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8105488:	2300      	movs	r3, #0
 810548a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 810548c:	e030      	b.n	81054f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 810548e:	683b      	ldr	r3, [r7, #0]
 8105490:	9300      	str	r3, [sp, #0]
 8105492:	697b      	ldr	r3, [r7, #20]
 8105494:	2200      	movs	r2, #0
 8105496:	2180      	movs	r1, #128	; 0x80
 8105498:	68f8      	ldr	r0, [r7, #12]
 810549a:	f000 feff 	bl	810629c <UART_WaitOnFlagUntilTimeout>
 810549e:	4603      	mov	r3, r0
 81054a0:	2b00      	cmp	r3, #0
 81054a2:	d005      	beq.n	81054b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81054a4:	68fb      	ldr	r3, [r7, #12]
 81054a6:	2220      	movs	r2, #32
 81054a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 81054ac:	2303      	movs	r3, #3
 81054ae:	e03d      	b.n	810552c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81054b0:	69fb      	ldr	r3, [r7, #28]
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	d10b      	bne.n	81054ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81054b6:	69bb      	ldr	r3, [r7, #24]
 81054b8:	881b      	ldrh	r3, [r3, #0]
 81054ba:	461a      	mov	r2, r3
 81054bc:	68fb      	ldr	r3, [r7, #12]
 81054be:	681b      	ldr	r3, [r3, #0]
 81054c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81054c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 81054c6:	69bb      	ldr	r3, [r7, #24]
 81054c8:	3302      	adds	r3, #2
 81054ca:	61bb      	str	r3, [r7, #24]
 81054cc:	e007      	b.n	81054de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81054ce:	69fb      	ldr	r3, [r7, #28]
 81054d0:	781a      	ldrb	r2, [r3, #0]
 81054d2:	68fb      	ldr	r3, [r7, #12]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 81054d8:	69fb      	ldr	r3, [r7, #28]
 81054da:	3301      	adds	r3, #1
 81054dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81054de:	68fb      	ldr	r3, [r7, #12]
 81054e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81054e4:	b29b      	uxth	r3, r3
 81054e6:	3b01      	subs	r3, #1
 81054e8:	b29a      	uxth	r2, r3
 81054ea:	68fb      	ldr	r3, [r7, #12]
 81054ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 81054f6:	b29b      	uxth	r3, r3
 81054f8:	2b00      	cmp	r3, #0
 81054fa:	d1c8      	bne.n	810548e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 81054fc:	683b      	ldr	r3, [r7, #0]
 81054fe:	9300      	str	r3, [sp, #0]
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	2200      	movs	r2, #0
 8105504:	2140      	movs	r1, #64	; 0x40
 8105506:	68f8      	ldr	r0, [r7, #12]
 8105508:	f000 fec8 	bl	810629c <UART_WaitOnFlagUntilTimeout>
 810550c:	4603      	mov	r3, r0
 810550e:	2b00      	cmp	r3, #0
 8105510:	d005      	beq.n	810551e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8105512:	68fb      	ldr	r3, [r7, #12]
 8105514:	2220      	movs	r2, #32
 8105516:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 810551a:	2303      	movs	r3, #3
 810551c:	e006      	b.n	810552c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 810551e:	68fb      	ldr	r3, [r7, #12]
 8105520:	2220      	movs	r2, #32
 8105522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8105526:	2300      	movs	r3, #0
 8105528:	e000      	b.n	810552c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810552a:	2302      	movs	r3, #2
  }
}
 810552c:	4618      	mov	r0, r3
 810552e:	3720      	adds	r7, #32
 8105530:	46bd      	mov	sp, r7
 8105532:	bd80      	pop	{r7, pc}

08105534 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8105534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105538:	b092      	sub	sp, #72	; 0x48
 810553a:	af00      	add	r7, sp, #0
 810553c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810553e:	2300      	movs	r3, #0
 8105540:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8105544:	697b      	ldr	r3, [r7, #20]
 8105546:	689a      	ldr	r2, [r3, #8]
 8105548:	697b      	ldr	r3, [r7, #20]
 810554a:	691b      	ldr	r3, [r3, #16]
 810554c:	431a      	orrs	r2, r3
 810554e:	697b      	ldr	r3, [r7, #20]
 8105550:	695b      	ldr	r3, [r3, #20]
 8105552:	431a      	orrs	r2, r3
 8105554:	697b      	ldr	r3, [r7, #20]
 8105556:	69db      	ldr	r3, [r3, #28]
 8105558:	4313      	orrs	r3, r2
 810555a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810555c:	697b      	ldr	r3, [r7, #20]
 810555e:	681b      	ldr	r3, [r3, #0]
 8105560:	681a      	ldr	r2, [r3, #0]
 8105562:	4bbd      	ldr	r3, [pc, #756]	; (8105858 <UART_SetConfig+0x324>)
 8105564:	4013      	ands	r3, r2
 8105566:	697a      	ldr	r2, [r7, #20]
 8105568:	6812      	ldr	r2, [r2, #0]
 810556a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810556c:	430b      	orrs	r3, r1
 810556e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8105570:	697b      	ldr	r3, [r7, #20]
 8105572:	681b      	ldr	r3, [r3, #0]
 8105574:	685b      	ldr	r3, [r3, #4]
 8105576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 810557a:	697b      	ldr	r3, [r7, #20]
 810557c:	68da      	ldr	r2, [r3, #12]
 810557e:	697b      	ldr	r3, [r7, #20]
 8105580:	681b      	ldr	r3, [r3, #0]
 8105582:	430a      	orrs	r2, r1
 8105584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8105586:	697b      	ldr	r3, [r7, #20]
 8105588:	699b      	ldr	r3, [r3, #24]
 810558a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810558c:	697b      	ldr	r3, [r7, #20]
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	4ab2      	ldr	r2, [pc, #712]	; (810585c <UART_SetConfig+0x328>)
 8105592:	4293      	cmp	r3, r2
 8105594:	d004      	beq.n	81055a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8105596:	697b      	ldr	r3, [r7, #20]
 8105598:	6a1b      	ldr	r3, [r3, #32]
 810559a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 810559c:	4313      	orrs	r3, r2
 810559e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81055a0:	697b      	ldr	r3, [r7, #20]
 81055a2:	681b      	ldr	r3, [r3, #0]
 81055a4:	689b      	ldr	r3, [r3, #8]
 81055a6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 81055aa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 81055ae:	697a      	ldr	r2, [r7, #20]
 81055b0:	6812      	ldr	r2, [r2, #0]
 81055b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81055b4:	430b      	orrs	r3, r1
 81055b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81055b8:	697b      	ldr	r3, [r7, #20]
 81055ba:	681b      	ldr	r3, [r3, #0]
 81055bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81055be:	f023 010f 	bic.w	r1, r3, #15
 81055c2:	697b      	ldr	r3, [r7, #20]
 81055c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 81055c6:	697b      	ldr	r3, [r7, #20]
 81055c8:	681b      	ldr	r3, [r3, #0]
 81055ca:	430a      	orrs	r2, r1
 81055cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81055ce:	697b      	ldr	r3, [r7, #20]
 81055d0:	681b      	ldr	r3, [r3, #0]
 81055d2:	4aa3      	ldr	r2, [pc, #652]	; (8105860 <UART_SetConfig+0x32c>)
 81055d4:	4293      	cmp	r3, r2
 81055d6:	d177      	bne.n	81056c8 <UART_SetConfig+0x194>
 81055d8:	4ba2      	ldr	r3, [pc, #648]	; (8105864 <UART_SetConfig+0x330>)
 81055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81055dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81055e0:	2b28      	cmp	r3, #40	; 0x28
 81055e2:	d86d      	bhi.n	81056c0 <UART_SetConfig+0x18c>
 81055e4:	a201      	add	r2, pc, #4	; (adr r2, 81055ec <UART_SetConfig+0xb8>)
 81055e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81055ea:	bf00      	nop
 81055ec:	08105691 	.word	0x08105691
 81055f0:	081056c1 	.word	0x081056c1
 81055f4:	081056c1 	.word	0x081056c1
 81055f8:	081056c1 	.word	0x081056c1
 81055fc:	081056c1 	.word	0x081056c1
 8105600:	081056c1 	.word	0x081056c1
 8105604:	081056c1 	.word	0x081056c1
 8105608:	081056c1 	.word	0x081056c1
 810560c:	08105699 	.word	0x08105699
 8105610:	081056c1 	.word	0x081056c1
 8105614:	081056c1 	.word	0x081056c1
 8105618:	081056c1 	.word	0x081056c1
 810561c:	081056c1 	.word	0x081056c1
 8105620:	081056c1 	.word	0x081056c1
 8105624:	081056c1 	.word	0x081056c1
 8105628:	081056c1 	.word	0x081056c1
 810562c:	081056a1 	.word	0x081056a1
 8105630:	081056c1 	.word	0x081056c1
 8105634:	081056c1 	.word	0x081056c1
 8105638:	081056c1 	.word	0x081056c1
 810563c:	081056c1 	.word	0x081056c1
 8105640:	081056c1 	.word	0x081056c1
 8105644:	081056c1 	.word	0x081056c1
 8105648:	081056c1 	.word	0x081056c1
 810564c:	081056a9 	.word	0x081056a9
 8105650:	081056c1 	.word	0x081056c1
 8105654:	081056c1 	.word	0x081056c1
 8105658:	081056c1 	.word	0x081056c1
 810565c:	081056c1 	.word	0x081056c1
 8105660:	081056c1 	.word	0x081056c1
 8105664:	081056c1 	.word	0x081056c1
 8105668:	081056c1 	.word	0x081056c1
 810566c:	081056b1 	.word	0x081056b1
 8105670:	081056c1 	.word	0x081056c1
 8105674:	081056c1 	.word	0x081056c1
 8105678:	081056c1 	.word	0x081056c1
 810567c:	081056c1 	.word	0x081056c1
 8105680:	081056c1 	.word	0x081056c1
 8105684:	081056c1 	.word	0x081056c1
 8105688:	081056c1 	.word	0x081056c1
 810568c:	081056b9 	.word	0x081056b9
 8105690:	2301      	movs	r3, #1
 8105692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105696:	e220      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105698:	2304      	movs	r3, #4
 810569a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810569e:	e21c      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056a0:	2308      	movs	r3, #8
 81056a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056a6:	e218      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056a8:	2310      	movs	r3, #16
 81056aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056ae:	e214      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056b0:	2320      	movs	r3, #32
 81056b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056b6:	e210      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056b8:	2340      	movs	r3, #64	; 0x40
 81056ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056be:	e20c      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056c0:	2380      	movs	r3, #128	; 0x80
 81056c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81056c6:	e208      	b.n	8105ada <UART_SetConfig+0x5a6>
 81056c8:	697b      	ldr	r3, [r7, #20]
 81056ca:	681b      	ldr	r3, [r3, #0]
 81056cc:	4a66      	ldr	r2, [pc, #408]	; (8105868 <UART_SetConfig+0x334>)
 81056ce:	4293      	cmp	r3, r2
 81056d0:	d130      	bne.n	8105734 <UART_SetConfig+0x200>
 81056d2:	4b64      	ldr	r3, [pc, #400]	; (8105864 <UART_SetConfig+0x330>)
 81056d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81056d6:	f003 0307 	and.w	r3, r3, #7
 81056da:	2b05      	cmp	r3, #5
 81056dc:	d826      	bhi.n	810572c <UART_SetConfig+0x1f8>
 81056de:	a201      	add	r2, pc, #4	; (adr r2, 81056e4 <UART_SetConfig+0x1b0>)
 81056e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81056e4:	081056fd 	.word	0x081056fd
 81056e8:	08105705 	.word	0x08105705
 81056ec:	0810570d 	.word	0x0810570d
 81056f0:	08105715 	.word	0x08105715
 81056f4:	0810571d 	.word	0x0810571d
 81056f8:	08105725 	.word	0x08105725
 81056fc:	2300      	movs	r3, #0
 81056fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105702:	e1ea      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105704:	2304      	movs	r3, #4
 8105706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810570a:	e1e6      	b.n	8105ada <UART_SetConfig+0x5a6>
 810570c:	2308      	movs	r3, #8
 810570e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105712:	e1e2      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105714:	2310      	movs	r3, #16
 8105716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810571a:	e1de      	b.n	8105ada <UART_SetConfig+0x5a6>
 810571c:	2320      	movs	r3, #32
 810571e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105722:	e1da      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105724:	2340      	movs	r3, #64	; 0x40
 8105726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810572a:	e1d6      	b.n	8105ada <UART_SetConfig+0x5a6>
 810572c:	2380      	movs	r3, #128	; 0x80
 810572e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105732:	e1d2      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105734:	697b      	ldr	r3, [r7, #20]
 8105736:	681b      	ldr	r3, [r3, #0]
 8105738:	4a4c      	ldr	r2, [pc, #304]	; (810586c <UART_SetConfig+0x338>)
 810573a:	4293      	cmp	r3, r2
 810573c:	d130      	bne.n	81057a0 <UART_SetConfig+0x26c>
 810573e:	4b49      	ldr	r3, [pc, #292]	; (8105864 <UART_SetConfig+0x330>)
 8105740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105742:	f003 0307 	and.w	r3, r3, #7
 8105746:	2b05      	cmp	r3, #5
 8105748:	d826      	bhi.n	8105798 <UART_SetConfig+0x264>
 810574a:	a201      	add	r2, pc, #4	; (adr r2, 8105750 <UART_SetConfig+0x21c>)
 810574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105750:	08105769 	.word	0x08105769
 8105754:	08105771 	.word	0x08105771
 8105758:	08105779 	.word	0x08105779
 810575c:	08105781 	.word	0x08105781
 8105760:	08105789 	.word	0x08105789
 8105764:	08105791 	.word	0x08105791
 8105768:	2300      	movs	r3, #0
 810576a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810576e:	e1b4      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105770:	2304      	movs	r3, #4
 8105772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105776:	e1b0      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105778:	2308      	movs	r3, #8
 810577a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810577e:	e1ac      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105780:	2310      	movs	r3, #16
 8105782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105786:	e1a8      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105788:	2320      	movs	r3, #32
 810578a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810578e:	e1a4      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105790:	2340      	movs	r3, #64	; 0x40
 8105792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105796:	e1a0      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105798:	2380      	movs	r3, #128	; 0x80
 810579a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810579e:	e19c      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057a0:	697b      	ldr	r3, [r7, #20]
 81057a2:	681b      	ldr	r3, [r3, #0]
 81057a4:	4a32      	ldr	r2, [pc, #200]	; (8105870 <UART_SetConfig+0x33c>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d130      	bne.n	810580c <UART_SetConfig+0x2d8>
 81057aa:	4b2e      	ldr	r3, [pc, #184]	; (8105864 <UART_SetConfig+0x330>)
 81057ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81057ae:	f003 0307 	and.w	r3, r3, #7
 81057b2:	2b05      	cmp	r3, #5
 81057b4:	d826      	bhi.n	8105804 <UART_SetConfig+0x2d0>
 81057b6:	a201      	add	r2, pc, #4	; (adr r2, 81057bc <UART_SetConfig+0x288>)
 81057b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81057bc:	081057d5 	.word	0x081057d5
 81057c0:	081057dd 	.word	0x081057dd
 81057c4:	081057e5 	.word	0x081057e5
 81057c8:	081057ed 	.word	0x081057ed
 81057cc:	081057f5 	.word	0x081057f5
 81057d0:	081057fd 	.word	0x081057fd
 81057d4:	2300      	movs	r3, #0
 81057d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057da:	e17e      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057dc:	2304      	movs	r3, #4
 81057de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057e2:	e17a      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057e4:	2308      	movs	r3, #8
 81057e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057ea:	e176      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057ec:	2310      	movs	r3, #16
 81057ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057f2:	e172      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057f4:	2320      	movs	r3, #32
 81057f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81057fa:	e16e      	b.n	8105ada <UART_SetConfig+0x5a6>
 81057fc:	2340      	movs	r3, #64	; 0x40
 81057fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105802:	e16a      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105804:	2380      	movs	r3, #128	; 0x80
 8105806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810580a:	e166      	b.n	8105ada <UART_SetConfig+0x5a6>
 810580c:	697b      	ldr	r3, [r7, #20]
 810580e:	681b      	ldr	r3, [r3, #0]
 8105810:	4a18      	ldr	r2, [pc, #96]	; (8105874 <UART_SetConfig+0x340>)
 8105812:	4293      	cmp	r3, r2
 8105814:	d140      	bne.n	8105898 <UART_SetConfig+0x364>
 8105816:	4b13      	ldr	r3, [pc, #76]	; (8105864 <UART_SetConfig+0x330>)
 8105818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810581a:	f003 0307 	and.w	r3, r3, #7
 810581e:	2b05      	cmp	r3, #5
 8105820:	d836      	bhi.n	8105890 <UART_SetConfig+0x35c>
 8105822:	a201      	add	r2, pc, #4	; (adr r2, 8105828 <UART_SetConfig+0x2f4>)
 8105824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105828:	08105841 	.word	0x08105841
 810582c:	08105849 	.word	0x08105849
 8105830:	08105851 	.word	0x08105851
 8105834:	08105879 	.word	0x08105879
 8105838:	08105881 	.word	0x08105881
 810583c:	08105889 	.word	0x08105889
 8105840:	2300      	movs	r3, #0
 8105842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105846:	e148      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105848:	2304      	movs	r3, #4
 810584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810584e:	e144      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105850:	2308      	movs	r3, #8
 8105852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105856:	e140      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105858:	cfff69f3 	.word	0xcfff69f3
 810585c:	58000c00 	.word	0x58000c00
 8105860:	40011000 	.word	0x40011000
 8105864:	58024400 	.word	0x58024400
 8105868:	40004400 	.word	0x40004400
 810586c:	40004800 	.word	0x40004800
 8105870:	40004c00 	.word	0x40004c00
 8105874:	40005000 	.word	0x40005000
 8105878:	2310      	movs	r3, #16
 810587a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810587e:	e12c      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105880:	2320      	movs	r3, #32
 8105882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105886:	e128      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105888:	2340      	movs	r3, #64	; 0x40
 810588a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810588e:	e124      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105890:	2380      	movs	r3, #128	; 0x80
 8105892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105896:	e120      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105898:	697b      	ldr	r3, [r7, #20]
 810589a:	681b      	ldr	r3, [r3, #0]
 810589c:	4acb      	ldr	r2, [pc, #812]	; (8105bcc <UART_SetConfig+0x698>)
 810589e:	4293      	cmp	r3, r2
 81058a0:	d176      	bne.n	8105990 <UART_SetConfig+0x45c>
 81058a2:	4bcb      	ldr	r3, [pc, #812]	; (8105bd0 <UART_SetConfig+0x69c>)
 81058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81058a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 81058aa:	2b28      	cmp	r3, #40	; 0x28
 81058ac:	d86c      	bhi.n	8105988 <UART_SetConfig+0x454>
 81058ae:	a201      	add	r2, pc, #4	; (adr r2, 81058b4 <UART_SetConfig+0x380>)
 81058b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81058b4:	08105959 	.word	0x08105959
 81058b8:	08105989 	.word	0x08105989
 81058bc:	08105989 	.word	0x08105989
 81058c0:	08105989 	.word	0x08105989
 81058c4:	08105989 	.word	0x08105989
 81058c8:	08105989 	.word	0x08105989
 81058cc:	08105989 	.word	0x08105989
 81058d0:	08105989 	.word	0x08105989
 81058d4:	08105961 	.word	0x08105961
 81058d8:	08105989 	.word	0x08105989
 81058dc:	08105989 	.word	0x08105989
 81058e0:	08105989 	.word	0x08105989
 81058e4:	08105989 	.word	0x08105989
 81058e8:	08105989 	.word	0x08105989
 81058ec:	08105989 	.word	0x08105989
 81058f0:	08105989 	.word	0x08105989
 81058f4:	08105969 	.word	0x08105969
 81058f8:	08105989 	.word	0x08105989
 81058fc:	08105989 	.word	0x08105989
 8105900:	08105989 	.word	0x08105989
 8105904:	08105989 	.word	0x08105989
 8105908:	08105989 	.word	0x08105989
 810590c:	08105989 	.word	0x08105989
 8105910:	08105989 	.word	0x08105989
 8105914:	08105971 	.word	0x08105971
 8105918:	08105989 	.word	0x08105989
 810591c:	08105989 	.word	0x08105989
 8105920:	08105989 	.word	0x08105989
 8105924:	08105989 	.word	0x08105989
 8105928:	08105989 	.word	0x08105989
 810592c:	08105989 	.word	0x08105989
 8105930:	08105989 	.word	0x08105989
 8105934:	08105979 	.word	0x08105979
 8105938:	08105989 	.word	0x08105989
 810593c:	08105989 	.word	0x08105989
 8105940:	08105989 	.word	0x08105989
 8105944:	08105989 	.word	0x08105989
 8105948:	08105989 	.word	0x08105989
 810594c:	08105989 	.word	0x08105989
 8105950:	08105989 	.word	0x08105989
 8105954:	08105981 	.word	0x08105981
 8105958:	2301      	movs	r3, #1
 810595a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810595e:	e0bc      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105960:	2304      	movs	r3, #4
 8105962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105966:	e0b8      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105968:	2308      	movs	r3, #8
 810596a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810596e:	e0b4      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105970:	2310      	movs	r3, #16
 8105972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105976:	e0b0      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105978:	2320      	movs	r3, #32
 810597a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810597e:	e0ac      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105980:	2340      	movs	r3, #64	; 0x40
 8105982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105986:	e0a8      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105988:	2380      	movs	r3, #128	; 0x80
 810598a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810598e:	e0a4      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105990:	697b      	ldr	r3, [r7, #20]
 8105992:	681b      	ldr	r3, [r3, #0]
 8105994:	4a8f      	ldr	r2, [pc, #572]	; (8105bd4 <UART_SetConfig+0x6a0>)
 8105996:	4293      	cmp	r3, r2
 8105998:	d130      	bne.n	81059fc <UART_SetConfig+0x4c8>
 810599a:	4b8d      	ldr	r3, [pc, #564]	; (8105bd0 <UART_SetConfig+0x69c>)
 810599c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810599e:	f003 0307 	and.w	r3, r3, #7
 81059a2:	2b05      	cmp	r3, #5
 81059a4:	d826      	bhi.n	81059f4 <UART_SetConfig+0x4c0>
 81059a6:	a201      	add	r2, pc, #4	; (adr r2, 81059ac <UART_SetConfig+0x478>)
 81059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81059ac:	081059c5 	.word	0x081059c5
 81059b0:	081059cd 	.word	0x081059cd
 81059b4:	081059d5 	.word	0x081059d5
 81059b8:	081059dd 	.word	0x081059dd
 81059bc:	081059e5 	.word	0x081059e5
 81059c0:	081059ed 	.word	0x081059ed
 81059c4:	2300      	movs	r3, #0
 81059c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059ca:	e086      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059cc:	2304      	movs	r3, #4
 81059ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059d2:	e082      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059d4:	2308      	movs	r3, #8
 81059d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059da:	e07e      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059dc:	2310      	movs	r3, #16
 81059de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059e2:	e07a      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059e4:	2320      	movs	r3, #32
 81059e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059ea:	e076      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059ec:	2340      	movs	r3, #64	; 0x40
 81059ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059f2:	e072      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059f4:	2380      	movs	r3, #128	; 0x80
 81059f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81059fa:	e06e      	b.n	8105ada <UART_SetConfig+0x5a6>
 81059fc:	697b      	ldr	r3, [r7, #20]
 81059fe:	681b      	ldr	r3, [r3, #0]
 8105a00:	4a75      	ldr	r2, [pc, #468]	; (8105bd8 <UART_SetConfig+0x6a4>)
 8105a02:	4293      	cmp	r3, r2
 8105a04:	d130      	bne.n	8105a68 <UART_SetConfig+0x534>
 8105a06:	4b72      	ldr	r3, [pc, #456]	; (8105bd0 <UART_SetConfig+0x69c>)
 8105a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8105a0a:	f003 0307 	and.w	r3, r3, #7
 8105a0e:	2b05      	cmp	r3, #5
 8105a10:	d826      	bhi.n	8105a60 <UART_SetConfig+0x52c>
 8105a12:	a201      	add	r2, pc, #4	; (adr r2, 8105a18 <UART_SetConfig+0x4e4>)
 8105a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a18:	08105a31 	.word	0x08105a31
 8105a1c:	08105a39 	.word	0x08105a39
 8105a20:	08105a41 	.word	0x08105a41
 8105a24:	08105a49 	.word	0x08105a49
 8105a28:	08105a51 	.word	0x08105a51
 8105a2c:	08105a59 	.word	0x08105a59
 8105a30:	2300      	movs	r3, #0
 8105a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a36:	e050      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a38:	2304      	movs	r3, #4
 8105a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a3e:	e04c      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a40:	2308      	movs	r3, #8
 8105a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a46:	e048      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a48:	2310      	movs	r3, #16
 8105a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a4e:	e044      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a50:	2320      	movs	r3, #32
 8105a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a56:	e040      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a58:	2340      	movs	r3, #64	; 0x40
 8105a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a5e:	e03c      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a60:	2380      	movs	r3, #128	; 0x80
 8105a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105a66:	e038      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105a68:	697b      	ldr	r3, [r7, #20]
 8105a6a:	681b      	ldr	r3, [r3, #0]
 8105a6c:	4a5b      	ldr	r2, [pc, #364]	; (8105bdc <UART_SetConfig+0x6a8>)
 8105a6e:	4293      	cmp	r3, r2
 8105a70:	d130      	bne.n	8105ad4 <UART_SetConfig+0x5a0>
 8105a72:	4b57      	ldr	r3, [pc, #348]	; (8105bd0 <UART_SetConfig+0x69c>)
 8105a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105a76:	f003 0307 	and.w	r3, r3, #7
 8105a7a:	2b05      	cmp	r3, #5
 8105a7c:	d826      	bhi.n	8105acc <UART_SetConfig+0x598>
 8105a7e:	a201      	add	r2, pc, #4	; (adr r2, 8105a84 <UART_SetConfig+0x550>)
 8105a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a84:	08105a9d 	.word	0x08105a9d
 8105a88:	08105aa5 	.word	0x08105aa5
 8105a8c:	08105aad 	.word	0x08105aad
 8105a90:	08105ab5 	.word	0x08105ab5
 8105a94:	08105abd 	.word	0x08105abd
 8105a98:	08105ac5 	.word	0x08105ac5
 8105a9c:	2302      	movs	r3, #2
 8105a9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aa2:	e01a      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105aa4:	2304      	movs	r3, #4
 8105aa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aaa:	e016      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105aac:	2308      	movs	r3, #8
 8105aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ab2:	e012      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105ab4:	2310      	movs	r3, #16
 8105ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aba:	e00e      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105abc:	2320      	movs	r3, #32
 8105abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ac2:	e00a      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105ac4:	2340      	movs	r3, #64	; 0x40
 8105ac6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105aca:	e006      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105acc:	2380      	movs	r3, #128	; 0x80
 8105ace:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8105ad2:	e002      	b.n	8105ada <UART_SetConfig+0x5a6>
 8105ad4:	2380      	movs	r3, #128	; 0x80
 8105ad6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8105ada:	697b      	ldr	r3, [r7, #20]
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	4a3f      	ldr	r2, [pc, #252]	; (8105bdc <UART_SetConfig+0x6a8>)
 8105ae0:	4293      	cmp	r3, r2
 8105ae2:	f040 80f8 	bne.w	8105cd6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8105ae6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105aea:	2b20      	cmp	r3, #32
 8105aec:	dc46      	bgt.n	8105b7c <UART_SetConfig+0x648>
 8105aee:	2b02      	cmp	r3, #2
 8105af0:	f2c0 8082 	blt.w	8105bf8 <UART_SetConfig+0x6c4>
 8105af4:	3b02      	subs	r3, #2
 8105af6:	2b1e      	cmp	r3, #30
 8105af8:	d87e      	bhi.n	8105bf8 <UART_SetConfig+0x6c4>
 8105afa:	a201      	add	r2, pc, #4	; (adr r2, 8105b00 <UART_SetConfig+0x5cc>)
 8105afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105b00:	08105b83 	.word	0x08105b83
 8105b04:	08105bf9 	.word	0x08105bf9
 8105b08:	08105b8b 	.word	0x08105b8b
 8105b0c:	08105bf9 	.word	0x08105bf9
 8105b10:	08105bf9 	.word	0x08105bf9
 8105b14:	08105bf9 	.word	0x08105bf9
 8105b18:	08105b9b 	.word	0x08105b9b
 8105b1c:	08105bf9 	.word	0x08105bf9
 8105b20:	08105bf9 	.word	0x08105bf9
 8105b24:	08105bf9 	.word	0x08105bf9
 8105b28:	08105bf9 	.word	0x08105bf9
 8105b2c:	08105bf9 	.word	0x08105bf9
 8105b30:	08105bf9 	.word	0x08105bf9
 8105b34:	08105bf9 	.word	0x08105bf9
 8105b38:	08105bab 	.word	0x08105bab
 8105b3c:	08105bf9 	.word	0x08105bf9
 8105b40:	08105bf9 	.word	0x08105bf9
 8105b44:	08105bf9 	.word	0x08105bf9
 8105b48:	08105bf9 	.word	0x08105bf9
 8105b4c:	08105bf9 	.word	0x08105bf9
 8105b50:	08105bf9 	.word	0x08105bf9
 8105b54:	08105bf9 	.word	0x08105bf9
 8105b58:	08105bf9 	.word	0x08105bf9
 8105b5c:	08105bf9 	.word	0x08105bf9
 8105b60:	08105bf9 	.word	0x08105bf9
 8105b64:	08105bf9 	.word	0x08105bf9
 8105b68:	08105bf9 	.word	0x08105bf9
 8105b6c:	08105bf9 	.word	0x08105bf9
 8105b70:	08105bf9 	.word	0x08105bf9
 8105b74:	08105bf9 	.word	0x08105bf9
 8105b78:	08105beb 	.word	0x08105beb
 8105b7c:	2b40      	cmp	r3, #64	; 0x40
 8105b7e:	d037      	beq.n	8105bf0 <UART_SetConfig+0x6bc>
 8105b80:	e03a      	b.n	8105bf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8105b82:	f7fe ffd7 	bl	8104b34 <HAL_RCCEx_GetD3PCLK1Freq>
 8105b86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105b88:	e03c      	b.n	8105c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105b8e:	4618      	mov	r0, r3
 8105b90:	f7fe ffe6 	bl	8104b60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105b96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105b98:	e034      	b.n	8105c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105b9a:	f107 0318 	add.w	r3, r7, #24
 8105b9e:	4618      	mov	r0, r3
 8105ba0:	f7ff f932 	bl	8104e08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105ba4:	69fb      	ldr	r3, [r7, #28]
 8105ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ba8:	e02c      	b.n	8105c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105baa:	4b09      	ldr	r3, [pc, #36]	; (8105bd0 <UART_SetConfig+0x69c>)
 8105bac:	681b      	ldr	r3, [r3, #0]
 8105bae:	f003 0320 	and.w	r3, r3, #32
 8105bb2:	2b00      	cmp	r3, #0
 8105bb4:	d016      	beq.n	8105be4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105bb6:	4b06      	ldr	r3, [pc, #24]	; (8105bd0 <UART_SetConfig+0x69c>)
 8105bb8:	681b      	ldr	r3, [r3, #0]
 8105bba:	08db      	lsrs	r3, r3, #3
 8105bbc:	f003 0303 	and.w	r3, r3, #3
 8105bc0:	4a07      	ldr	r2, [pc, #28]	; (8105be0 <UART_SetConfig+0x6ac>)
 8105bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8105bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105bc8:	e01c      	b.n	8105c04 <UART_SetConfig+0x6d0>
 8105bca:	bf00      	nop
 8105bcc:	40011400 	.word	0x40011400
 8105bd0:	58024400 	.word	0x58024400
 8105bd4:	40007800 	.word	0x40007800
 8105bd8:	40007c00 	.word	0x40007c00
 8105bdc:	58000c00 	.word	0x58000c00
 8105be0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8105be4:	4b9d      	ldr	r3, [pc, #628]	; (8105e5c <UART_SetConfig+0x928>)
 8105be6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105be8:	e00c      	b.n	8105c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105bea:	4b9d      	ldr	r3, [pc, #628]	; (8105e60 <UART_SetConfig+0x92c>)
 8105bec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105bee:	e009      	b.n	8105c04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105bf6:	e005      	b.n	8105c04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8105bf8:	2300      	movs	r3, #0
 8105bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105bfc:	2301      	movs	r3, #1
 8105bfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105c02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8105c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105c06:	2b00      	cmp	r3, #0
 8105c08:	f000 81de 	beq.w	8105fc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8105c0c:	697b      	ldr	r3, [r7, #20]
 8105c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c10:	4a94      	ldr	r2, [pc, #592]	; (8105e64 <UART_SetConfig+0x930>)
 8105c12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105c16:	461a      	mov	r2, r3
 8105c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105c1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8105c1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105c20:	697b      	ldr	r3, [r7, #20]
 8105c22:	685a      	ldr	r2, [r3, #4]
 8105c24:	4613      	mov	r3, r2
 8105c26:	005b      	lsls	r3, r3, #1
 8105c28:	4413      	add	r3, r2
 8105c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105c2c:	429a      	cmp	r2, r3
 8105c2e:	d305      	bcc.n	8105c3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8105c30:	697b      	ldr	r3, [r7, #20]
 8105c32:	685b      	ldr	r3, [r3, #4]
 8105c34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8105c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105c38:	429a      	cmp	r2, r3
 8105c3a:	d903      	bls.n	8105c44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8105c3c:	2301      	movs	r3, #1
 8105c3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105c42:	e1c1      	b.n	8105fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105c46:	2200      	movs	r2, #0
 8105c48:	60bb      	str	r3, [r7, #8]
 8105c4a:	60fa      	str	r2, [r7, #12]
 8105c4c:	697b      	ldr	r3, [r7, #20]
 8105c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105c50:	4a84      	ldr	r2, [pc, #528]	; (8105e64 <UART_SetConfig+0x930>)
 8105c52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105c56:	b29b      	uxth	r3, r3
 8105c58:	2200      	movs	r2, #0
 8105c5a:	603b      	str	r3, [r7, #0]
 8105c5c:	607a      	str	r2, [r7, #4]
 8105c5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8105c62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8105c66:	f7fb f897 	bl	8100d98 <__aeabi_uldivmod>
 8105c6a:	4602      	mov	r2, r0
 8105c6c:	460b      	mov	r3, r1
 8105c6e:	4610      	mov	r0, r2
 8105c70:	4619      	mov	r1, r3
 8105c72:	f04f 0200 	mov.w	r2, #0
 8105c76:	f04f 0300 	mov.w	r3, #0
 8105c7a:	020b      	lsls	r3, r1, #8
 8105c7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8105c80:	0202      	lsls	r2, r0, #8
 8105c82:	6979      	ldr	r1, [r7, #20]
 8105c84:	6849      	ldr	r1, [r1, #4]
 8105c86:	0849      	lsrs	r1, r1, #1
 8105c88:	2000      	movs	r0, #0
 8105c8a:	460c      	mov	r4, r1
 8105c8c:	4605      	mov	r5, r0
 8105c8e:	eb12 0804 	adds.w	r8, r2, r4
 8105c92:	eb43 0905 	adc.w	r9, r3, r5
 8105c96:	697b      	ldr	r3, [r7, #20]
 8105c98:	685b      	ldr	r3, [r3, #4]
 8105c9a:	2200      	movs	r2, #0
 8105c9c:	469a      	mov	sl, r3
 8105c9e:	4693      	mov	fp, r2
 8105ca0:	4652      	mov	r2, sl
 8105ca2:	465b      	mov	r3, fp
 8105ca4:	4640      	mov	r0, r8
 8105ca6:	4649      	mov	r1, r9
 8105ca8:	f7fb f876 	bl	8100d98 <__aeabi_uldivmod>
 8105cac:	4602      	mov	r2, r0
 8105cae:	460b      	mov	r3, r1
 8105cb0:	4613      	mov	r3, r2
 8105cb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8105cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8105cba:	d308      	bcc.n	8105cce <UART_SetConfig+0x79a>
 8105cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105cbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8105cc2:	d204      	bcs.n	8105cce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8105cc4:	697b      	ldr	r3, [r7, #20]
 8105cc6:	681b      	ldr	r3, [r3, #0]
 8105cc8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8105cca:	60da      	str	r2, [r3, #12]
 8105ccc:	e17c      	b.n	8105fc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8105cce:	2301      	movs	r3, #1
 8105cd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105cd4:	e178      	b.n	8105fc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8105cd6:	697b      	ldr	r3, [r7, #20]
 8105cd8:	69db      	ldr	r3, [r3, #28]
 8105cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105cde:	f040 80c5 	bne.w	8105e6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8105ce2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105ce6:	2b20      	cmp	r3, #32
 8105ce8:	dc48      	bgt.n	8105d7c <UART_SetConfig+0x848>
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	db7b      	blt.n	8105de6 <UART_SetConfig+0x8b2>
 8105cee:	2b20      	cmp	r3, #32
 8105cf0:	d879      	bhi.n	8105de6 <UART_SetConfig+0x8b2>
 8105cf2:	a201      	add	r2, pc, #4	; (adr r2, 8105cf8 <UART_SetConfig+0x7c4>)
 8105cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105cf8:	08105d83 	.word	0x08105d83
 8105cfc:	08105d8b 	.word	0x08105d8b
 8105d00:	08105de7 	.word	0x08105de7
 8105d04:	08105de7 	.word	0x08105de7
 8105d08:	08105d93 	.word	0x08105d93
 8105d0c:	08105de7 	.word	0x08105de7
 8105d10:	08105de7 	.word	0x08105de7
 8105d14:	08105de7 	.word	0x08105de7
 8105d18:	08105da3 	.word	0x08105da3
 8105d1c:	08105de7 	.word	0x08105de7
 8105d20:	08105de7 	.word	0x08105de7
 8105d24:	08105de7 	.word	0x08105de7
 8105d28:	08105de7 	.word	0x08105de7
 8105d2c:	08105de7 	.word	0x08105de7
 8105d30:	08105de7 	.word	0x08105de7
 8105d34:	08105de7 	.word	0x08105de7
 8105d38:	08105db3 	.word	0x08105db3
 8105d3c:	08105de7 	.word	0x08105de7
 8105d40:	08105de7 	.word	0x08105de7
 8105d44:	08105de7 	.word	0x08105de7
 8105d48:	08105de7 	.word	0x08105de7
 8105d4c:	08105de7 	.word	0x08105de7
 8105d50:	08105de7 	.word	0x08105de7
 8105d54:	08105de7 	.word	0x08105de7
 8105d58:	08105de7 	.word	0x08105de7
 8105d5c:	08105de7 	.word	0x08105de7
 8105d60:	08105de7 	.word	0x08105de7
 8105d64:	08105de7 	.word	0x08105de7
 8105d68:	08105de7 	.word	0x08105de7
 8105d6c:	08105de7 	.word	0x08105de7
 8105d70:	08105de7 	.word	0x08105de7
 8105d74:	08105de7 	.word	0x08105de7
 8105d78:	08105dd9 	.word	0x08105dd9
 8105d7c:	2b40      	cmp	r3, #64	; 0x40
 8105d7e:	d02e      	beq.n	8105dde <UART_SetConfig+0x8aa>
 8105d80:	e031      	b.n	8105de6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105d82:	f7fd fca1 	bl	81036c8 <HAL_RCC_GetPCLK1Freq>
 8105d86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105d88:	e033      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105d8a:	f7fd fcb3 	bl	81036f4 <HAL_RCC_GetPCLK2Freq>
 8105d8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105d90:	e02f      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105d96:	4618      	mov	r0, r3
 8105d98:	f7fe fee2 	bl	8104b60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105da0:	e027      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105da2:	f107 0318 	add.w	r3, r7, #24
 8105da6:	4618      	mov	r0, r3
 8105da8:	f7ff f82e 	bl	8104e08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105dac:	69fb      	ldr	r3, [r7, #28]
 8105dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105db0:	e01f      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105db2:	4b2d      	ldr	r3, [pc, #180]	; (8105e68 <UART_SetConfig+0x934>)
 8105db4:	681b      	ldr	r3, [r3, #0]
 8105db6:	f003 0320 	and.w	r3, r3, #32
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d009      	beq.n	8105dd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105dbe:	4b2a      	ldr	r3, [pc, #168]	; (8105e68 <UART_SetConfig+0x934>)
 8105dc0:	681b      	ldr	r3, [r3, #0]
 8105dc2:	08db      	lsrs	r3, r3, #3
 8105dc4:	f003 0303 	and.w	r3, r3, #3
 8105dc8:	4a24      	ldr	r2, [pc, #144]	; (8105e5c <UART_SetConfig+0x928>)
 8105dca:	fa22 f303 	lsr.w	r3, r2, r3
 8105dce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105dd0:	e00f      	b.n	8105df2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8105dd2:	4b22      	ldr	r3, [pc, #136]	; (8105e5c <UART_SetConfig+0x928>)
 8105dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105dd6:	e00c      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105dd8:	4b21      	ldr	r3, [pc, #132]	; (8105e60 <UART_SetConfig+0x92c>)
 8105dda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105ddc:	e009      	b.n	8105df2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105de2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105de4:	e005      	b.n	8105df2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105de6:	2300      	movs	r3, #0
 8105de8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105dea:	2301      	movs	r3, #1
 8105dec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105df0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8105df2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105df4:	2b00      	cmp	r3, #0
 8105df6:	f000 80e7 	beq.w	8105fc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105dfa:	697b      	ldr	r3, [r7, #20]
 8105dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105dfe:	4a19      	ldr	r2, [pc, #100]	; (8105e64 <UART_SetConfig+0x930>)
 8105e00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105e04:	461a      	mov	r2, r3
 8105e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8105e0c:	005a      	lsls	r2, r3, #1
 8105e0e:	697b      	ldr	r3, [r7, #20]
 8105e10:	685b      	ldr	r3, [r3, #4]
 8105e12:	085b      	lsrs	r3, r3, #1
 8105e14:	441a      	add	r2, r3
 8105e16:	697b      	ldr	r3, [r7, #20]
 8105e18:	685b      	ldr	r3, [r3, #4]
 8105e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8105e1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e22:	2b0f      	cmp	r3, #15
 8105e24:	d916      	bls.n	8105e54 <UART_SetConfig+0x920>
 8105e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105e2c:	d212      	bcs.n	8105e54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8105e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e30:	b29b      	uxth	r3, r3
 8105e32:	f023 030f 	bic.w	r3, r3, #15
 8105e36:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8105e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105e3a:	085b      	lsrs	r3, r3, #1
 8105e3c:	b29b      	uxth	r3, r3
 8105e3e:	f003 0307 	and.w	r3, r3, #7
 8105e42:	b29a      	uxth	r2, r3
 8105e44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8105e46:	4313      	orrs	r3, r2
 8105e48:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8105e4a:	697b      	ldr	r3, [r7, #20]
 8105e4c:	681b      	ldr	r3, [r3, #0]
 8105e4e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8105e50:	60da      	str	r2, [r3, #12]
 8105e52:	e0b9      	b.n	8105fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105e54:	2301      	movs	r3, #1
 8105e56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8105e5a:	e0b5      	b.n	8105fc8 <UART_SetConfig+0xa94>
 8105e5c:	03d09000 	.word	0x03d09000
 8105e60:	003d0900 	.word	0x003d0900
 8105e64:	0810af9c 	.word	0x0810af9c
 8105e68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8105e6c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8105e70:	2b20      	cmp	r3, #32
 8105e72:	dc49      	bgt.n	8105f08 <UART_SetConfig+0x9d4>
 8105e74:	2b00      	cmp	r3, #0
 8105e76:	db7c      	blt.n	8105f72 <UART_SetConfig+0xa3e>
 8105e78:	2b20      	cmp	r3, #32
 8105e7a:	d87a      	bhi.n	8105f72 <UART_SetConfig+0xa3e>
 8105e7c:	a201      	add	r2, pc, #4	; (adr r2, 8105e84 <UART_SetConfig+0x950>)
 8105e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e82:	bf00      	nop
 8105e84:	08105f0f 	.word	0x08105f0f
 8105e88:	08105f17 	.word	0x08105f17
 8105e8c:	08105f73 	.word	0x08105f73
 8105e90:	08105f73 	.word	0x08105f73
 8105e94:	08105f1f 	.word	0x08105f1f
 8105e98:	08105f73 	.word	0x08105f73
 8105e9c:	08105f73 	.word	0x08105f73
 8105ea0:	08105f73 	.word	0x08105f73
 8105ea4:	08105f2f 	.word	0x08105f2f
 8105ea8:	08105f73 	.word	0x08105f73
 8105eac:	08105f73 	.word	0x08105f73
 8105eb0:	08105f73 	.word	0x08105f73
 8105eb4:	08105f73 	.word	0x08105f73
 8105eb8:	08105f73 	.word	0x08105f73
 8105ebc:	08105f73 	.word	0x08105f73
 8105ec0:	08105f73 	.word	0x08105f73
 8105ec4:	08105f3f 	.word	0x08105f3f
 8105ec8:	08105f73 	.word	0x08105f73
 8105ecc:	08105f73 	.word	0x08105f73
 8105ed0:	08105f73 	.word	0x08105f73
 8105ed4:	08105f73 	.word	0x08105f73
 8105ed8:	08105f73 	.word	0x08105f73
 8105edc:	08105f73 	.word	0x08105f73
 8105ee0:	08105f73 	.word	0x08105f73
 8105ee4:	08105f73 	.word	0x08105f73
 8105ee8:	08105f73 	.word	0x08105f73
 8105eec:	08105f73 	.word	0x08105f73
 8105ef0:	08105f73 	.word	0x08105f73
 8105ef4:	08105f73 	.word	0x08105f73
 8105ef8:	08105f73 	.word	0x08105f73
 8105efc:	08105f73 	.word	0x08105f73
 8105f00:	08105f73 	.word	0x08105f73
 8105f04:	08105f65 	.word	0x08105f65
 8105f08:	2b40      	cmp	r3, #64	; 0x40
 8105f0a:	d02e      	beq.n	8105f6a <UART_SetConfig+0xa36>
 8105f0c:	e031      	b.n	8105f72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8105f0e:	f7fd fbdb 	bl	81036c8 <HAL_RCC_GetPCLK1Freq>
 8105f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105f14:	e033      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105f16:	f7fd fbed 	bl	81036f4 <HAL_RCC_GetPCLK2Freq>
 8105f1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105f1c:	e02f      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105f22:	4618      	mov	r0, r3
 8105f24:	f7fe fe1c 	bl	8104b60 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f2c:	e027      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105f2e:	f107 0318 	add.w	r3, r7, #24
 8105f32:	4618      	mov	r0, r3
 8105f34:	f7fe ff68 	bl	8104e08 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105f38:	69fb      	ldr	r3, [r7, #28]
 8105f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f3c:	e01f      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105f3e:	4b2d      	ldr	r3, [pc, #180]	; (8105ff4 <UART_SetConfig+0xac0>)
 8105f40:	681b      	ldr	r3, [r3, #0]
 8105f42:	f003 0320 	and.w	r3, r3, #32
 8105f46:	2b00      	cmp	r3, #0
 8105f48:	d009      	beq.n	8105f5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8105f4a:	4b2a      	ldr	r3, [pc, #168]	; (8105ff4 <UART_SetConfig+0xac0>)
 8105f4c:	681b      	ldr	r3, [r3, #0]
 8105f4e:	08db      	lsrs	r3, r3, #3
 8105f50:	f003 0303 	and.w	r3, r3, #3
 8105f54:	4a28      	ldr	r2, [pc, #160]	; (8105ff8 <UART_SetConfig+0xac4>)
 8105f56:	fa22 f303 	lsr.w	r3, r2, r3
 8105f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8105f5c:	e00f      	b.n	8105f7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8105f5e:	4b26      	ldr	r3, [pc, #152]	; (8105ff8 <UART_SetConfig+0xac4>)
 8105f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f62:	e00c      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105f64:	4b25      	ldr	r3, [pc, #148]	; (8105ffc <UART_SetConfig+0xac8>)
 8105f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f68:	e009      	b.n	8105f7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8105f6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8105f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105f70:	e005      	b.n	8105f7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8105f72:	2300      	movs	r3, #0
 8105f74:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105f76:	2301      	movs	r3, #1
 8105f78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8105f7c:	bf00      	nop
    }

    if (pclk != 0U)
 8105f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d021      	beq.n	8105fc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105f84:	697b      	ldr	r3, [r7, #20]
 8105f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105f88:	4a1d      	ldr	r2, [pc, #116]	; (8106000 <UART_SetConfig+0xacc>)
 8105f8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105f8e:	461a      	mov	r2, r3
 8105f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105f92:	fbb3 f2f2 	udiv	r2, r3, r2
 8105f96:	697b      	ldr	r3, [r7, #20]
 8105f98:	685b      	ldr	r3, [r3, #4]
 8105f9a:	085b      	lsrs	r3, r3, #1
 8105f9c:	441a      	add	r2, r3
 8105f9e:	697b      	ldr	r3, [r7, #20]
 8105fa0:	685b      	ldr	r3, [r3, #4]
 8105fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8105fa6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105faa:	2b0f      	cmp	r3, #15
 8105fac:	d909      	bls.n	8105fc2 <UART_SetConfig+0xa8e>
 8105fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105fb4:	d205      	bcs.n	8105fc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105fb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105fb8:	b29a      	uxth	r2, r3
 8105fba:	697b      	ldr	r3, [r7, #20]
 8105fbc:	681b      	ldr	r3, [r3, #0]
 8105fbe:	60da      	str	r2, [r3, #12]
 8105fc0:	e002      	b.n	8105fc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8105fc2:	2301      	movs	r3, #1
 8105fc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105fc8:	697b      	ldr	r3, [r7, #20]
 8105fca:	2201      	movs	r2, #1
 8105fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8105fd0:	697b      	ldr	r3, [r7, #20]
 8105fd2:	2201      	movs	r2, #1
 8105fd4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105fd8:	697b      	ldr	r3, [r7, #20]
 8105fda:	2200      	movs	r2, #0
 8105fdc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8105fde:	697b      	ldr	r3, [r7, #20]
 8105fe0:	2200      	movs	r2, #0
 8105fe2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8105fe4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8105fe8:	4618      	mov	r0, r3
 8105fea:	3748      	adds	r7, #72	; 0x48
 8105fec:	46bd      	mov	sp, r7
 8105fee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8105ff2:	bf00      	nop
 8105ff4:	58024400 	.word	0x58024400
 8105ff8:	03d09000 	.word	0x03d09000
 8105ffc:	003d0900 	.word	0x003d0900
 8106000:	0810af9c 	.word	0x0810af9c

08106004 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8106004:	b480      	push	{r7}
 8106006:	b083      	sub	sp, #12
 8106008:	af00      	add	r7, sp, #0
 810600a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810600c:	687b      	ldr	r3, [r7, #4]
 810600e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106010:	f003 0301 	and.w	r3, r3, #1
 8106014:	2b00      	cmp	r3, #0
 8106016:	d00a      	beq.n	810602e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8106018:	687b      	ldr	r3, [r7, #4]
 810601a:	681b      	ldr	r3, [r3, #0]
 810601c:	685b      	ldr	r3, [r3, #4]
 810601e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8106022:	687b      	ldr	r3, [r7, #4]
 8106024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8106026:	687b      	ldr	r3, [r7, #4]
 8106028:	681b      	ldr	r3, [r3, #0]
 810602a:	430a      	orrs	r2, r1
 810602c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106032:	f003 0302 	and.w	r3, r3, #2
 8106036:	2b00      	cmp	r3, #0
 8106038:	d00a      	beq.n	8106050 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810603a:	687b      	ldr	r3, [r7, #4]
 810603c:	681b      	ldr	r3, [r3, #0]
 810603e:	685b      	ldr	r3, [r3, #4]
 8106040:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8106048:	687b      	ldr	r3, [r7, #4]
 810604a:	681b      	ldr	r3, [r3, #0]
 810604c:	430a      	orrs	r2, r1
 810604e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106054:	f003 0304 	and.w	r3, r3, #4
 8106058:	2b00      	cmp	r3, #0
 810605a:	d00a      	beq.n	8106072 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	681b      	ldr	r3, [r3, #0]
 8106060:	685b      	ldr	r3, [r3, #4]
 8106062:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8106066:	687b      	ldr	r3, [r7, #4]
 8106068:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 810606a:	687b      	ldr	r3, [r7, #4]
 810606c:	681b      	ldr	r3, [r3, #0]
 810606e:	430a      	orrs	r2, r1
 8106070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8106072:	687b      	ldr	r3, [r7, #4]
 8106074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106076:	f003 0308 	and.w	r3, r3, #8
 810607a:	2b00      	cmp	r3, #0
 810607c:	d00a      	beq.n	8106094 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810607e:	687b      	ldr	r3, [r7, #4]
 8106080:	681b      	ldr	r3, [r3, #0]
 8106082:	685b      	ldr	r3, [r3, #4]
 8106084:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 810608c:	687b      	ldr	r3, [r7, #4]
 810608e:	681b      	ldr	r3, [r3, #0]
 8106090:	430a      	orrs	r2, r1
 8106092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8106094:	687b      	ldr	r3, [r7, #4]
 8106096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8106098:	f003 0310 	and.w	r3, r3, #16
 810609c:	2b00      	cmp	r3, #0
 810609e:	d00a      	beq.n	81060b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	689b      	ldr	r3, [r3, #8]
 81060a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 81060ae:	687b      	ldr	r3, [r7, #4]
 81060b0:	681b      	ldr	r3, [r3, #0]
 81060b2:	430a      	orrs	r2, r1
 81060b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 81060b6:	687b      	ldr	r3, [r7, #4]
 81060b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060ba:	f003 0320 	and.w	r3, r3, #32
 81060be:	2b00      	cmp	r3, #0
 81060c0:	d00a      	beq.n	81060d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 81060c2:	687b      	ldr	r3, [r7, #4]
 81060c4:	681b      	ldr	r3, [r3, #0]
 81060c6:	689b      	ldr	r3, [r3, #8]
 81060c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 81060cc:	687b      	ldr	r3, [r7, #4]
 81060ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	681b      	ldr	r3, [r3, #0]
 81060d4:	430a      	orrs	r2, r1
 81060d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 81060d8:	687b      	ldr	r3, [r7, #4]
 81060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81060dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81060e0:	2b00      	cmp	r3, #0
 81060e2:	d01a      	beq.n	810611a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 81060e4:	687b      	ldr	r3, [r7, #4]
 81060e6:	681b      	ldr	r3, [r3, #0]
 81060e8:	685b      	ldr	r3, [r3, #4]
 81060ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 81060ee:	687b      	ldr	r3, [r7, #4]
 81060f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 81060f2:	687b      	ldr	r3, [r7, #4]
 81060f4:	681b      	ldr	r3, [r3, #0]
 81060f6:	430a      	orrs	r2, r1
 81060f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 81060fa:	687b      	ldr	r3, [r7, #4]
 81060fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81060fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106102:	d10a      	bne.n	810611a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8106104:	687b      	ldr	r3, [r7, #4]
 8106106:	681b      	ldr	r3, [r3, #0]
 8106108:	685b      	ldr	r3, [r3, #4]
 810610a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810610e:	687b      	ldr	r3, [r7, #4]
 8106110:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	430a      	orrs	r2, r1
 8106118:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810611a:	687b      	ldr	r3, [r7, #4]
 810611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810611e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106122:	2b00      	cmp	r3, #0
 8106124:	d00a      	beq.n	810613c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8106126:	687b      	ldr	r3, [r7, #4]
 8106128:	681b      	ldr	r3, [r3, #0]
 810612a:	685b      	ldr	r3, [r3, #4]
 810612c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8106130:	687b      	ldr	r3, [r7, #4]
 8106132:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8106134:	687b      	ldr	r3, [r7, #4]
 8106136:	681b      	ldr	r3, [r3, #0]
 8106138:	430a      	orrs	r2, r1
 810613a:	605a      	str	r2, [r3, #4]
  }
}
 810613c:	bf00      	nop
 810613e:	370c      	adds	r7, #12
 8106140:	46bd      	mov	sp, r7
 8106142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106146:	4770      	bx	lr

08106148 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8106148:	b580      	push	{r7, lr}
 810614a:	b098      	sub	sp, #96	; 0x60
 810614c:	af02      	add	r7, sp, #8
 810614e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106150:	687b      	ldr	r3, [r7, #4]
 8106152:	2200      	movs	r2, #0
 8106154:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8106158:	f7fb fe60 	bl	8101e1c <HAL_GetTick>
 810615c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	681b      	ldr	r3, [r3, #0]
 8106164:	f003 0308 	and.w	r3, r3, #8
 8106168:	2b08      	cmp	r3, #8
 810616a:	d12f      	bne.n	81061cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810616c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8106170:	9300      	str	r3, [sp, #0]
 8106172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8106174:	2200      	movs	r2, #0
 8106176:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 810617a:	6878      	ldr	r0, [r7, #4]
 810617c:	f000 f88e 	bl	810629c <UART_WaitOnFlagUntilTimeout>
 8106180:	4603      	mov	r3, r0
 8106182:	2b00      	cmp	r3, #0
 8106184:	d022      	beq.n	81061cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	681b      	ldr	r3, [r3, #0]
 810618a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810618c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810618e:	e853 3f00 	ldrex	r3, [r3]
 8106192:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 810619a:	653b      	str	r3, [r7, #80]	; 0x50
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	461a      	mov	r2, r3
 81061a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 81061a4:	647b      	str	r3, [r7, #68]	; 0x44
 81061a6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81061aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81061ac:	e841 2300 	strex	r3, r2, [r1]
 81061b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 81061b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	d1e6      	bne.n	8106186 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 81061b8:	687b      	ldr	r3, [r7, #4]
 81061ba:	2220      	movs	r2, #32
 81061bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 81061c0:	687b      	ldr	r3, [r7, #4]
 81061c2:	2200      	movs	r2, #0
 81061c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81061c8:	2303      	movs	r3, #3
 81061ca:	e063      	b.n	8106294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 81061cc:	687b      	ldr	r3, [r7, #4]
 81061ce:	681b      	ldr	r3, [r3, #0]
 81061d0:	681b      	ldr	r3, [r3, #0]
 81061d2:	f003 0304 	and.w	r3, r3, #4
 81061d6:	2b04      	cmp	r3, #4
 81061d8:	d149      	bne.n	810626e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81061da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81061de:	9300      	str	r3, [sp, #0]
 81061e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81061e2:	2200      	movs	r2, #0
 81061e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 81061e8:	6878      	ldr	r0, [r7, #4]
 81061ea:	f000 f857 	bl	810629c <UART_WaitOnFlagUntilTimeout>
 81061ee:	4603      	mov	r3, r0
 81061f0:	2b00      	cmp	r3, #0
 81061f2:	d03c      	beq.n	810626e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81061fc:	e853 3f00 	ldrex	r3, [r3]
 8106200:	623b      	str	r3, [r7, #32]
   return(result);
 8106202:	6a3b      	ldr	r3, [r7, #32]
 8106204:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106208:	64fb      	str	r3, [r7, #76]	; 0x4c
 810620a:	687b      	ldr	r3, [r7, #4]
 810620c:	681b      	ldr	r3, [r3, #0]
 810620e:	461a      	mov	r2, r3
 8106210:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106212:	633b      	str	r3, [r7, #48]	; 0x30
 8106214:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 810621a:	e841 2300 	strex	r3, r2, [r1]
 810621e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8106220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8106222:	2b00      	cmp	r3, #0
 8106224:	d1e6      	bne.n	81061f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	3308      	adds	r3, #8
 810622c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810622e:	693b      	ldr	r3, [r7, #16]
 8106230:	e853 3f00 	ldrex	r3, [r3]
 8106234:	60fb      	str	r3, [r7, #12]
   return(result);
 8106236:	68fb      	ldr	r3, [r7, #12]
 8106238:	f023 0301 	bic.w	r3, r3, #1
 810623c:	64bb      	str	r3, [r7, #72]	; 0x48
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	3308      	adds	r3, #8
 8106244:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8106246:	61fa      	str	r2, [r7, #28]
 8106248:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810624a:	69b9      	ldr	r1, [r7, #24]
 810624c:	69fa      	ldr	r2, [r7, #28]
 810624e:	e841 2300 	strex	r3, r2, [r1]
 8106252:	617b      	str	r3, [r7, #20]
   return(result);
 8106254:	697b      	ldr	r3, [r7, #20]
 8106256:	2b00      	cmp	r3, #0
 8106258:	d1e5      	bne.n	8106226 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810625a:	687b      	ldr	r3, [r7, #4]
 810625c:	2220      	movs	r2, #32
 810625e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8106262:	687b      	ldr	r3, [r7, #4]
 8106264:	2200      	movs	r2, #0
 8106266:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810626a:	2303      	movs	r3, #3
 810626c:	e012      	b.n	8106294 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810626e:	687b      	ldr	r3, [r7, #4]
 8106270:	2220      	movs	r2, #32
 8106272:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8106276:	687b      	ldr	r3, [r7, #4]
 8106278:	2220      	movs	r2, #32
 810627a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810627e:	687b      	ldr	r3, [r7, #4]
 8106280:	2200      	movs	r2, #0
 8106282:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	2200      	movs	r2, #0
 8106288:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 810628a:	687b      	ldr	r3, [r7, #4]
 810628c:	2200      	movs	r2, #0
 810628e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106292:	2300      	movs	r3, #0
}
 8106294:	4618      	mov	r0, r3
 8106296:	3758      	adds	r7, #88	; 0x58
 8106298:	46bd      	mov	sp, r7
 810629a:	bd80      	pop	{r7, pc}

0810629c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810629c:	b580      	push	{r7, lr}
 810629e:	b084      	sub	sp, #16
 81062a0:	af00      	add	r7, sp, #0
 81062a2:	60f8      	str	r0, [r7, #12]
 81062a4:	60b9      	str	r1, [r7, #8]
 81062a6:	603b      	str	r3, [r7, #0]
 81062a8:	4613      	mov	r3, r2
 81062aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81062ac:	e049      	b.n	8106342 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81062ae:	69bb      	ldr	r3, [r7, #24]
 81062b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81062b4:	d045      	beq.n	8106342 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81062b6:	f7fb fdb1 	bl	8101e1c <HAL_GetTick>
 81062ba:	4602      	mov	r2, r0
 81062bc:	683b      	ldr	r3, [r7, #0]
 81062be:	1ad3      	subs	r3, r2, r3
 81062c0:	69ba      	ldr	r2, [r7, #24]
 81062c2:	429a      	cmp	r2, r3
 81062c4:	d302      	bcc.n	81062cc <UART_WaitOnFlagUntilTimeout+0x30>
 81062c6:	69bb      	ldr	r3, [r7, #24]
 81062c8:	2b00      	cmp	r3, #0
 81062ca:	d101      	bne.n	81062d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 81062cc:	2303      	movs	r3, #3
 81062ce:	e048      	b.n	8106362 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 81062d0:	68fb      	ldr	r3, [r7, #12]
 81062d2:	681b      	ldr	r3, [r3, #0]
 81062d4:	681b      	ldr	r3, [r3, #0]
 81062d6:	f003 0304 	and.w	r3, r3, #4
 81062da:	2b00      	cmp	r3, #0
 81062dc:	d031      	beq.n	8106342 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 81062de:	68fb      	ldr	r3, [r7, #12]
 81062e0:	681b      	ldr	r3, [r3, #0]
 81062e2:	69db      	ldr	r3, [r3, #28]
 81062e4:	f003 0308 	and.w	r3, r3, #8
 81062e8:	2b08      	cmp	r3, #8
 81062ea:	d110      	bne.n	810630e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 81062ec:	68fb      	ldr	r3, [r7, #12]
 81062ee:	681b      	ldr	r3, [r3, #0]
 81062f0:	2208      	movs	r2, #8
 81062f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 81062f4:	68f8      	ldr	r0, [r7, #12]
 81062f6:	f000 f838 	bl	810636a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 81062fa:	68fb      	ldr	r3, [r7, #12]
 81062fc:	2208      	movs	r2, #8
 81062fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8106302:	68fb      	ldr	r3, [r7, #12]
 8106304:	2200      	movs	r2, #0
 8106306:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 810630a:	2301      	movs	r3, #1
 810630c:	e029      	b.n	8106362 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810630e:	68fb      	ldr	r3, [r7, #12]
 8106310:	681b      	ldr	r3, [r3, #0]
 8106312:	69db      	ldr	r3, [r3, #28]
 8106314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8106318:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 810631c:	d111      	bne.n	8106342 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810631e:	68fb      	ldr	r3, [r7, #12]
 8106320:	681b      	ldr	r3, [r3, #0]
 8106322:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8106326:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8106328:	68f8      	ldr	r0, [r7, #12]
 810632a:	f000 f81e 	bl	810636a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810632e:	68fb      	ldr	r3, [r7, #12]
 8106330:	2220      	movs	r2, #32
 8106332:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8106336:	68fb      	ldr	r3, [r7, #12]
 8106338:	2200      	movs	r2, #0
 810633a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 810633e:	2303      	movs	r3, #3
 8106340:	e00f      	b.n	8106362 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8106342:	68fb      	ldr	r3, [r7, #12]
 8106344:	681b      	ldr	r3, [r3, #0]
 8106346:	69da      	ldr	r2, [r3, #28]
 8106348:	68bb      	ldr	r3, [r7, #8]
 810634a:	4013      	ands	r3, r2
 810634c:	68ba      	ldr	r2, [r7, #8]
 810634e:	429a      	cmp	r2, r3
 8106350:	bf0c      	ite	eq
 8106352:	2301      	moveq	r3, #1
 8106354:	2300      	movne	r3, #0
 8106356:	b2db      	uxtb	r3, r3
 8106358:	461a      	mov	r2, r3
 810635a:	79fb      	ldrb	r3, [r7, #7]
 810635c:	429a      	cmp	r2, r3
 810635e:	d0a6      	beq.n	81062ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8106360:	2300      	movs	r3, #0
}
 8106362:	4618      	mov	r0, r3
 8106364:	3710      	adds	r7, #16
 8106366:	46bd      	mov	sp, r7
 8106368:	bd80      	pop	{r7, pc}

0810636a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810636a:	b480      	push	{r7}
 810636c:	b095      	sub	sp, #84	; 0x54
 810636e:	af00      	add	r7, sp, #0
 8106370:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8106372:	687b      	ldr	r3, [r7, #4]
 8106374:	681b      	ldr	r3, [r3, #0]
 8106376:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810637a:	e853 3f00 	ldrex	r3, [r3]
 810637e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8106380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8106382:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8106386:	64fb      	str	r3, [r7, #76]	; 0x4c
 8106388:	687b      	ldr	r3, [r7, #4]
 810638a:	681b      	ldr	r3, [r3, #0]
 810638c:	461a      	mov	r2, r3
 810638e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106390:	643b      	str	r3, [r7, #64]	; 0x40
 8106392:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106394:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8106396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8106398:	e841 2300 	strex	r3, r2, [r1]
 810639c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81063a0:	2b00      	cmp	r3, #0
 81063a2:	d1e6      	bne.n	8106372 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81063a4:	687b      	ldr	r3, [r7, #4]
 81063a6:	681b      	ldr	r3, [r3, #0]
 81063a8:	3308      	adds	r3, #8
 81063aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81063ac:	6a3b      	ldr	r3, [r7, #32]
 81063ae:	e853 3f00 	ldrex	r3, [r3]
 81063b2:	61fb      	str	r3, [r7, #28]
   return(result);
 81063b4:	69fb      	ldr	r3, [r7, #28]
 81063b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81063ba:	f023 0301 	bic.w	r3, r3, #1
 81063be:	64bb      	str	r3, [r7, #72]	; 0x48
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	681b      	ldr	r3, [r3, #0]
 81063c4:	3308      	adds	r3, #8
 81063c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81063c8:	62fa      	str	r2, [r7, #44]	; 0x2c
 81063ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81063cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 81063ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 81063d0:	e841 2300 	strex	r3, r2, [r1]
 81063d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81063d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81063d8:	2b00      	cmp	r3, #0
 81063da:	d1e3      	bne.n	81063a4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81063dc:	687b      	ldr	r3, [r7, #4]
 81063de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81063e0:	2b01      	cmp	r3, #1
 81063e2:	d118      	bne.n	8106416 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81063e4:	687b      	ldr	r3, [r7, #4]
 81063e6:	681b      	ldr	r3, [r3, #0]
 81063e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81063ea:	68fb      	ldr	r3, [r7, #12]
 81063ec:	e853 3f00 	ldrex	r3, [r3]
 81063f0:	60bb      	str	r3, [r7, #8]
   return(result);
 81063f2:	68bb      	ldr	r3, [r7, #8]
 81063f4:	f023 0310 	bic.w	r3, r3, #16
 81063f8:	647b      	str	r3, [r7, #68]	; 0x44
 81063fa:	687b      	ldr	r3, [r7, #4]
 81063fc:	681b      	ldr	r3, [r3, #0]
 81063fe:	461a      	mov	r2, r3
 8106400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8106402:	61bb      	str	r3, [r7, #24]
 8106404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106406:	6979      	ldr	r1, [r7, #20]
 8106408:	69ba      	ldr	r2, [r7, #24]
 810640a:	e841 2300 	strex	r3, r2, [r1]
 810640e:	613b      	str	r3, [r7, #16]
   return(result);
 8106410:	693b      	ldr	r3, [r7, #16]
 8106412:	2b00      	cmp	r3, #0
 8106414:	d1e6      	bne.n	81063e4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8106416:	687b      	ldr	r3, [r7, #4]
 8106418:	2220      	movs	r2, #32
 810641a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	2200      	movs	r2, #0
 8106422:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8106424:	687b      	ldr	r3, [r7, #4]
 8106426:	2200      	movs	r2, #0
 8106428:	675a      	str	r2, [r3, #116]	; 0x74
}
 810642a:	bf00      	nop
 810642c:	3754      	adds	r7, #84	; 0x54
 810642e:	46bd      	mov	sp, r7
 8106430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106434:	4770      	bx	lr

08106436 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8106436:	b480      	push	{r7}
 8106438:	b085      	sub	sp, #20
 810643a:	af00      	add	r7, sp, #0
 810643c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810643e:	687b      	ldr	r3, [r7, #4]
 8106440:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8106444:	2b01      	cmp	r3, #1
 8106446:	d101      	bne.n	810644c <HAL_UARTEx_DisableFifoMode+0x16>
 8106448:	2302      	movs	r3, #2
 810644a:	e027      	b.n	810649c <HAL_UARTEx_DisableFifoMode+0x66>
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	2201      	movs	r2, #1
 8106450:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106454:	687b      	ldr	r3, [r7, #4]
 8106456:	2224      	movs	r2, #36	; 0x24
 8106458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810645c:	687b      	ldr	r3, [r7, #4]
 810645e:	681b      	ldr	r3, [r3, #0]
 8106460:	681b      	ldr	r3, [r3, #0]
 8106462:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106464:	687b      	ldr	r3, [r7, #4]
 8106466:	681b      	ldr	r3, [r3, #0]
 8106468:	681a      	ldr	r2, [r3, #0]
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	f022 0201 	bic.w	r2, r2, #1
 8106472:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8106474:	68fb      	ldr	r3, [r7, #12]
 8106476:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 810647a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810647c:	687b      	ldr	r3, [r7, #4]
 810647e:	2200      	movs	r2, #0
 8106480:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106482:	687b      	ldr	r3, [r7, #4]
 8106484:	681b      	ldr	r3, [r3, #0]
 8106486:	68fa      	ldr	r2, [r7, #12]
 8106488:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810648a:	687b      	ldr	r3, [r7, #4]
 810648c:	2220      	movs	r2, #32
 810648e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	2200      	movs	r2, #0
 8106496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810649a:	2300      	movs	r3, #0
}
 810649c:	4618      	mov	r0, r3
 810649e:	3714      	adds	r7, #20
 81064a0:	46bd      	mov	sp, r7
 81064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81064a6:	4770      	bx	lr

081064a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81064a8:	b580      	push	{r7, lr}
 81064aa:	b084      	sub	sp, #16
 81064ac:	af00      	add	r7, sp, #0
 81064ae:	6078      	str	r0, [r7, #4]
 81064b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81064b8:	2b01      	cmp	r3, #1
 81064ba:	d101      	bne.n	81064c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81064bc:	2302      	movs	r3, #2
 81064be:	e02d      	b.n	810651c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	2201      	movs	r2, #1
 81064c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	2224      	movs	r2, #36	; 0x24
 81064cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81064d0:	687b      	ldr	r3, [r7, #4]
 81064d2:	681b      	ldr	r3, [r3, #0]
 81064d4:	681b      	ldr	r3, [r3, #0]
 81064d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81064d8:	687b      	ldr	r3, [r7, #4]
 81064da:	681b      	ldr	r3, [r3, #0]
 81064dc:	681a      	ldr	r2, [r3, #0]
 81064de:	687b      	ldr	r3, [r7, #4]
 81064e0:	681b      	ldr	r3, [r3, #0]
 81064e2:	f022 0201 	bic.w	r2, r2, #1
 81064e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 81064e8:	687b      	ldr	r3, [r7, #4]
 81064ea:	681b      	ldr	r3, [r3, #0]
 81064ec:	689b      	ldr	r3, [r3, #8]
 81064ee:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	681b      	ldr	r3, [r3, #0]
 81064f6:	683a      	ldr	r2, [r7, #0]
 81064f8:	430a      	orrs	r2, r1
 81064fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81064fc:	6878      	ldr	r0, [r7, #4]
 81064fe:	f000 f84f 	bl	81065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	68fa      	ldr	r2, [r7, #12]
 8106508:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	2220      	movs	r2, #32
 810650e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106512:	687b      	ldr	r3, [r7, #4]
 8106514:	2200      	movs	r2, #0
 8106516:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810651a:	2300      	movs	r3, #0
}
 810651c:	4618      	mov	r0, r3
 810651e:	3710      	adds	r7, #16
 8106520:	46bd      	mov	sp, r7
 8106522:	bd80      	pop	{r7, pc}

08106524 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8106524:	b580      	push	{r7, lr}
 8106526:	b084      	sub	sp, #16
 8106528:	af00      	add	r7, sp, #0
 810652a:	6078      	str	r0, [r7, #4]
 810652c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810652e:	687b      	ldr	r3, [r7, #4]
 8106530:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8106534:	2b01      	cmp	r3, #1
 8106536:	d101      	bne.n	810653c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8106538:	2302      	movs	r3, #2
 810653a:	e02d      	b.n	8106598 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810653c:	687b      	ldr	r3, [r7, #4]
 810653e:	2201      	movs	r2, #1
 8106540:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	2224      	movs	r2, #36	; 0x24
 8106548:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810654c:	687b      	ldr	r3, [r7, #4]
 810654e:	681b      	ldr	r3, [r3, #0]
 8106550:	681b      	ldr	r3, [r3, #0]
 8106552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8106554:	687b      	ldr	r3, [r7, #4]
 8106556:	681b      	ldr	r3, [r3, #0]
 8106558:	681a      	ldr	r2, [r3, #0]
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	681b      	ldr	r3, [r3, #0]
 810655e:	f022 0201 	bic.w	r2, r2, #1
 8106562:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8106564:	687b      	ldr	r3, [r7, #4]
 8106566:	681b      	ldr	r3, [r3, #0]
 8106568:	689b      	ldr	r3, [r3, #8]
 810656a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	683a      	ldr	r2, [r7, #0]
 8106574:	430a      	orrs	r2, r1
 8106576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8106578:	6878      	ldr	r0, [r7, #4]
 810657a:	f000 f811 	bl	81065a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810657e:	687b      	ldr	r3, [r7, #4]
 8106580:	681b      	ldr	r3, [r3, #0]
 8106582:	68fa      	ldr	r2, [r7, #12]
 8106584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	2220      	movs	r2, #32
 810658a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810658e:	687b      	ldr	r3, [r7, #4]
 8106590:	2200      	movs	r2, #0
 8106592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106596:	2300      	movs	r3, #0
}
 8106598:	4618      	mov	r0, r3
 810659a:	3710      	adds	r7, #16
 810659c:	46bd      	mov	sp, r7
 810659e:	bd80      	pop	{r7, pc}

081065a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81065a0:	b480      	push	{r7}
 81065a2:	b085      	sub	sp, #20
 81065a4:	af00      	add	r7, sp, #0
 81065a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81065a8:	687b      	ldr	r3, [r7, #4]
 81065aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81065ac:	2b00      	cmp	r3, #0
 81065ae:	d108      	bne.n	81065c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81065b0:	687b      	ldr	r3, [r7, #4]
 81065b2:	2201      	movs	r2, #1
 81065b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 81065b8:	687b      	ldr	r3, [r7, #4]
 81065ba:	2201      	movs	r2, #1
 81065bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81065c0:	e031      	b.n	8106626 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81065c2:	2310      	movs	r3, #16
 81065c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81065c6:	2310      	movs	r3, #16
 81065c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81065ca:	687b      	ldr	r3, [r7, #4]
 81065cc:	681b      	ldr	r3, [r3, #0]
 81065ce:	689b      	ldr	r3, [r3, #8]
 81065d0:	0e5b      	lsrs	r3, r3, #25
 81065d2:	b2db      	uxtb	r3, r3
 81065d4:	f003 0307 	and.w	r3, r3, #7
 81065d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	681b      	ldr	r3, [r3, #0]
 81065de:	689b      	ldr	r3, [r3, #8]
 81065e0:	0f5b      	lsrs	r3, r3, #29
 81065e2:	b2db      	uxtb	r3, r3
 81065e4:	f003 0307 	and.w	r3, r3, #7
 81065e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81065ea:	7bbb      	ldrb	r3, [r7, #14]
 81065ec:	7b3a      	ldrb	r2, [r7, #12]
 81065ee:	4911      	ldr	r1, [pc, #68]	; (8106634 <UARTEx_SetNbDataToProcess+0x94>)
 81065f0:	5c8a      	ldrb	r2, [r1, r2]
 81065f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81065f6:	7b3a      	ldrb	r2, [r7, #12]
 81065f8:	490f      	ldr	r1, [pc, #60]	; (8106638 <UARTEx_SetNbDataToProcess+0x98>)
 81065fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81065fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8106600:	b29a      	uxth	r2, r3
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8106608:	7bfb      	ldrb	r3, [r7, #15]
 810660a:	7b7a      	ldrb	r2, [r7, #13]
 810660c:	4909      	ldr	r1, [pc, #36]	; (8106634 <UARTEx_SetNbDataToProcess+0x94>)
 810660e:	5c8a      	ldrb	r2, [r1, r2]
 8106610:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8106614:	7b7a      	ldrb	r2, [r7, #13]
 8106616:	4908      	ldr	r1, [pc, #32]	; (8106638 <UARTEx_SetNbDataToProcess+0x98>)
 8106618:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810661a:	fb93 f3f2 	sdiv	r3, r3, r2
 810661e:	b29a      	uxth	r2, r3
 8106620:	687b      	ldr	r3, [r7, #4]
 8106622:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8106626:	bf00      	nop
 8106628:	3714      	adds	r7, #20
 810662a:	46bd      	mov	sp, r7
 810662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106630:	4770      	bx	lr
 8106632:	bf00      	nop
 8106634:	0810afb4 	.word	0x0810afb4
 8106638:	0810afbc 	.word	0x0810afbc

0810663c <__cvt>:
 810663c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106640:	ec55 4b10 	vmov	r4, r5, d0
 8106644:	2d00      	cmp	r5, #0
 8106646:	460e      	mov	r6, r1
 8106648:	4619      	mov	r1, r3
 810664a:	462b      	mov	r3, r5
 810664c:	bfbb      	ittet	lt
 810664e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8106652:	461d      	movlt	r5, r3
 8106654:	2300      	movge	r3, #0
 8106656:	232d      	movlt	r3, #45	; 0x2d
 8106658:	700b      	strb	r3, [r1, #0]
 810665a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810665c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8106660:	4691      	mov	r9, r2
 8106662:	f023 0820 	bic.w	r8, r3, #32
 8106666:	bfbc      	itt	lt
 8106668:	4622      	movlt	r2, r4
 810666a:	4614      	movlt	r4, r2
 810666c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8106670:	d005      	beq.n	810667e <__cvt+0x42>
 8106672:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8106676:	d100      	bne.n	810667a <__cvt+0x3e>
 8106678:	3601      	adds	r6, #1
 810667a:	2102      	movs	r1, #2
 810667c:	e000      	b.n	8106680 <__cvt+0x44>
 810667e:	2103      	movs	r1, #3
 8106680:	ab03      	add	r3, sp, #12
 8106682:	9301      	str	r3, [sp, #4]
 8106684:	ab02      	add	r3, sp, #8
 8106686:	9300      	str	r3, [sp, #0]
 8106688:	ec45 4b10 	vmov	d0, r4, r5
 810668c:	4653      	mov	r3, sl
 810668e:	4632      	mov	r2, r6
 8106690:	f001 f982 	bl	8107998 <_dtoa_r>
 8106694:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8106698:	4607      	mov	r7, r0
 810669a:	d102      	bne.n	81066a2 <__cvt+0x66>
 810669c:	f019 0f01 	tst.w	r9, #1
 81066a0:	d022      	beq.n	81066e8 <__cvt+0xac>
 81066a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 81066a6:	eb07 0906 	add.w	r9, r7, r6
 81066aa:	d110      	bne.n	81066ce <__cvt+0x92>
 81066ac:	783b      	ldrb	r3, [r7, #0]
 81066ae:	2b30      	cmp	r3, #48	; 0x30
 81066b0:	d10a      	bne.n	81066c8 <__cvt+0x8c>
 81066b2:	2200      	movs	r2, #0
 81066b4:	2300      	movs	r3, #0
 81066b6:	4620      	mov	r0, r4
 81066b8:	4629      	mov	r1, r5
 81066ba:	f7fa fa8d 	bl	8100bd8 <__aeabi_dcmpeq>
 81066be:	b918      	cbnz	r0, 81066c8 <__cvt+0x8c>
 81066c0:	f1c6 0601 	rsb	r6, r6, #1
 81066c4:	f8ca 6000 	str.w	r6, [sl]
 81066c8:	f8da 3000 	ldr.w	r3, [sl]
 81066cc:	4499      	add	r9, r3
 81066ce:	2200      	movs	r2, #0
 81066d0:	2300      	movs	r3, #0
 81066d2:	4620      	mov	r0, r4
 81066d4:	4629      	mov	r1, r5
 81066d6:	f7fa fa7f 	bl	8100bd8 <__aeabi_dcmpeq>
 81066da:	b108      	cbz	r0, 81066e0 <__cvt+0xa4>
 81066dc:	f8cd 900c 	str.w	r9, [sp, #12]
 81066e0:	2230      	movs	r2, #48	; 0x30
 81066e2:	9b03      	ldr	r3, [sp, #12]
 81066e4:	454b      	cmp	r3, r9
 81066e6:	d307      	bcc.n	81066f8 <__cvt+0xbc>
 81066e8:	9b03      	ldr	r3, [sp, #12]
 81066ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81066ec:	1bdb      	subs	r3, r3, r7
 81066ee:	4638      	mov	r0, r7
 81066f0:	6013      	str	r3, [r2, #0]
 81066f2:	b004      	add	sp, #16
 81066f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81066f8:	1c59      	adds	r1, r3, #1
 81066fa:	9103      	str	r1, [sp, #12]
 81066fc:	701a      	strb	r2, [r3, #0]
 81066fe:	e7f0      	b.n	81066e2 <__cvt+0xa6>

08106700 <__exponent>:
 8106700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8106702:	4603      	mov	r3, r0
 8106704:	2900      	cmp	r1, #0
 8106706:	bfb8      	it	lt
 8106708:	4249      	neglt	r1, r1
 810670a:	f803 2b02 	strb.w	r2, [r3], #2
 810670e:	bfb4      	ite	lt
 8106710:	222d      	movlt	r2, #45	; 0x2d
 8106712:	222b      	movge	r2, #43	; 0x2b
 8106714:	2909      	cmp	r1, #9
 8106716:	7042      	strb	r2, [r0, #1]
 8106718:	dd2a      	ble.n	8106770 <__exponent+0x70>
 810671a:	f10d 0207 	add.w	r2, sp, #7
 810671e:	4617      	mov	r7, r2
 8106720:	260a      	movs	r6, #10
 8106722:	4694      	mov	ip, r2
 8106724:	fb91 f5f6 	sdiv	r5, r1, r6
 8106728:	fb06 1415 	mls	r4, r6, r5, r1
 810672c:	3430      	adds	r4, #48	; 0x30
 810672e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8106732:	460c      	mov	r4, r1
 8106734:	2c63      	cmp	r4, #99	; 0x63
 8106736:	f102 32ff 	add.w	r2, r2, #4294967295
 810673a:	4629      	mov	r1, r5
 810673c:	dcf1      	bgt.n	8106722 <__exponent+0x22>
 810673e:	3130      	adds	r1, #48	; 0x30
 8106740:	f1ac 0402 	sub.w	r4, ip, #2
 8106744:	f802 1c01 	strb.w	r1, [r2, #-1]
 8106748:	1c41      	adds	r1, r0, #1
 810674a:	4622      	mov	r2, r4
 810674c:	42ba      	cmp	r2, r7
 810674e:	d30a      	bcc.n	8106766 <__exponent+0x66>
 8106750:	f10d 0209 	add.w	r2, sp, #9
 8106754:	eba2 020c 	sub.w	r2, r2, ip
 8106758:	42bc      	cmp	r4, r7
 810675a:	bf88      	it	hi
 810675c:	2200      	movhi	r2, #0
 810675e:	4413      	add	r3, r2
 8106760:	1a18      	subs	r0, r3, r0
 8106762:	b003      	add	sp, #12
 8106764:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8106766:	f812 5b01 	ldrb.w	r5, [r2], #1
 810676a:	f801 5f01 	strb.w	r5, [r1, #1]!
 810676e:	e7ed      	b.n	810674c <__exponent+0x4c>
 8106770:	2330      	movs	r3, #48	; 0x30
 8106772:	3130      	adds	r1, #48	; 0x30
 8106774:	7083      	strb	r3, [r0, #2]
 8106776:	70c1      	strb	r1, [r0, #3]
 8106778:	1d03      	adds	r3, r0, #4
 810677a:	e7f1      	b.n	8106760 <__exponent+0x60>

0810677c <_printf_float>:
 810677c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106780:	ed2d 8b02 	vpush	{d8}
 8106784:	b08d      	sub	sp, #52	; 0x34
 8106786:	460c      	mov	r4, r1
 8106788:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 810678c:	4616      	mov	r6, r2
 810678e:	461f      	mov	r7, r3
 8106790:	4605      	mov	r5, r0
 8106792:	f000 fff9 	bl	8107788 <_localeconv_r>
 8106796:	f8d0 a000 	ldr.w	sl, [r0]
 810679a:	4650      	mov	r0, sl
 810679c:	f7f9 fdf0 	bl	8100380 <strlen>
 81067a0:	2300      	movs	r3, #0
 81067a2:	930a      	str	r3, [sp, #40]	; 0x28
 81067a4:	6823      	ldr	r3, [r4, #0]
 81067a6:	9305      	str	r3, [sp, #20]
 81067a8:	f8d8 3000 	ldr.w	r3, [r8]
 81067ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 81067b0:	3307      	adds	r3, #7
 81067b2:	f023 0307 	bic.w	r3, r3, #7
 81067b6:	f103 0208 	add.w	r2, r3, #8
 81067ba:	f8c8 2000 	str.w	r2, [r8]
 81067be:	e9d3 8900 	ldrd	r8, r9, [r3]
 81067c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81067c6:	9307      	str	r3, [sp, #28]
 81067c8:	f8cd 8018 	str.w	r8, [sp, #24]
 81067cc:	ee08 0a10 	vmov	s16, r0
 81067d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 81067d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81067d8:	4b9e      	ldr	r3, [pc, #632]	; (8106a54 <_printf_float+0x2d8>)
 81067da:	f04f 32ff 	mov.w	r2, #4294967295
 81067de:	f7fa fa2d 	bl	8100c3c <__aeabi_dcmpun>
 81067e2:	bb88      	cbnz	r0, 8106848 <_printf_float+0xcc>
 81067e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 81067e8:	4b9a      	ldr	r3, [pc, #616]	; (8106a54 <_printf_float+0x2d8>)
 81067ea:	f04f 32ff 	mov.w	r2, #4294967295
 81067ee:	f7fa fa07 	bl	8100c00 <__aeabi_dcmple>
 81067f2:	bb48      	cbnz	r0, 8106848 <_printf_float+0xcc>
 81067f4:	2200      	movs	r2, #0
 81067f6:	2300      	movs	r3, #0
 81067f8:	4640      	mov	r0, r8
 81067fa:	4649      	mov	r1, r9
 81067fc:	f7fa f9f6 	bl	8100bec <__aeabi_dcmplt>
 8106800:	b110      	cbz	r0, 8106808 <_printf_float+0x8c>
 8106802:	232d      	movs	r3, #45	; 0x2d
 8106804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106808:	4a93      	ldr	r2, [pc, #588]	; (8106a58 <_printf_float+0x2dc>)
 810680a:	4b94      	ldr	r3, [pc, #592]	; (8106a5c <_printf_float+0x2e0>)
 810680c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8106810:	bf94      	ite	ls
 8106812:	4690      	movls	r8, r2
 8106814:	4698      	movhi	r8, r3
 8106816:	2303      	movs	r3, #3
 8106818:	6123      	str	r3, [r4, #16]
 810681a:	9b05      	ldr	r3, [sp, #20]
 810681c:	f023 0304 	bic.w	r3, r3, #4
 8106820:	6023      	str	r3, [r4, #0]
 8106822:	f04f 0900 	mov.w	r9, #0
 8106826:	9700      	str	r7, [sp, #0]
 8106828:	4633      	mov	r3, r6
 810682a:	aa0b      	add	r2, sp, #44	; 0x2c
 810682c:	4621      	mov	r1, r4
 810682e:	4628      	mov	r0, r5
 8106830:	f000 f9da 	bl	8106be8 <_printf_common>
 8106834:	3001      	adds	r0, #1
 8106836:	f040 8090 	bne.w	810695a <_printf_float+0x1de>
 810683a:	f04f 30ff 	mov.w	r0, #4294967295
 810683e:	b00d      	add	sp, #52	; 0x34
 8106840:	ecbd 8b02 	vpop	{d8}
 8106844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106848:	4642      	mov	r2, r8
 810684a:	464b      	mov	r3, r9
 810684c:	4640      	mov	r0, r8
 810684e:	4649      	mov	r1, r9
 8106850:	f7fa f9f4 	bl	8100c3c <__aeabi_dcmpun>
 8106854:	b140      	cbz	r0, 8106868 <_printf_float+0xec>
 8106856:	464b      	mov	r3, r9
 8106858:	2b00      	cmp	r3, #0
 810685a:	bfbc      	itt	lt
 810685c:	232d      	movlt	r3, #45	; 0x2d
 810685e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8106862:	4a7f      	ldr	r2, [pc, #508]	; (8106a60 <_printf_float+0x2e4>)
 8106864:	4b7f      	ldr	r3, [pc, #508]	; (8106a64 <_printf_float+0x2e8>)
 8106866:	e7d1      	b.n	810680c <_printf_float+0x90>
 8106868:	6863      	ldr	r3, [r4, #4]
 810686a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 810686e:	9206      	str	r2, [sp, #24]
 8106870:	1c5a      	adds	r2, r3, #1
 8106872:	d13f      	bne.n	81068f4 <_printf_float+0x178>
 8106874:	2306      	movs	r3, #6
 8106876:	6063      	str	r3, [r4, #4]
 8106878:	9b05      	ldr	r3, [sp, #20]
 810687a:	6861      	ldr	r1, [r4, #4]
 810687c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8106880:	2300      	movs	r3, #0
 8106882:	9303      	str	r3, [sp, #12]
 8106884:	ab0a      	add	r3, sp, #40	; 0x28
 8106886:	e9cd b301 	strd	fp, r3, [sp, #4]
 810688a:	ab09      	add	r3, sp, #36	; 0x24
 810688c:	ec49 8b10 	vmov	d0, r8, r9
 8106890:	9300      	str	r3, [sp, #0]
 8106892:	6022      	str	r2, [r4, #0]
 8106894:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8106898:	4628      	mov	r0, r5
 810689a:	f7ff fecf 	bl	810663c <__cvt>
 810689e:	9b06      	ldr	r3, [sp, #24]
 81068a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 81068a2:	2b47      	cmp	r3, #71	; 0x47
 81068a4:	4680      	mov	r8, r0
 81068a6:	d108      	bne.n	81068ba <_printf_float+0x13e>
 81068a8:	1cc8      	adds	r0, r1, #3
 81068aa:	db02      	blt.n	81068b2 <_printf_float+0x136>
 81068ac:	6863      	ldr	r3, [r4, #4]
 81068ae:	4299      	cmp	r1, r3
 81068b0:	dd41      	ble.n	8106936 <_printf_float+0x1ba>
 81068b2:	f1ab 0302 	sub.w	r3, fp, #2
 81068b6:	fa5f fb83 	uxtb.w	fp, r3
 81068ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 81068be:	d820      	bhi.n	8106902 <_printf_float+0x186>
 81068c0:	3901      	subs	r1, #1
 81068c2:	465a      	mov	r2, fp
 81068c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 81068c8:	9109      	str	r1, [sp, #36]	; 0x24
 81068ca:	f7ff ff19 	bl	8106700 <__exponent>
 81068ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 81068d0:	1813      	adds	r3, r2, r0
 81068d2:	2a01      	cmp	r2, #1
 81068d4:	4681      	mov	r9, r0
 81068d6:	6123      	str	r3, [r4, #16]
 81068d8:	dc02      	bgt.n	81068e0 <_printf_float+0x164>
 81068da:	6822      	ldr	r2, [r4, #0]
 81068dc:	07d2      	lsls	r2, r2, #31
 81068de:	d501      	bpl.n	81068e4 <_printf_float+0x168>
 81068e0:	3301      	adds	r3, #1
 81068e2:	6123      	str	r3, [r4, #16]
 81068e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 81068e8:	2b00      	cmp	r3, #0
 81068ea:	d09c      	beq.n	8106826 <_printf_float+0xaa>
 81068ec:	232d      	movs	r3, #45	; 0x2d
 81068ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81068f2:	e798      	b.n	8106826 <_printf_float+0xaa>
 81068f4:	9a06      	ldr	r2, [sp, #24]
 81068f6:	2a47      	cmp	r2, #71	; 0x47
 81068f8:	d1be      	bne.n	8106878 <_printf_float+0xfc>
 81068fa:	2b00      	cmp	r3, #0
 81068fc:	d1bc      	bne.n	8106878 <_printf_float+0xfc>
 81068fe:	2301      	movs	r3, #1
 8106900:	e7b9      	b.n	8106876 <_printf_float+0xfa>
 8106902:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8106906:	d118      	bne.n	810693a <_printf_float+0x1be>
 8106908:	2900      	cmp	r1, #0
 810690a:	6863      	ldr	r3, [r4, #4]
 810690c:	dd0b      	ble.n	8106926 <_printf_float+0x1aa>
 810690e:	6121      	str	r1, [r4, #16]
 8106910:	b913      	cbnz	r3, 8106918 <_printf_float+0x19c>
 8106912:	6822      	ldr	r2, [r4, #0]
 8106914:	07d0      	lsls	r0, r2, #31
 8106916:	d502      	bpl.n	810691e <_printf_float+0x1a2>
 8106918:	3301      	adds	r3, #1
 810691a:	440b      	add	r3, r1
 810691c:	6123      	str	r3, [r4, #16]
 810691e:	65a1      	str	r1, [r4, #88]	; 0x58
 8106920:	f04f 0900 	mov.w	r9, #0
 8106924:	e7de      	b.n	81068e4 <_printf_float+0x168>
 8106926:	b913      	cbnz	r3, 810692e <_printf_float+0x1b2>
 8106928:	6822      	ldr	r2, [r4, #0]
 810692a:	07d2      	lsls	r2, r2, #31
 810692c:	d501      	bpl.n	8106932 <_printf_float+0x1b6>
 810692e:	3302      	adds	r3, #2
 8106930:	e7f4      	b.n	810691c <_printf_float+0x1a0>
 8106932:	2301      	movs	r3, #1
 8106934:	e7f2      	b.n	810691c <_printf_float+0x1a0>
 8106936:	f04f 0b67 	mov.w	fp, #103	; 0x67
 810693a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810693c:	4299      	cmp	r1, r3
 810693e:	db05      	blt.n	810694c <_printf_float+0x1d0>
 8106940:	6823      	ldr	r3, [r4, #0]
 8106942:	6121      	str	r1, [r4, #16]
 8106944:	07d8      	lsls	r0, r3, #31
 8106946:	d5ea      	bpl.n	810691e <_printf_float+0x1a2>
 8106948:	1c4b      	adds	r3, r1, #1
 810694a:	e7e7      	b.n	810691c <_printf_float+0x1a0>
 810694c:	2900      	cmp	r1, #0
 810694e:	bfd4      	ite	le
 8106950:	f1c1 0202 	rsble	r2, r1, #2
 8106954:	2201      	movgt	r2, #1
 8106956:	4413      	add	r3, r2
 8106958:	e7e0      	b.n	810691c <_printf_float+0x1a0>
 810695a:	6823      	ldr	r3, [r4, #0]
 810695c:	055a      	lsls	r2, r3, #21
 810695e:	d407      	bmi.n	8106970 <_printf_float+0x1f4>
 8106960:	6923      	ldr	r3, [r4, #16]
 8106962:	4642      	mov	r2, r8
 8106964:	4631      	mov	r1, r6
 8106966:	4628      	mov	r0, r5
 8106968:	47b8      	blx	r7
 810696a:	3001      	adds	r0, #1
 810696c:	d12c      	bne.n	81069c8 <_printf_float+0x24c>
 810696e:	e764      	b.n	810683a <_printf_float+0xbe>
 8106970:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8106974:	f240 80e0 	bls.w	8106b38 <_printf_float+0x3bc>
 8106978:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 810697c:	2200      	movs	r2, #0
 810697e:	2300      	movs	r3, #0
 8106980:	f7fa f92a 	bl	8100bd8 <__aeabi_dcmpeq>
 8106984:	2800      	cmp	r0, #0
 8106986:	d034      	beq.n	81069f2 <_printf_float+0x276>
 8106988:	4a37      	ldr	r2, [pc, #220]	; (8106a68 <_printf_float+0x2ec>)
 810698a:	2301      	movs	r3, #1
 810698c:	4631      	mov	r1, r6
 810698e:	4628      	mov	r0, r5
 8106990:	47b8      	blx	r7
 8106992:	3001      	adds	r0, #1
 8106994:	f43f af51 	beq.w	810683a <_printf_float+0xbe>
 8106998:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 810699c:	429a      	cmp	r2, r3
 810699e:	db02      	blt.n	81069a6 <_printf_float+0x22a>
 81069a0:	6823      	ldr	r3, [r4, #0]
 81069a2:	07d8      	lsls	r0, r3, #31
 81069a4:	d510      	bpl.n	81069c8 <_printf_float+0x24c>
 81069a6:	ee18 3a10 	vmov	r3, s16
 81069aa:	4652      	mov	r2, sl
 81069ac:	4631      	mov	r1, r6
 81069ae:	4628      	mov	r0, r5
 81069b0:	47b8      	blx	r7
 81069b2:	3001      	adds	r0, #1
 81069b4:	f43f af41 	beq.w	810683a <_printf_float+0xbe>
 81069b8:	f04f 0800 	mov.w	r8, #0
 81069bc:	f104 091a 	add.w	r9, r4, #26
 81069c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81069c2:	3b01      	subs	r3, #1
 81069c4:	4543      	cmp	r3, r8
 81069c6:	dc09      	bgt.n	81069dc <_printf_float+0x260>
 81069c8:	6823      	ldr	r3, [r4, #0]
 81069ca:	079b      	lsls	r3, r3, #30
 81069cc:	f100 8107 	bmi.w	8106bde <_printf_float+0x462>
 81069d0:	68e0      	ldr	r0, [r4, #12]
 81069d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81069d4:	4298      	cmp	r0, r3
 81069d6:	bfb8      	it	lt
 81069d8:	4618      	movlt	r0, r3
 81069da:	e730      	b.n	810683e <_printf_float+0xc2>
 81069dc:	2301      	movs	r3, #1
 81069de:	464a      	mov	r2, r9
 81069e0:	4631      	mov	r1, r6
 81069e2:	4628      	mov	r0, r5
 81069e4:	47b8      	blx	r7
 81069e6:	3001      	adds	r0, #1
 81069e8:	f43f af27 	beq.w	810683a <_printf_float+0xbe>
 81069ec:	f108 0801 	add.w	r8, r8, #1
 81069f0:	e7e6      	b.n	81069c0 <_printf_float+0x244>
 81069f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81069f4:	2b00      	cmp	r3, #0
 81069f6:	dc39      	bgt.n	8106a6c <_printf_float+0x2f0>
 81069f8:	4a1b      	ldr	r2, [pc, #108]	; (8106a68 <_printf_float+0x2ec>)
 81069fa:	2301      	movs	r3, #1
 81069fc:	4631      	mov	r1, r6
 81069fe:	4628      	mov	r0, r5
 8106a00:	47b8      	blx	r7
 8106a02:	3001      	adds	r0, #1
 8106a04:	f43f af19 	beq.w	810683a <_printf_float+0xbe>
 8106a08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8106a0c:	4313      	orrs	r3, r2
 8106a0e:	d102      	bne.n	8106a16 <_printf_float+0x29a>
 8106a10:	6823      	ldr	r3, [r4, #0]
 8106a12:	07d9      	lsls	r1, r3, #31
 8106a14:	d5d8      	bpl.n	81069c8 <_printf_float+0x24c>
 8106a16:	ee18 3a10 	vmov	r3, s16
 8106a1a:	4652      	mov	r2, sl
 8106a1c:	4631      	mov	r1, r6
 8106a1e:	4628      	mov	r0, r5
 8106a20:	47b8      	blx	r7
 8106a22:	3001      	adds	r0, #1
 8106a24:	f43f af09 	beq.w	810683a <_printf_float+0xbe>
 8106a28:	f04f 0900 	mov.w	r9, #0
 8106a2c:	f104 0a1a 	add.w	sl, r4, #26
 8106a30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106a32:	425b      	negs	r3, r3
 8106a34:	454b      	cmp	r3, r9
 8106a36:	dc01      	bgt.n	8106a3c <_printf_float+0x2c0>
 8106a38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106a3a:	e792      	b.n	8106962 <_printf_float+0x1e6>
 8106a3c:	2301      	movs	r3, #1
 8106a3e:	4652      	mov	r2, sl
 8106a40:	4631      	mov	r1, r6
 8106a42:	4628      	mov	r0, r5
 8106a44:	47b8      	blx	r7
 8106a46:	3001      	adds	r0, #1
 8106a48:	f43f aef7 	beq.w	810683a <_printf_float+0xbe>
 8106a4c:	f109 0901 	add.w	r9, r9, #1
 8106a50:	e7ee      	b.n	8106a30 <_printf_float+0x2b4>
 8106a52:	bf00      	nop
 8106a54:	7fefffff 	.word	0x7fefffff
 8106a58:	0810afc4 	.word	0x0810afc4
 8106a5c:	0810afc8 	.word	0x0810afc8
 8106a60:	0810afcc 	.word	0x0810afcc
 8106a64:	0810afd0 	.word	0x0810afd0
 8106a68:	0810afd4 	.word	0x0810afd4
 8106a6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106a6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8106a70:	429a      	cmp	r2, r3
 8106a72:	bfa8      	it	ge
 8106a74:	461a      	movge	r2, r3
 8106a76:	2a00      	cmp	r2, #0
 8106a78:	4691      	mov	r9, r2
 8106a7a:	dc37      	bgt.n	8106aec <_printf_float+0x370>
 8106a7c:	f04f 0b00 	mov.w	fp, #0
 8106a80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8106a84:	f104 021a 	add.w	r2, r4, #26
 8106a88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8106a8a:	9305      	str	r3, [sp, #20]
 8106a8c:	eba3 0309 	sub.w	r3, r3, r9
 8106a90:	455b      	cmp	r3, fp
 8106a92:	dc33      	bgt.n	8106afc <_printf_float+0x380>
 8106a94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106a98:	429a      	cmp	r2, r3
 8106a9a:	db3b      	blt.n	8106b14 <_printf_float+0x398>
 8106a9c:	6823      	ldr	r3, [r4, #0]
 8106a9e:	07da      	lsls	r2, r3, #31
 8106aa0:	d438      	bmi.n	8106b14 <_printf_float+0x398>
 8106aa2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8106aa6:	eba2 0903 	sub.w	r9, r2, r3
 8106aaa:	9b05      	ldr	r3, [sp, #20]
 8106aac:	1ad2      	subs	r2, r2, r3
 8106aae:	4591      	cmp	r9, r2
 8106ab0:	bfa8      	it	ge
 8106ab2:	4691      	movge	r9, r2
 8106ab4:	f1b9 0f00 	cmp.w	r9, #0
 8106ab8:	dc35      	bgt.n	8106b26 <_printf_float+0x3aa>
 8106aba:	f04f 0800 	mov.w	r8, #0
 8106abe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8106ac2:	f104 0a1a 	add.w	sl, r4, #26
 8106ac6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8106aca:	1a9b      	subs	r3, r3, r2
 8106acc:	eba3 0309 	sub.w	r3, r3, r9
 8106ad0:	4543      	cmp	r3, r8
 8106ad2:	f77f af79 	ble.w	81069c8 <_printf_float+0x24c>
 8106ad6:	2301      	movs	r3, #1
 8106ad8:	4652      	mov	r2, sl
 8106ada:	4631      	mov	r1, r6
 8106adc:	4628      	mov	r0, r5
 8106ade:	47b8      	blx	r7
 8106ae0:	3001      	adds	r0, #1
 8106ae2:	f43f aeaa 	beq.w	810683a <_printf_float+0xbe>
 8106ae6:	f108 0801 	add.w	r8, r8, #1
 8106aea:	e7ec      	b.n	8106ac6 <_printf_float+0x34a>
 8106aec:	4613      	mov	r3, r2
 8106aee:	4631      	mov	r1, r6
 8106af0:	4642      	mov	r2, r8
 8106af2:	4628      	mov	r0, r5
 8106af4:	47b8      	blx	r7
 8106af6:	3001      	adds	r0, #1
 8106af8:	d1c0      	bne.n	8106a7c <_printf_float+0x300>
 8106afa:	e69e      	b.n	810683a <_printf_float+0xbe>
 8106afc:	2301      	movs	r3, #1
 8106afe:	4631      	mov	r1, r6
 8106b00:	4628      	mov	r0, r5
 8106b02:	9205      	str	r2, [sp, #20]
 8106b04:	47b8      	blx	r7
 8106b06:	3001      	adds	r0, #1
 8106b08:	f43f ae97 	beq.w	810683a <_printf_float+0xbe>
 8106b0c:	9a05      	ldr	r2, [sp, #20]
 8106b0e:	f10b 0b01 	add.w	fp, fp, #1
 8106b12:	e7b9      	b.n	8106a88 <_printf_float+0x30c>
 8106b14:	ee18 3a10 	vmov	r3, s16
 8106b18:	4652      	mov	r2, sl
 8106b1a:	4631      	mov	r1, r6
 8106b1c:	4628      	mov	r0, r5
 8106b1e:	47b8      	blx	r7
 8106b20:	3001      	adds	r0, #1
 8106b22:	d1be      	bne.n	8106aa2 <_printf_float+0x326>
 8106b24:	e689      	b.n	810683a <_printf_float+0xbe>
 8106b26:	9a05      	ldr	r2, [sp, #20]
 8106b28:	464b      	mov	r3, r9
 8106b2a:	4442      	add	r2, r8
 8106b2c:	4631      	mov	r1, r6
 8106b2e:	4628      	mov	r0, r5
 8106b30:	47b8      	blx	r7
 8106b32:	3001      	adds	r0, #1
 8106b34:	d1c1      	bne.n	8106aba <_printf_float+0x33e>
 8106b36:	e680      	b.n	810683a <_printf_float+0xbe>
 8106b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8106b3a:	2a01      	cmp	r2, #1
 8106b3c:	dc01      	bgt.n	8106b42 <_printf_float+0x3c6>
 8106b3e:	07db      	lsls	r3, r3, #31
 8106b40:	d53a      	bpl.n	8106bb8 <_printf_float+0x43c>
 8106b42:	2301      	movs	r3, #1
 8106b44:	4642      	mov	r2, r8
 8106b46:	4631      	mov	r1, r6
 8106b48:	4628      	mov	r0, r5
 8106b4a:	47b8      	blx	r7
 8106b4c:	3001      	adds	r0, #1
 8106b4e:	f43f ae74 	beq.w	810683a <_printf_float+0xbe>
 8106b52:	ee18 3a10 	vmov	r3, s16
 8106b56:	4652      	mov	r2, sl
 8106b58:	4631      	mov	r1, r6
 8106b5a:	4628      	mov	r0, r5
 8106b5c:	47b8      	blx	r7
 8106b5e:	3001      	adds	r0, #1
 8106b60:	f43f ae6b 	beq.w	810683a <_printf_float+0xbe>
 8106b64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8106b68:	2200      	movs	r2, #0
 8106b6a:	2300      	movs	r3, #0
 8106b6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8106b70:	f7fa f832 	bl	8100bd8 <__aeabi_dcmpeq>
 8106b74:	b9d8      	cbnz	r0, 8106bae <_printf_float+0x432>
 8106b76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8106b7a:	f108 0201 	add.w	r2, r8, #1
 8106b7e:	4631      	mov	r1, r6
 8106b80:	4628      	mov	r0, r5
 8106b82:	47b8      	blx	r7
 8106b84:	3001      	adds	r0, #1
 8106b86:	d10e      	bne.n	8106ba6 <_printf_float+0x42a>
 8106b88:	e657      	b.n	810683a <_printf_float+0xbe>
 8106b8a:	2301      	movs	r3, #1
 8106b8c:	4652      	mov	r2, sl
 8106b8e:	4631      	mov	r1, r6
 8106b90:	4628      	mov	r0, r5
 8106b92:	47b8      	blx	r7
 8106b94:	3001      	adds	r0, #1
 8106b96:	f43f ae50 	beq.w	810683a <_printf_float+0xbe>
 8106b9a:	f108 0801 	add.w	r8, r8, #1
 8106b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8106ba0:	3b01      	subs	r3, #1
 8106ba2:	4543      	cmp	r3, r8
 8106ba4:	dcf1      	bgt.n	8106b8a <_printf_float+0x40e>
 8106ba6:	464b      	mov	r3, r9
 8106ba8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8106bac:	e6da      	b.n	8106964 <_printf_float+0x1e8>
 8106bae:	f04f 0800 	mov.w	r8, #0
 8106bb2:	f104 0a1a 	add.w	sl, r4, #26
 8106bb6:	e7f2      	b.n	8106b9e <_printf_float+0x422>
 8106bb8:	2301      	movs	r3, #1
 8106bba:	4642      	mov	r2, r8
 8106bbc:	e7df      	b.n	8106b7e <_printf_float+0x402>
 8106bbe:	2301      	movs	r3, #1
 8106bc0:	464a      	mov	r2, r9
 8106bc2:	4631      	mov	r1, r6
 8106bc4:	4628      	mov	r0, r5
 8106bc6:	47b8      	blx	r7
 8106bc8:	3001      	adds	r0, #1
 8106bca:	f43f ae36 	beq.w	810683a <_printf_float+0xbe>
 8106bce:	f108 0801 	add.w	r8, r8, #1
 8106bd2:	68e3      	ldr	r3, [r4, #12]
 8106bd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8106bd6:	1a5b      	subs	r3, r3, r1
 8106bd8:	4543      	cmp	r3, r8
 8106bda:	dcf0      	bgt.n	8106bbe <_printf_float+0x442>
 8106bdc:	e6f8      	b.n	81069d0 <_printf_float+0x254>
 8106bde:	f04f 0800 	mov.w	r8, #0
 8106be2:	f104 0919 	add.w	r9, r4, #25
 8106be6:	e7f4      	b.n	8106bd2 <_printf_float+0x456>

08106be8 <_printf_common>:
 8106be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106bec:	4616      	mov	r6, r2
 8106bee:	4699      	mov	r9, r3
 8106bf0:	688a      	ldr	r2, [r1, #8]
 8106bf2:	690b      	ldr	r3, [r1, #16]
 8106bf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8106bf8:	4293      	cmp	r3, r2
 8106bfa:	bfb8      	it	lt
 8106bfc:	4613      	movlt	r3, r2
 8106bfe:	6033      	str	r3, [r6, #0]
 8106c00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8106c04:	4607      	mov	r7, r0
 8106c06:	460c      	mov	r4, r1
 8106c08:	b10a      	cbz	r2, 8106c0e <_printf_common+0x26>
 8106c0a:	3301      	adds	r3, #1
 8106c0c:	6033      	str	r3, [r6, #0]
 8106c0e:	6823      	ldr	r3, [r4, #0]
 8106c10:	0699      	lsls	r1, r3, #26
 8106c12:	bf42      	ittt	mi
 8106c14:	6833      	ldrmi	r3, [r6, #0]
 8106c16:	3302      	addmi	r3, #2
 8106c18:	6033      	strmi	r3, [r6, #0]
 8106c1a:	6825      	ldr	r5, [r4, #0]
 8106c1c:	f015 0506 	ands.w	r5, r5, #6
 8106c20:	d106      	bne.n	8106c30 <_printf_common+0x48>
 8106c22:	f104 0a19 	add.w	sl, r4, #25
 8106c26:	68e3      	ldr	r3, [r4, #12]
 8106c28:	6832      	ldr	r2, [r6, #0]
 8106c2a:	1a9b      	subs	r3, r3, r2
 8106c2c:	42ab      	cmp	r3, r5
 8106c2e:	dc26      	bgt.n	8106c7e <_printf_common+0x96>
 8106c30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8106c34:	1e13      	subs	r3, r2, #0
 8106c36:	6822      	ldr	r2, [r4, #0]
 8106c38:	bf18      	it	ne
 8106c3a:	2301      	movne	r3, #1
 8106c3c:	0692      	lsls	r2, r2, #26
 8106c3e:	d42b      	bmi.n	8106c98 <_printf_common+0xb0>
 8106c40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8106c44:	4649      	mov	r1, r9
 8106c46:	4638      	mov	r0, r7
 8106c48:	47c0      	blx	r8
 8106c4a:	3001      	adds	r0, #1
 8106c4c:	d01e      	beq.n	8106c8c <_printf_common+0xa4>
 8106c4e:	6823      	ldr	r3, [r4, #0]
 8106c50:	6922      	ldr	r2, [r4, #16]
 8106c52:	f003 0306 	and.w	r3, r3, #6
 8106c56:	2b04      	cmp	r3, #4
 8106c58:	bf02      	ittt	eq
 8106c5a:	68e5      	ldreq	r5, [r4, #12]
 8106c5c:	6833      	ldreq	r3, [r6, #0]
 8106c5e:	1aed      	subeq	r5, r5, r3
 8106c60:	68a3      	ldr	r3, [r4, #8]
 8106c62:	bf0c      	ite	eq
 8106c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8106c68:	2500      	movne	r5, #0
 8106c6a:	4293      	cmp	r3, r2
 8106c6c:	bfc4      	itt	gt
 8106c6e:	1a9b      	subgt	r3, r3, r2
 8106c70:	18ed      	addgt	r5, r5, r3
 8106c72:	2600      	movs	r6, #0
 8106c74:	341a      	adds	r4, #26
 8106c76:	42b5      	cmp	r5, r6
 8106c78:	d11a      	bne.n	8106cb0 <_printf_common+0xc8>
 8106c7a:	2000      	movs	r0, #0
 8106c7c:	e008      	b.n	8106c90 <_printf_common+0xa8>
 8106c7e:	2301      	movs	r3, #1
 8106c80:	4652      	mov	r2, sl
 8106c82:	4649      	mov	r1, r9
 8106c84:	4638      	mov	r0, r7
 8106c86:	47c0      	blx	r8
 8106c88:	3001      	adds	r0, #1
 8106c8a:	d103      	bne.n	8106c94 <_printf_common+0xac>
 8106c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8106c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106c94:	3501      	adds	r5, #1
 8106c96:	e7c6      	b.n	8106c26 <_printf_common+0x3e>
 8106c98:	18e1      	adds	r1, r4, r3
 8106c9a:	1c5a      	adds	r2, r3, #1
 8106c9c:	2030      	movs	r0, #48	; 0x30
 8106c9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8106ca2:	4422      	add	r2, r4
 8106ca4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8106ca8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8106cac:	3302      	adds	r3, #2
 8106cae:	e7c7      	b.n	8106c40 <_printf_common+0x58>
 8106cb0:	2301      	movs	r3, #1
 8106cb2:	4622      	mov	r2, r4
 8106cb4:	4649      	mov	r1, r9
 8106cb6:	4638      	mov	r0, r7
 8106cb8:	47c0      	blx	r8
 8106cba:	3001      	adds	r0, #1
 8106cbc:	d0e6      	beq.n	8106c8c <_printf_common+0xa4>
 8106cbe:	3601      	adds	r6, #1
 8106cc0:	e7d9      	b.n	8106c76 <_printf_common+0x8e>
	...

08106cc4 <_printf_i>:
 8106cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8106cc8:	7e0f      	ldrb	r7, [r1, #24]
 8106cca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8106ccc:	2f78      	cmp	r7, #120	; 0x78
 8106cce:	4691      	mov	r9, r2
 8106cd0:	4680      	mov	r8, r0
 8106cd2:	460c      	mov	r4, r1
 8106cd4:	469a      	mov	sl, r3
 8106cd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8106cda:	d807      	bhi.n	8106cec <_printf_i+0x28>
 8106cdc:	2f62      	cmp	r7, #98	; 0x62
 8106cde:	d80a      	bhi.n	8106cf6 <_printf_i+0x32>
 8106ce0:	2f00      	cmp	r7, #0
 8106ce2:	f000 80d4 	beq.w	8106e8e <_printf_i+0x1ca>
 8106ce6:	2f58      	cmp	r7, #88	; 0x58
 8106ce8:	f000 80c0 	beq.w	8106e6c <_printf_i+0x1a8>
 8106cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106cf0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8106cf4:	e03a      	b.n	8106d6c <_printf_i+0xa8>
 8106cf6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8106cfa:	2b15      	cmp	r3, #21
 8106cfc:	d8f6      	bhi.n	8106cec <_printf_i+0x28>
 8106cfe:	a101      	add	r1, pc, #4	; (adr r1, 8106d04 <_printf_i+0x40>)
 8106d00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8106d04:	08106d5d 	.word	0x08106d5d
 8106d08:	08106d71 	.word	0x08106d71
 8106d0c:	08106ced 	.word	0x08106ced
 8106d10:	08106ced 	.word	0x08106ced
 8106d14:	08106ced 	.word	0x08106ced
 8106d18:	08106ced 	.word	0x08106ced
 8106d1c:	08106d71 	.word	0x08106d71
 8106d20:	08106ced 	.word	0x08106ced
 8106d24:	08106ced 	.word	0x08106ced
 8106d28:	08106ced 	.word	0x08106ced
 8106d2c:	08106ced 	.word	0x08106ced
 8106d30:	08106e75 	.word	0x08106e75
 8106d34:	08106d9d 	.word	0x08106d9d
 8106d38:	08106e2f 	.word	0x08106e2f
 8106d3c:	08106ced 	.word	0x08106ced
 8106d40:	08106ced 	.word	0x08106ced
 8106d44:	08106e97 	.word	0x08106e97
 8106d48:	08106ced 	.word	0x08106ced
 8106d4c:	08106d9d 	.word	0x08106d9d
 8106d50:	08106ced 	.word	0x08106ced
 8106d54:	08106ced 	.word	0x08106ced
 8106d58:	08106e37 	.word	0x08106e37
 8106d5c:	682b      	ldr	r3, [r5, #0]
 8106d5e:	1d1a      	adds	r2, r3, #4
 8106d60:	681b      	ldr	r3, [r3, #0]
 8106d62:	602a      	str	r2, [r5, #0]
 8106d64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8106d68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8106d6c:	2301      	movs	r3, #1
 8106d6e:	e09f      	b.n	8106eb0 <_printf_i+0x1ec>
 8106d70:	6820      	ldr	r0, [r4, #0]
 8106d72:	682b      	ldr	r3, [r5, #0]
 8106d74:	0607      	lsls	r7, r0, #24
 8106d76:	f103 0104 	add.w	r1, r3, #4
 8106d7a:	6029      	str	r1, [r5, #0]
 8106d7c:	d501      	bpl.n	8106d82 <_printf_i+0xbe>
 8106d7e:	681e      	ldr	r6, [r3, #0]
 8106d80:	e003      	b.n	8106d8a <_printf_i+0xc6>
 8106d82:	0646      	lsls	r6, r0, #25
 8106d84:	d5fb      	bpl.n	8106d7e <_printf_i+0xba>
 8106d86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8106d8a:	2e00      	cmp	r6, #0
 8106d8c:	da03      	bge.n	8106d96 <_printf_i+0xd2>
 8106d8e:	232d      	movs	r3, #45	; 0x2d
 8106d90:	4276      	negs	r6, r6
 8106d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106d96:	485a      	ldr	r0, [pc, #360]	; (8106f00 <_printf_i+0x23c>)
 8106d98:	230a      	movs	r3, #10
 8106d9a:	e012      	b.n	8106dc2 <_printf_i+0xfe>
 8106d9c:	682b      	ldr	r3, [r5, #0]
 8106d9e:	6820      	ldr	r0, [r4, #0]
 8106da0:	1d19      	adds	r1, r3, #4
 8106da2:	6029      	str	r1, [r5, #0]
 8106da4:	0605      	lsls	r5, r0, #24
 8106da6:	d501      	bpl.n	8106dac <_printf_i+0xe8>
 8106da8:	681e      	ldr	r6, [r3, #0]
 8106daa:	e002      	b.n	8106db2 <_printf_i+0xee>
 8106dac:	0641      	lsls	r1, r0, #25
 8106dae:	d5fb      	bpl.n	8106da8 <_printf_i+0xe4>
 8106db0:	881e      	ldrh	r6, [r3, #0]
 8106db2:	4853      	ldr	r0, [pc, #332]	; (8106f00 <_printf_i+0x23c>)
 8106db4:	2f6f      	cmp	r7, #111	; 0x6f
 8106db6:	bf0c      	ite	eq
 8106db8:	2308      	moveq	r3, #8
 8106dba:	230a      	movne	r3, #10
 8106dbc:	2100      	movs	r1, #0
 8106dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8106dc2:	6865      	ldr	r5, [r4, #4]
 8106dc4:	60a5      	str	r5, [r4, #8]
 8106dc6:	2d00      	cmp	r5, #0
 8106dc8:	bfa2      	ittt	ge
 8106dca:	6821      	ldrge	r1, [r4, #0]
 8106dcc:	f021 0104 	bicge.w	r1, r1, #4
 8106dd0:	6021      	strge	r1, [r4, #0]
 8106dd2:	b90e      	cbnz	r6, 8106dd8 <_printf_i+0x114>
 8106dd4:	2d00      	cmp	r5, #0
 8106dd6:	d04b      	beq.n	8106e70 <_printf_i+0x1ac>
 8106dd8:	4615      	mov	r5, r2
 8106dda:	fbb6 f1f3 	udiv	r1, r6, r3
 8106dde:	fb03 6711 	mls	r7, r3, r1, r6
 8106de2:	5dc7      	ldrb	r7, [r0, r7]
 8106de4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8106de8:	4637      	mov	r7, r6
 8106dea:	42bb      	cmp	r3, r7
 8106dec:	460e      	mov	r6, r1
 8106dee:	d9f4      	bls.n	8106dda <_printf_i+0x116>
 8106df0:	2b08      	cmp	r3, #8
 8106df2:	d10b      	bne.n	8106e0c <_printf_i+0x148>
 8106df4:	6823      	ldr	r3, [r4, #0]
 8106df6:	07de      	lsls	r6, r3, #31
 8106df8:	d508      	bpl.n	8106e0c <_printf_i+0x148>
 8106dfa:	6923      	ldr	r3, [r4, #16]
 8106dfc:	6861      	ldr	r1, [r4, #4]
 8106dfe:	4299      	cmp	r1, r3
 8106e00:	bfde      	ittt	le
 8106e02:	2330      	movle	r3, #48	; 0x30
 8106e04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8106e08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8106e0c:	1b52      	subs	r2, r2, r5
 8106e0e:	6122      	str	r2, [r4, #16]
 8106e10:	f8cd a000 	str.w	sl, [sp]
 8106e14:	464b      	mov	r3, r9
 8106e16:	aa03      	add	r2, sp, #12
 8106e18:	4621      	mov	r1, r4
 8106e1a:	4640      	mov	r0, r8
 8106e1c:	f7ff fee4 	bl	8106be8 <_printf_common>
 8106e20:	3001      	adds	r0, #1
 8106e22:	d14a      	bne.n	8106eba <_printf_i+0x1f6>
 8106e24:	f04f 30ff 	mov.w	r0, #4294967295
 8106e28:	b004      	add	sp, #16
 8106e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106e2e:	6823      	ldr	r3, [r4, #0]
 8106e30:	f043 0320 	orr.w	r3, r3, #32
 8106e34:	6023      	str	r3, [r4, #0]
 8106e36:	4833      	ldr	r0, [pc, #204]	; (8106f04 <_printf_i+0x240>)
 8106e38:	2778      	movs	r7, #120	; 0x78
 8106e3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8106e3e:	6823      	ldr	r3, [r4, #0]
 8106e40:	6829      	ldr	r1, [r5, #0]
 8106e42:	061f      	lsls	r7, r3, #24
 8106e44:	f851 6b04 	ldr.w	r6, [r1], #4
 8106e48:	d402      	bmi.n	8106e50 <_printf_i+0x18c>
 8106e4a:	065f      	lsls	r7, r3, #25
 8106e4c:	bf48      	it	mi
 8106e4e:	b2b6      	uxthmi	r6, r6
 8106e50:	07df      	lsls	r7, r3, #31
 8106e52:	bf48      	it	mi
 8106e54:	f043 0320 	orrmi.w	r3, r3, #32
 8106e58:	6029      	str	r1, [r5, #0]
 8106e5a:	bf48      	it	mi
 8106e5c:	6023      	strmi	r3, [r4, #0]
 8106e5e:	b91e      	cbnz	r6, 8106e68 <_printf_i+0x1a4>
 8106e60:	6823      	ldr	r3, [r4, #0]
 8106e62:	f023 0320 	bic.w	r3, r3, #32
 8106e66:	6023      	str	r3, [r4, #0]
 8106e68:	2310      	movs	r3, #16
 8106e6a:	e7a7      	b.n	8106dbc <_printf_i+0xf8>
 8106e6c:	4824      	ldr	r0, [pc, #144]	; (8106f00 <_printf_i+0x23c>)
 8106e6e:	e7e4      	b.n	8106e3a <_printf_i+0x176>
 8106e70:	4615      	mov	r5, r2
 8106e72:	e7bd      	b.n	8106df0 <_printf_i+0x12c>
 8106e74:	682b      	ldr	r3, [r5, #0]
 8106e76:	6826      	ldr	r6, [r4, #0]
 8106e78:	6961      	ldr	r1, [r4, #20]
 8106e7a:	1d18      	adds	r0, r3, #4
 8106e7c:	6028      	str	r0, [r5, #0]
 8106e7e:	0635      	lsls	r5, r6, #24
 8106e80:	681b      	ldr	r3, [r3, #0]
 8106e82:	d501      	bpl.n	8106e88 <_printf_i+0x1c4>
 8106e84:	6019      	str	r1, [r3, #0]
 8106e86:	e002      	b.n	8106e8e <_printf_i+0x1ca>
 8106e88:	0670      	lsls	r0, r6, #25
 8106e8a:	d5fb      	bpl.n	8106e84 <_printf_i+0x1c0>
 8106e8c:	8019      	strh	r1, [r3, #0]
 8106e8e:	2300      	movs	r3, #0
 8106e90:	6123      	str	r3, [r4, #16]
 8106e92:	4615      	mov	r5, r2
 8106e94:	e7bc      	b.n	8106e10 <_printf_i+0x14c>
 8106e96:	682b      	ldr	r3, [r5, #0]
 8106e98:	1d1a      	adds	r2, r3, #4
 8106e9a:	602a      	str	r2, [r5, #0]
 8106e9c:	681d      	ldr	r5, [r3, #0]
 8106e9e:	6862      	ldr	r2, [r4, #4]
 8106ea0:	2100      	movs	r1, #0
 8106ea2:	4628      	mov	r0, r5
 8106ea4:	f7f9 fa1c 	bl	81002e0 <memchr>
 8106ea8:	b108      	cbz	r0, 8106eae <_printf_i+0x1ea>
 8106eaa:	1b40      	subs	r0, r0, r5
 8106eac:	6060      	str	r0, [r4, #4]
 8106eae:	6863      	ldr	r3, [r4, #4]
 8106eb0:	6123      	str	r3, [r4, #16]
 8106eb2:	2300      	movs	r3, #0
 8106eb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8106eb8:	e7aa      	b.n	8106e10 <_printf_i+0x14c>
 8106eba:	6923      	ldr	r3, [r4, #16]
 8106ebc:	462a      	mov	r2, r5
 8106ebe:	4649      	mov	r1, r9
 8106ec0:	4640      	mov	r0, r8
 8106ec2:	47d0      	blx	sl
 8106ec4:	3001      	adds	r0, #1
 8106ec6:	d0ad      	beq.n	8106e24 <_printf_i+0x160>
 8106ec8:	6823      	ldr	r3, [r4, #0]
 8106eca:	079b      	lsls	r3, r3, #30
 8106ecc:	d413      	bmi.n	8106ef6 <_printf_i+0x232>
 8106ece:	68e0      	ldr	r0, [r4, #12]
 8106ed0:	9b03      	ldr	r3, [sp, #12]
 8106ed2:	4298      	cmp	r0, r3
 8106ed4:	bfb8      	it	lt
 8106ed6:	4618      	movlt	r0, r3
 8106ed8:	e7a6      	b.n	8106e28 <_printf_i+0x164>
 8106eda:	2301      	movs	r3, #1
 8106edc:	4632      	mov	r2, r6
 8106ede:	4649      	mov	r1, r9
 8106ee0:	4640      	mov	r0, r8
 8106ee2:	47d0      	blx	sl
 8106ee4:	3001      	adds	r0, #1
 8106ee6:	d09d      	beq.n	8106e24 <_printf_i+0x160>
 8106ee8:	3501      	adds	r5, #1
 8106eea:	68e3      	ldr	r3, [r4, #12]
 8106eec:	9903      	ldr	r1, [sp, #12]
 8106eee:	1a5b      	subs	r3, r3, r1
 8106ef0:	42ab      	cmp	r3, r5
 8106ef2:	dcf2      	bgt.n	8106eda <_printf_i+0x216>
 8106ef4:	e7eb      	b.n	8106ece <_printf_i+0x20a>
 8106ef6:	2500      	movs	r5, #0
 8106ef8:	f104 0619 	add.w	r6, r4, #25
 8106efc:	e7f5      	b.n	8106eea <_printf_i+0x226>
 8106efe:	bf00      	nop
 8106f00:	0810afd6 	.word	0x0810afd6
 8106f04:	0810afe7 	.word	0x0810afe7

08106f08 <_scanf_float>:
 8106f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106f0c:	b087      	sub	sp, #28
 8106f0e:	4617      	mov	r7, r2
 8106f10:	9303      	str	r3, [sp, #12]
 8106f12:	688b      	ldr	r3, [r1, #8]
 8106f14:	1e5a      	subs	r2, r3, #1
 8106f16:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8106f1a:	bf83      	ittte	hi
 8106f1c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8106f20:	195b      	addhi	r3, r3, r5
 8106f22:	9302      	strhi	r3, [sp, #8]
 8106f24:	2300      	movls	r3, #0
 8106f26:	bf86      	itte	hi
 8106f28:	f240 135d 	movwhi	r3, #349	; 0x15d
 8106f2c:	608b      	strhi	r3, [r1, #8]
 8106f2e:	9302      	strls	r3, [sp, #8]
 8106f30:	680b      	ldr	r3, [r1, #0]
 8106f32:	468b      	mov	fp, r1
 8106f34:	2500      	movs	r5, #0
 8106f36:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8106f3a:	f84b 3b1c 	str.w	r3, [fp], #28
 8106f3e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8106f42:	4680      	mov	r8, r0
 8106f44:	460c      	mov	r4, r1
 8106f46:	465e      	mov	r6, fp
 8106f48:	46aa      	mov	sl, r5
 8106f4a:	46a9      	mov	r9, r5
 8106f4c:	9501      	str	r5, [sp, #4]
 8106f4e:	68a2      	ldr	r2, [r4, #8]
 8106f50:	b152      	cbz	r2, 8106f68 <_scanf_float+0x60>
 8106f52:	683b      	ldr	r3, [r7, #0]
 8106f54:	781b      	ldrb	r3, [r3, #0]
 8106f56:	2b4e      	cmp	r3, #78	; 0x4e
 8106f58:	d864      	bhi.n	8107024 <_scanf_float+0x11c>
 8106f5a:	2b40      	cmp	r3, #64	; 0x40
 8106f5c:	d83c      	bhi.n	8106fd8 <_scanf_float+0xd0>
 8106f5e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8106f62:	b2c8      	uxtb	r0, r1
 8106f64:	280e      	cmp	r0, #14
 8106f66:	d93a      	bls.n	8106fde <_scanf_float+0xd6>
 8106f68:	f1b9 0f00 	cmp.w	r9, #0
 8106f6c:	d003      	beq.n	8106f76 <_scanf_float+0x6e>
 8106f6e:	6823      	ldr	r3, [r4, #0]
 8106f70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106f74:	6023      	str	r3, [r4, #0]
 8106f76:	f10a 3aff 	add.w	sl, sl, #4294967295
 8106f7a:	f1ba 0f01 	cmp.w	sl, #1
 8106f7e:	f200 8113 	bhi.w	81071a8 <_scanf_float+0x2a0>
 8106f82:	455e      	cmp	r6, fp
 8106f84:	f200 8105 	bhi.w	8107192 <_scanf_float+0x28a>
 8106f88:	2501      	movs	r5, #1
 8106f8a:	4628      	mov	r0, r5
 8106f8c:	b007      	add	sp, #28
 8106f8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106f92:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8106f96:	2a0d      	cmp	r2, #13
 8106f98:	d8e6      	bhi.n	8106f68 <_scanf_float+0x60>
 8106f9a:	a101      	add	r1, pc, #4	; (adr r1, 8106fa0 <_scanf_float+0x98>)
 8106f9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8106fa0:	081070df 	.word	0x081070df
 8106fa4:	08106f69 	.word	0x08106f69
 8106fa8:	08106f69 	.word	0x08106f69
 8106fac:	08106f69 	.word	0x08106f69
 8106fb0:	0810713f 	.word	0x0810713f
 8106fb4:	08107117 	.word	0x08107117
 8106fb8:	08106f69 	.word	0x08106f69
 8106fbc:	08106f69 	.word	0x08106f69
 8106fc0:	081070ed 	.word	0x081070ed
 8106fc4:	08106f69 	.word	0x08106f69
 8106fc8:	08106f69 	.word	0x08106f69
 8106fcc:	08106f69 	.word	0x08106f69
 8106fd0:	08106f69 	.word	0x08106f69
 8106fd4:	081070a5 	.word	0x081070a5
 8106fd8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8106fdc:	e7db      	b.n	8106f96 <_scanf_float+0x8e>
 8106fde:	290e      	cmp	r1, #14
 8106fe0:	d8c2      	bhi.n	8106f68 <_scanf_float+0x60>
 8106fe2:	a001      	add	r0, pc, #4	; (adr r0, 8106fe8 <_scanf_float+0xe0>)
 8106fe4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8106fe8:	08107097 	.word	0x08107097
 8106fec:	08106f69 	.word	0x08106f69
 8106ff0:	08107097 	.word	0x08107097
 8106ff4:	0810712b 	.word	0x0810712b
 8106ff8:	08106f69 	.word	0x08106f69
 8106ffc:	08107045 	.word	0x08107045
 8107000:	08107081 	.word	0x08107081
 8107004:	08107081 	.word	0x08107081
 8107008:	08107081 	.word	0x08107081
 810700c:	08107081 	.word	0x08107081
 8107010:	08107081 	.word	0x08107081
 8107014:	08107081 	.word	0x08107081
 8107018:	08107081 	.word	0x08107081
 810701c:	08107081 	.word	0x08107081
 8107020:	08107081 	.word	0x08107081
 8107024:	2b6e      	cmp	r3, #110	; 0x6e
 8107026:	d809      	bhi.n	810703c <_scanf_float+0x134>
 8107028:	2b60      	cmp	r3, #96	; 0x60
 810702a:	d8b2      	bhi.n	8106f92 <_scanf_float+0x8a>
 810702c:	2b54      	cmp	r3, #84	; 0x54
 810702e:	d077      	beq.n	8107120 <_scanf_float+0x218>
 8107030:	2b59      	cmp	r3, #89	; 0x59
 8107032:	d199      	bne.n	8106f68 <_scanf_float+0x60>
 8107034:	2d07      	cmp	r5, #7
 8107036:	d197      	bne.n	8106f68 <_scanf_float+0x60>
 8107038:	2508      	movs	r5, #8
 810703a:	e029      	b.n	8107090 <_scanf_float+0x188>
 810703c:	2b74      	cmp	r3, #116	; 0x74
 810703e:	d06f      	beq.n	8107120 <_scanf_float+0x218>
 8107040:	2b79      	cmp	r3, #121	; 0x79
 8107042:	e7f6      	b.n	8107032 <_scanf_float+0x12a>
 8107044:	6821      	ldr	r1, [r4, #0]
 8107046:	05c8      	lsls	r0, r1, #23
 8107048:	d51a      	bpl.n	8107080 <_scanf_float+0x178>
 810704a:	9b02      	ldr	r3, [sp, #8]
 810704c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8107050:	6021      	str	r1, [r4, #0]
 8107052:	f109 0901 	add.w	r9, r9, #1
 8107056:	b11b      	cbz	r3, 8107060 <_scanf_float+0x158>
 8107058:	3b01      	subs	r3, #1
 810705a:	3201      	adds	r2, #1
 810705c:	9302      	str	r3, [sp, #8]
 810705e:	60a2      	str	r2, [r4, #8]
 8107060:	68a3      	ldr	r3, [r4, #8]
 8107062:	3b01      	subs	r3, #1
 8107064:	60a3      	str	r3, [r4, #8]
 8107066:	6923      	ldr	r3, [r4, #16]
 8107068:	3301      	adds	r3, #1
 810706a:	6123      	str	r3, [r4, #16]
 810706c:	687b      	ldr	r3, [r7, #4]
 810706e:	3b01      	subs	r3, #1
 8107070:	2b00      	cmp	r3, #0
 8107072:	607b      	str	r3, [r7, #4]
 8107074:	f340 8084 	ble.w	8107180 <_scanf_float+0x278>
 8107078:	683b      	ldr	r3, [r7, #0]
 810707a:	3301      	adds	r3, #1
 810707c:	603b      	str	r3, [r7, #0]
 810707e:	e766      	b.n	8106f4e <_scanf_float+0x46>
 8107080:	eb1a 0f05 	cmn.w	sl, r5
 8107084:	f47f af70 	bne.w	8106f68 <_scanf_float+0x60>
 8107088:	6822      	ldr	r2, [r4, #0]
 810708a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 810708e:	6022      	str	r2, [r4, #0]
 8107090:	f806 3b01 	strb.w	r3, [r6], #1
 8107094:	e7e4      	b.n	8107060 <_scanf_float+0x158>
 8107096:	6822      	ldr	r2, [r4, #0]
 8107098:	0610      	lsls	r0, r2, #24
 810709a:	f57f af65 	bpl.w	8106f68 <_scanf_float+0x60>
 810709e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 81070a2:	e7f4      	b.n	810708e <_scanf_float+0x186>
 81070a4:	f1ba 0f00 	cmp.w	sl, #0
 81070a8:	d10e      	bne.n	81070c8 <_scanf_float+0x1c0>
 81070aa:	f1b9 0f00 	cmp.w	r9, #0
 81070ae:	d10e      	bne.n	81070ce <_scanf_float+0x1c6>
 81070b0:	6822      	ldr	r2, [r4, #0]
 81070b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81070b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 81070ba:	d108      	bne.n	81070ce <_scanf_float+0x1c6>
 81070bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 81070c0:	6022      	str	r2, [r4, #0]
 81070c2:	f04f 0a01 	mov.w	sl, #1
 81070c6:	e7e3      	b.n	8107090 <_scanf_float+0x188>
 81070c8:	f1ba 0f02 	cmp.w	sl, #2
 81070cc:	d055      	beq.n	810717a <_scanf_float+0x272>
 81070ce:	2d01      	cmp	r5, #1
 81070d0:	d002      	beq.n	81070d8 <_scanf_float+0x1d0>
 81070d2:	2d04      	cmp	r5, #4
 81070d4:	f47f af48 	bne.w	8106f68 <_scanf_float+0x60>
 81070d8:	3501      	adds	r5, #1
 81070da:	b2ed      	uxtb	r5, r5
 81070dc:	e7d8      	b.n	8107090 <_scanf_float+0x188>
 81070de:	f1ba 0f01 	cmp.w	sl, #1
 81070e2:	f47f af41 	bne.w	8106f68 <_scanf_float+0x60>
 81070e6:	f04f 0a02 	mov.w	sl, #2
 81070ea:	e7d1      	b.n	8107090 <_scanf_float+0x188>
 81070ec:	b97d      	cbnz	r5, 810710e <_scanf_float+0x206>
 81070ee:	f1b9 0f00 	cmp.w	r9, #0
 81070f2:	f47f af3c 	bne.w	8106f6e <_scanf_float+0x66>
 81070f6:	6822      	ldr	r2, [r4, #0]
 81070f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 81070fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8107100:	f47f af39 	bne.w	8106f76 <_scanf_float+0x6e>
 8107104:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107108:	6022      	str	r2, [r4, #0]
 810710a:	2501      	movs	r5, #1
 810710c:	e7c0      	b.n	8107090 <_scanf_float+0x188>
 810710e:	2d03      	cmp	r5, #3
 8107110:	d0e2      	beq.n	81070d8 <_scanf_float+0x1d0>
 8107112:	2d05      	cmp	r5, #5
 8107114:	e7de      	b.n	81070d4 <_scanf_float+0x1cc>
 8107116:	2d02      	cmp	r5, #2
 8107118:	f47f af26 	bne.w	8106f68 <_scanf_float+0x60>
 810711c:	2503      	movs	r5, #3
 810711e:	e7b7      	b.n	8107090 <_scanf_float+0x188>
 8107120:	2d06      	cmp	r5, #6
 8107122:	f47f af21 	bne.w	8106f68 <_scanf_float+0x60>
 8107126:	2507      	movs	r5, #7
 8107128:	e7b2      	b.n	8107090 <_scanf_float+0x188>
 810712a:	6822      	ldr	r2, [r4, #0]
 810712c:	0591      	lsls	r1, r2, #22
 810712e:	f57f af1b 	bpl.w	8106f68 <_scanf_float+0x60>
 8107132:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8107136:	6022      	str	r2, [r4, #0]
 8107138:	f8cd 9004 	str.w	r9, [sp, #4]
 810713c:	e7a8      	b.n	8107090 <_scanf_float+0x188>
 810713e:	6822      	ldr	r2, [r4, #0]
 8107140:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8107144:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8107148:	d006      	beq.n	8107158 <_scanf_float+0x250>
 810714a:	0550      	lsls	r0, r2, #21
 810714c:	f57f af0c 	bpl.w	8106f68 <_scanf_float+0x60>
 8107150:	f1b9 0f00 	cmp.w	r9, #0
 8107154:	f43f af0f 	beq.w	8106f76 <_scanf_float+0x6e>
 8107158:	0591      	lsls	r1, r2, #22
 810715a:	bf58      	it	pl
 810715c:	9901      	ldrpl	r1, [sp, #4]
 810715e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8107162:	bf58      	it	pl
 8107164:	eba9 0101 	subpl.w	r1, r9, r1
 8107168:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 810716c:	bf58      	it	pl
 810716e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8107172:	6022      	str	r2, [r4, #0]
 8107174:	f04f 0900 	mov.w	r9, #0
 8107178:	e78a      	b.n	8107090 <_scanf_float+0x188>
 810717a:	f04f 0a03 	mov.w	sl, #3
 810717e:	e787      	b.n	8107090 <_scanf_float+0x188>
 8107180:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8107184:	4639      	mov	r1, r7
 8107186:	4640      	mov	r0, r8
 8107188:	4798      	blx	r3
 810718a:	2800      	cmp	r0, #0
 810718c:	f43f aedf 	beq.w	8106f4e <_scanf_float+0x46>
 8107190:	e6ea      	b.n	8106f68 <_scanf_float+0x60>
 8107192:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107196:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810719a:	463a      	mov	r2, r7
 810719c:	4640      	mov	r0, r8
 810719e:	4798      	blx	r3
 81071a0:	6923      	ldr	r3, [r4, #16]
 81071a2:	3b01      	subs	r3, #1
 81071a4:	6123      	str	r3, [r4, #16]
 81071a6:	e6ec      	b.n	8106f82 <_scanf_float+0x7a>
 81071a8:	1e6b      	subs	r3, r5, #1
 81071aa:	2b06      	cmp	r3, #6
 81071ac:	d825      	bhi.n	81071fa <_scanf_float+0x2f2>
 81071ae:	2d02      	cmp	r5, #2
 81071b0:	d836      	bhi.n	8107220 <_scanf_float+0x318>
 81071b2:	455e      	cmp	r6, fp
 81071b4:	f67f aee8 	bls.w	8106f88 <_scanf_float+0x80>
 81071b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81071bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81071c0:	463a      	mov	r2, r7
 81071c2:	4640      	mov	r0, r8
 81071c4:	4798      	blx	r3
 81071c6:	6923      	ldr	r3, [r4, #16]
 81071c8:	3b01      	subs	r3, #1
 81071ca:	6123      	str	r3, [r4, #16]
 81071cc:	e7f1      	b.n	81071b2 <_scanf_float+0x2aa>
 81071ce:	9802      	ldr	r0, [sp, #8]
 81071d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 81071d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 81071d8:	9002      	str	r0, [sp, #8]
 81071da:	463a      	mov	r2, r7
 81071dc:	4640      	mov	r0, r8
 81071de:	4798      	blx	r3
 81071e0:	6923      	ldr	r3, [r4, #16]
 81071e2:	3b01      	subs	r3, #1
 81071e4:	6123      	str	r3, [r4, #16]
 81071e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 81071ea:	fa5f fa8a 	uxtb.w	sl, sl
 81071ee:	f1ba 0f02 	cmp.w	sl, #2
 81071f2:	d1ec      	bne.n	81071ce <_scanf_float+0x2c6>
 81071f4:	3d03      	subs	r5, #3
 81071f6:	b2ed      	uxtb	r5, r5
 81071f8:	1b76      	subs	r6, r6, r5
 81071fa:	6823      	ldr	r3, [r4, #0]
 81071fc:	05da      	lsls	r2, r3, #23
 81071fe:	d52f      	bpl.n	8107260 <_scanf_float+0x358>
 8107200:	055b      	lsls	r3, r3, #21
 8107202:	d510      	bpl.n	8107226 <_scanf_float+0x31e>
 8107204:	455e      	cmp	r6, fp
 8107206:	f67f aebf 	bls.w	8106f88 <_scanf_float+0x80>
 810720a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 810720e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8107212:	463a      	mov	r2, r7
 8107214:	4640      	mov	r0, r8
 8107216:	4798      	blx	r3
 8107218:	6923      	ldr	r3, [r4, #16]
 810721a:	3b01      	subs	r3, #1
 810721c:	6123      	str	r3, [r4, #16]
 810721e:	e7f1      	b.n	8107204 <_scanf_float+0x2fc>
 8107220:	46aa      	mov	sl, r5
 8107222:	9602      	str	r6, [sp, #8]
 8107224:	e7df      	b.n	81071e6 <_scanf_float+0x2de>
 8107226:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 810722a:	6923      	ldr	r3, [r4, #16]
 810722c:	2965      	cmp	r1, #101	; 0x65
 810722e:	f103 33ff 	add.w	r3, r3, #4294967295
 8107232:	f106 35ff 	add.w	r5, r6, #4294967295
 8107236:	6123      	str	r3, [r4, #16]
 8107238:	d00c      	beq.n	8107254 <_scanf_float+0x34c>
 810723a:	2945      	cmp	r1, #69	; 0x45
 810723c:	d00a      	beq.n	8107254 <_scanf_float+0x34c>
 810723e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107242:	463a      	mov	r2, r7
 8107244:	4640      	mov	r0, r8
 8107246:	4798      	blx	r3
 8107248:	6923      	ldr	r3, [r4, #16]
 810724a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 810724e:	3b01      	subs	r3, #1
 8107250:	1eb5      	subs	r5, r6, #2
 8107252:	6123      	str	r3, [r4, #16]
 8107254:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8107258:	463a      	mov	r2, r7
 810725a:	4640      	mov	r0, r8
 810725c:	4798      	blx	r3
 810725e:	462e      	mov	r6, r5
 8107260:	6825      	ldr	r5, [r4, #0]
 8107262:	f015 0510 	ands.w	r5, r5, #16
 8107266:	d158      	bne.n	810731a <_scanf_float+0x412>
 8107268:	7035      	strb	r5, [r6, #0]
 810726a:	6823      	ldr	r3, [r4, #0]
 810726c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8107270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8107274:	d11c      	bne.n	81072b0 <_scanf_float+0x3a8>
 8107276:	9b01      	ldr	r3, [sp, #4]
 8107278:	454b      	cmp	r3, r9
 810727a:	eba3 0209 	sub.w	r2, r3, r9
 810727e:	d124      	bne.n	81072ca <_scanf_float+0x3c2>
 8107280:	2200      	movs	r2, #0
 8107282:	4659      	mov	r1, fp
 8107284:	4640      	mov	r0, r8
 8107286:	f002 fd33 	bl	8109cf0 <_strtod_r>
 810728a:	9b03      	ldr	r3, [sp, #12]
 810728c:	6821      	ldr	r1, [r4, #0]
 810728e:	681b      	ldr	r3, [r3, #0]
 8107290:	f011 0f02 	tst.w	r1, #2
 8107294:	ec57 6b10 	vmov	r6, r7, d0
 8107298:	f103 0204 	add.w	r2, r3, #4
 810729c:	d020      	beq.n	81072e0 <_scanf_float+0x3d8>
 810729e:	9903      	ldr	r1, [sp, #12]
 81072a0:	600a      	str	r2, [r1, #0]
 81072a2:	681b      	ldr	r3, [r3, #0]
 81072a4:	e9c3 6700 	strd	r6, r7, [r3]
 81072a8:	68e3      	ldr	r3, [r4, #12]
 81072aa:	3301      	adds	r3, #1
 81072ac:	60e3      	str	r3, [r4, #12]
 81072ae:	e66c      	b.n	8106f8a <_scanf_float+0x82>
 81072b0:	9b04      	ldr	r3, [sp, #16]
 81072b2:	2b00      	cmp	r3, #0
 81072b4:	d0e4      	beq.n	8107280 <_scanf_float+0x378>
 81072b6:	9905      	ldr	r1, [sp, #20]
 81072b8:	230a      	movs	r3, #10
 81072ba:	462a      	mov	r2, r5
 81072bc:	3101      	adds	r1, #1
 81072be:	4640      	mov	r0, r8
 81072c0:	f002 fd9e 	bl	8109e00 <_strtol_r>
 81072c4:	9b04      	ldr	r3, [sp, #16]
 81072c6:	9e05      	ldr	r6, [sp, #20]
 81072c8:	1ac2      	subs	r2, r0, r3
 81072ca:	f204 136f 	addw	r3, r4, #367	; 0x16f
 81072ce:	429e      	cmp	r6, r3
 81072d0:	bf28      	it	cs
 81072d2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 81072d6:	4912      	ldr	r1, [pc, #72]	; (8107320 <_scanf_float+0x418>)
 81072d8:	4630      	mov	r0, r6
 81072da:	f000 f955 	bl	8107588 <siprintf>
 81072de:	e7cf      	b.n	8107280 <_scanf_float+0x378>
 81072e0:	f011 0f04 	tst.w	r1, #4
 81072e4:	9903      	ldr	r1, [sp, #12]
 81072e6:	600a      	str	r2, [r1, #0]
 81072e8:	d1db      	bne.n	81072a2 <_scanf_float+0x39a>
 81072ea:	f8d3 8000 	ldr.w	r8, [r3]
 81072ee:	ee10 2a10 	vmov	r2, s0
 81072f2:	ee10 0a10 	vmov	r0, s0
 81072f6:	463b      	mov	r3, r7
 81072f8:	4639      	mov	r1, r7
 81072fa:	f7f9 fc9f 	bl	8100c3c <__aeabi_dcmpun>
 81072fe:	b128      	cbz	r0, 810730c <_scanf_float+0x404>
 8107300:	4808      	ldr	r0, [pc, #32]	; (8107324 <_scanf_float+0x41c>)
 8107302:	f000 fab9 	bl	8107878 <nanf>
 8107306:	ed88 0a00 	vstr	s0, [r8]
 810730a:	e7cd      	b.n	81072a8 <_scanf_float+0x3a0>
 810730c:	4630      	mov	r0, r6
 810730e:	4639      	mov	r1, r7
 8107310:	f7f9 fcf2 	bl	8100cf8 <__aeabi_d2f>
 8107314:	f8c8 0000 	str.w	r0, [r8]
 8107318:	e7c6      	b.n	81072a8 <_scanf_float+0x3a0>
 810731a:	2500      	movs	r5, #0
 810731c:	e635      	b.n	8106f8a <_scanf_float+0x82>
 810731e:	bf00      	nop
 8107320:	0810aff8 	.word	0x0810aff8
 8107324:	0810b38d 	.word	0x0810b38d

08107328 <std>:
 8107328:	2300      	movs	r3, #0
 810732a:	b510      	push	{r4, lr}
 810732c:	4604      	mov	r4, r0
 810732e:	e9c0 3300 	strd	r3, r3, [r0]
 8107332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8107336:	6083      	str	r3, [r0, #8]
 8107338:	8181      	strh	r1, [r0, #12]
 810733a:	6643      	str	r3, [r0, #100]	; 0x64
 810733c:	81c2      	strh	r2, [r0, #14]
 810733e:	6183      	str	r3, [r0, #24]
 8107340:	4619      	mov	r1, r3
 8107342:	2208      	movs	r2, #8
 8107344:	305c      	adds	r0, #92	; 0x5c
 8107346:	f000 fa17 	bl	8107778 <memset>
 810734a:	4b0d      	ldr	r3, [pc, #52]	; (8107380 <std+0x58>)
 810734c:	6263      	str	r3, [r4, #36]	; 0x24
 810734e:	4b0d      	ldr	r3, [pc, #52]	; (8107384 <std+0x5c>)
 8107350:	62a3      	str	r3, [r4, #40]	; 0x28
 8107352:	4b0d      	ldr	r3, [pc, #52]	; (8107388 <std+0x60>)
 8107354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8107356:	4b0d      	ldr	r3, [pc, #52]	; (810738c <std+0x64>)
 8107358:	6323      	str	r3, [r4, #48]	; 0x30
 810735a:	4b0d      	ldr	r3, [pc, #52]	; (8107390 <std+0x68>)
 810735c:	6224      	str	r4, [r4, #32]
 810735e:	429c      	cmp	r4, r3
 8107360:	d006      	beq.n	8107370 <std+0x48>
 8107362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8107366:	4294      	cmp	r4, r2
 8107368:	d002      	beq.n	8107370 <std+0x48>
 810736a:	33d0      	adds	r3, #208	; 0xd0
 810736c:	429c      	cmp	r4, r3
 810736e:	d105      	bne.n	810737c <std+0x54>
 8107370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8107374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107378:	f000 ba7a 	b.w	8107870 <__retarget_lock_init_recursive>
 810737c:	bd10      	pop	{r4, pc}
 810737e:	bf00      	nop
 8107380:	081075c9 	.word	0x081075c9
 8107384:	081075eb 	.word	0x081075eb
 8107388:	08107623 	.word	0x08107623
 810738c:	08107647 	.word	0x08107647
 8107390:	100002f4 	.word	0x100002f4

08107394 <stdio_exit_handler>:
 8107394:	4a02      	ldr	r2, [pc, #8]	; (81073a0 <stdio_exit_handler+0xc>)
 8107396:	4903      	ldr	r1, [pc, #12]	; (81073a4 <stdio_exit_handler+0x10>)
 8107398:	4803      	ldr	r0, [pc, #12]	; (81073a8 <stdio_exit_handler+0x14>)
 810739a:	f000 b869 	b.w	8107470 <_fwalk_sglue>
 810739e:	bf00      	nop
 81073a0:	1000001c 	.word	0x1000001c
 81073a4:	0810a449 	.word	0x0810a449
 81073a8:	10000028 	.word	0x10000028

081073ac <cleanup_stdio>:
 81073ac:	6841      	ldr	r1, [r0, #4]
 81073ae:	4b0c      	ldr	r3, [pc, #48]	; (81073e0 <cleanup_stdio+0x34>)
 81073b0:	4299      	cmp	r1, r3
 81073b2:	b510      	push	{r4, lr}
 81073b4:	4604      	mov	r4, r0
 81073b6:	d001      	beq.n	81073bc <cleanup_stdio+0x10>
 81073b8:	f003 f846 	bl	810a448 <_fflush_r>
 81073bc:	68a1      	ldr	r1, [r4, #8]
 81073be:	4b09      	ldr	r3, [pc, #36]	; (81073e4 <cleanup_stdio+0x38>)
 81073c0:	4299      	cmp	r1, r3
 81073c2:	d002      	beq.n	81073ca <cleanup_stdio+0x1e>
 81073c4:	4620      	mov	r0, r4
 81073c6:	f003 f83f 	bl	810a448 <_fflush_r>
 81073ca:	68e1      	ldr	r1, [r4, #12]
 81073cc:	4b06      	ldr	r3, [pc, #24]	; (81073e8 <cleanup_stdio+0x3c>)
 81073ce:	4299      	cmp	r1, r3
 81073d0:	d004      	beq.n	81073dc <cleanup_stdio+0x30>
 81073d2:	4620      	mov	r0, r4
 81073d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81073d8:	f003 b836 	b.w	810a448 <_fflush_r>
 81073dc:	bd10      	pop	{r4, pc}
 81073de:	bf00      	nop
 81073e0:	100002f4 	.word	0x100002f4
 81073e4:	1000035c 	.word	0x1000035c
 81073e8:	100003c4 	.word	0x100003c4

081073ec <global_stdio_init.part.0>:
 81073ec:	b510      	push	{r4, lr}
 81073ee:	4b0b      	ldr	r3, [pc, #44]	; (810741c <global_stdio_init.part.0+0x30>)
 81073f0:	4c0b      	ldr	r4, [pc, #44]	; (8107420 <global_stdio_init.part.0+0x34>)
 81073f2:	4a0c      	ldr	r2, [pc, #48]	; (8107424 <global_stdio_init.part.0+0x38>)
 81073f4:	601a      	str	r2, [r3, #0]
 81073f6:	4620      	mov	r0, r4
 81073f8:	2200      	movs	r2, #0
 81073fa:	2104      	movs	r1, #4
 81073fc:	f7ff ff94 	bl	8107328 <std>
 8107400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8107404:	2201      	movs	r2, #1
 8107406:	2109      	movs	r1, #9
 8107408:	f7ff ff8e 	bl	8107328 <std>
 810740c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8107410:	2202      	movs	r2, #2
 8107412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107416:	2112      	movs	r1, #18
 8107418:	f7ff bf86 	b.w	8107328 <std>
 810741c:	1000042c 	.word	0x1000042c
 8107420:	100002f4 	.word	0x100002f4
 8107424:	08107395 	.word	0x08107395

08107428 <__sfp_lock_acquire>:
 8107428:	4801      	ldr	r0, [pc, #4]	; (8107430 <__sfp_lock_acquire+0x8>)
 810742a:	f000 ba22 	b.w	8107872 <__retarget_lock_acquire_recursive>
 810742e:	bf00      	nop
 8107430:	10000435 	.word	0x10000435

08107434 <__sfp_lock_release>:
 8107434:	4801      	ldr	r0, [pc, #4]	; (810743c <__sfp_lock_release+0x8>)
 8107436:	f000 ba1d 	b.w	8107874 <__retarget_lock_release_recursive>
 810743a:	bf00      	nop
 810743c:	10000435 	.word	0x10000435

08107440 <__sinit>:
 8107440:	b510      	push	{r4, lr}
 8107442:	4604      	mov	r4, r0
 8107444:	f7ff fff0 	bl	8107428 <__sfp_lock_acquire>
 8107448:	6a23      	ldr	r3, [r4, #32]
 810744a:	b11b      	cbz	r3, 8107454 <__sinit+0x14>
 810744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8107450:	f7ff bff0 	b.w	8107434 <__sfp_lock_release>
 8107454:	4b04      	ldr	r3, [pc, #16]	; (8107468 <__sinit+0x28>)
 8107456:	6223      	str	r3, [r4, #32]
 8107458:	4b04      	ldr	r3, [pc, #16]	; (810746c <__sinit+0x2c>)
 810745a:	681b      	ldr	r3, [r3, #0]
 810745c:	2b00      	cmp	r3, #0
 810745e:	d1f5      	bne.n	810744c <__sinit+0xc>
 8107460:	f7ff ffc4 	bl	81073ec <global_stdio_init.part.0>
 8107464:	e7f2      	b.n	810744c <__sinit+0xc>
 8107466:	bf00      	nop
 8107468:	081073ad 	.word	0x081073ad
 810746c:	1000042c 	.word	0x1000042c

08107470 <_fwalk_sglue>:
 8107470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107474:	4607      	mov	r7, r0
 8107476:	4688      	mov	r8, r1
 8107478:	4614      	mov	r4, r2
 810747a:	2600      	movs	r6, #0
 810747c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8107480:	f1b9 0901 	subs.w	r9, r9, #1
 8107484:	d505      	bpl.n	8107492 <_fwalk_sglue+0x22>
 8107486:	6824      	ldr	r4, [r4, #0]
 8107488:	2c00      	cmp	r4, #0
 810748a:	d1f7      	bne.n	810747c <_fwalk_sglue+0xc>
 810748c:	4630      	mov	r0, r6
 810748e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8107492:	89ab      	ldrh	r3, [r5, #12]
 8107494:	2b01      	cmp	r3, #1
 8107496:	d907      	bls.n	81074a8 <_fwalk_sglue+0x38>
 8107498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810749c:	3301      	adds	r3, #1
 810749e:	d003      	beq.n	81074a8 <_fwalk_sglue+0x38>
 81074a0:	4629      	mov	r1, r5
 81074a2:	4638      	mov	r0, r7
 81074a4:	47c0      	blx	r8
 81074a6:	4306      	orrs	r6, r0
 81074a8:	3568      	adds	r5, #104	; 0x68
 81074aa:	e7e9      	b.n	8107480 <_fwalk_sglue+0x10>

081074ac <iprintf>:
 81074ac:	b40f      	push	{r0, r1, r2, r3}
 81074ae:	b507      	push	{r0, r1, r2, lr}
 81074b0:	4906      	ldr	r1, [pc, #24]	; (81074cc <iprintf+0x20>)
 81074b2:	ab04      	add	r3, sp, #16
 81074b4:	6808      	ldr	r0, [r1, #0]
 81074b6:	f853 2b04 	ldr.w	r2, [r3], #4
 81074ba:	6881      	ldr	r1, [r0, #8]
 81074bc:	9301      	str	r3, [sp, #4]
 81074be:	f002 fe23 	bl	810a108 <_vfiprintf_r>
 81074c2:	b003      	add	sp, #12
 81074c4:	f85d eb04 	ldr.w	lr, [sp], #4
 81074c8:	b004      	add	sp, #16
 81074ca:	4770      	bx	lr
 81074cc:	10000074 	.word	0x10000074

081074d0 <_puts_r>:
 81074d0:	6a03      	ldr	r3, [r0, #32]
 81074d2:	b570      	push	{r4, r5, r6, lr}
 81074d4:	6884      	ldr	r4, [r0, #8]
 81074d6:	4605      	mov	r5, r0
 81074d8:	460e      	mov	r6, r1
 81074da:	b90b      	cbnz	r3, 81074e0 <_puts_r+0x10>
 81074dc:	f7ff ffb0 	bl	8107440 <__sinit>
 81074e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 81074e2:	07db      	lsls	r3, r3, #31
 81074e4:	d405      	bmi.n	81074f2 <_puts_r+0x22>
 81074e6:	89a3      	ldrh	r3, [r4, #12]
 81074e8:	0598      	lsls	r0, r3, #22
 81074ea:	d402      	bmi.n	81074f2 <_puts_r+0x22>
 81074ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 81074ee:	f000 f9c0 	bl	8107872 <__retarget_lock_acquire_recursive>
 81074f2:	89a3      	ldrh	r3, [r4, #12]
 81074f4:	0719      	lsls	r1, r3, #28
 81074f6:	d513      	bpl.n	8107520 <_puts_r+0x50>
 81074f8:	6923      	ldr	r3, [r4, #16]
 81074fa:	b18b      	cbz	r3, 8107520 <_puts_r+0x50>
 81074fc:	3e01      	subs	r6, #1
 81074fe:	68a3      	ldr	r3, [r4, #8]
 8107500:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8107504:	3b01      	subs	r3, #1
 8107506:	60a3      	str	r3, [r4, #8]
 8107508:	b9e9      	cbnz	r1, 8107546 <_puts_r+0x76>
 810750a:	2b00      	cmp	r3, #0
 810750c:	da2e      	bge.n	810756c <_puts_r+0x9c>
 810750e:	4622      	mov	r2, r4
 8107510:	210a      	movs	r1, #10
 8107512:	4628      	mov	r0, r5
 8107514:	f000 f89b 	bl	810764e <__swbuf_r>
 8107518:	3001      	adds	r0, #1
 810751a:	d007      	beq.n	810752c <_puts_r+0x5c>
 810751c:	250a      	movs	r5, #10
 810751e:	e007      	b.n	8107530 <_puts_r+0x60>
 8107520:	4621      	mov	r1, r4
 8107522:	4628      	mov	r0, r5
 8107524:	f000 f8d0 	bl	81076c8 <__swsetup_r>
 8107528:	2800      	cmp	r0, #0
 810752a:	d0e7      	beq.n	81074fc <_puts_r+0x2c>
 810752c:	f04f 35ff 	mov.w	r5, #4294967295
 8107530:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8107532:	07da      	lsls	r2, r3, #31
 8107534:	d405      	bmi.n	8107542 <_puts_r+0x72>
 8107536:	89a3      	ldrh	r3, [r4, #12]
 8107538:	059b      	lsls	r3, r3, #22
 810753a:	d402      	bmi.n	8107542 <_puts_r+0x72>
 810753c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810753e:	f000 f999 	bl	8107874 <__retarget_lock_release_recursive>
 8107542:	4628      	mov	r0, r5
 8107544:	bd70      	pop	{r4, r5, r6, pc}
 8107546:	2b00      	cmp	r3, #0
 8107548:	da04      	bge.n	8107554 <_puts_r+0x84>
 810754a:	69a2      	ldr	r2, [r4, #24]
 810754c:	429a      	cmp	r2, r3
 810754e:	dc06      	bgt.n	810755e <_puts_r+0x8e>
 8107550:	290a      	cmp	r1, #10
 8107552:	d004      	beq.n	810755e <_puts_r+0x8e>
 8107554:	6823      	ldr	r3, [r4, #0]
 8107556:	1c5a      	adds	r2, r3, #1
 8107558:	6022      	str	r2, [r4, #0]
 810755a:	7019      	strb	r1, [r3, #0]
 810755c:	e7cf      	b.n	81074fe <_puts_r+0x2e>
 810755e:	4622      	mov	r2, r4
 8107560:	4628      	mov	r0, r5
 8107562:	f000 f874 	bl	810764e <__swbuf_r>
 8107566:	3001      	adds	r0, #1
 8107568:	d1c9      	bne.n	81074fe <_puts_r+0x2e>
 810756a:	e7df      	b.n	810752c <_puts_r+0x5c>
 810756c:	6823      	ldr	r3, [r4, #0]
 810756e:	250a      	movs	r5, #10
 8107570:	1c5a      	adds	r2, r3, #1
 8107572:	6022      	str	r2, [r4, #0]
 8107574:	701d      	strb	r5, [r3, #0]
 8107576:	e7db      	b.n	8107530 <_puts_r+0x60>

08107578 <puts>:
 8107578:	4b02      	ldr	r3, [pc, #8]	; (8107584 <puts+0xc>)
 810757a:	4601      	mov	r1, r0
 810757c:	6818      	ldr	r0, [r3, #0]
 810757e:	f7ff bfa7 	b.w	81074d0 <_puts_r>
 8107582:	bf00      	nop
 8107584:	10000074 	.word	0x10000074

08107588 <siprintf>:
 8107588:	b40e      	push	{r1, r2, r3}
 810758a:	b500      	push	{lr}
 810758c:	b09c      	sub	sp, #112	; 0x70
 810758e:	ab1d      	add	r3, sp, #116	; 0x74
 8107590:	9002      	str	r0, [sp, #8]
 8107592:	9006      	str	r0, [sp, #24]
 8107594:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8107598:	4809      	ldr	r0, [pc, #36]	; (81075c0 <siprintf+0x38>)
 810759a:	9107      	str	r1, [sp, #28]
 810759c:	9104      	str	r1, [sp, #16]
 810759e:	4909      	ldr	r1, [pc, #36]	; (81075c4 <siprintf+0x3c>)
 81075a0:	f853 2b04 	ldr.w	r2, [r3], #4
 81075a4:	9105      	str	r1, [sp, #20]
 81075a6:	6800      	ldr	r0, [r0, #0]
 81075a8:	9301      	str	r3, [sp, #4]
 81075aa:	a902      	add	r1, sp, #8
 81075ac:	f002 fc84 	bl	8109eb8 <_svfiprintf_r>
 81075b0:	9b02      	ldr	r3, [sp, #8]
 81075b2:	2200      	movs	r2, #0
 81075b4:	701a      	strb	r2, [r3, #0]
 81075b6:	b01c      	add	sp, #112	; 0x70
 81075b8:	f85d eb04 	ldr.w	lr, [sp], #4
 81075bc:	b003      	add	sp, #12
 81075be:	4770      	bx	lr
 81075c0:	10000074 	.word	0x10000074
 81075c4:	ffff0208 	.word	0xffff0208

081075c8 <__sread>:
 81075c8:	b510      	push	{r4, lr}
 81075ca:	460c      	mov	r4, r1
 81075cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81075d0:	f000 f900 	bl	81077d4 <_read_r>
 81075d4:	2800      	cmp	r0, #0
 81075d6:	bfab      	itete	ge
 81075d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 81075da:	89a3      	ldrhlt	r3, [r4, #12]
 81075dc:	181b      	addge	r3, r3, r0
 81075de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 81075e2:	bfac      	ite	ge
 81075e4:	6563      	strge	r3, [r4, #84]	; 0x54
 81075e6:	81a3      	strhlt	r3, [r4, #12]
 81075e8:	bd10      	pop	{r4, pc}

081075ea <__swrite>:
 81075ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81075ee:	461f      	mov	r7, r3
 81075f0:	898b      	ldrh	r3, [r1, #12]
 81075f2:	05db      	lsls	r3, r3, #23
 81075f4:	4605      	mov	r5, r0
 81075f6:	460c      	mov	r4, r1
 81075f8:	4616      	mov	r6, r2
 81075fa:	d505      	bpl.n	8107608 <__swrite+0x1e>
 81075fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107600:	2302      	movs	r3, #2
 8107602:	2200      	movs	r2, #0
 8107604:	f000 f8d4 	bl	81077b0 <_lseek_r>
 8107608:	89a3      	ldrh	r3, [r4, #12]
 810760a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810760e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8107612:	81a3      	strh	r3, [r4, #12]
 8107614:	4632      	mov	r2, r6
 8107616:	463b      	mov	r3, r7
 8107618:	4628      	mov	r0, r5
 810761a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810761e:	f000 b8eb 	b.w	81077f8 <_write_r>

08107622 <__sseek>:
 8107622:	b510      	push	{r4, lr}
 8107624:	460c      	mov	r4, r1
 8107626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810762a:	f000 f8c1 	bl	81077b0 <_lseek_r>
 810762e:	1c43      	adds	r3, r0, #1
 8107630:	89a3      	ldrh	r3, [r4, #12]
 8107632:	bf15      	itete	ne
 8107634:	6560      	strne	r0, [r4, #84]	; 0x54
 8107636:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 810763a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810763e:	81a3      	strheq	r3, [r4, #12]
 8107640:	bf18      	it	ne
 8107642:	81a3      	strhne	r3, [r4, #12]
 8107644:	bd10      	pop	{r4, pc}

08107646 <__sclose>:
 8107646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810764a:	f000 b8a1 	b.w	8107790 <_close_r>

0810764e <__swbuf_r>:
 810764e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107650:	460e      	mov	r6, r1
 8107652:	4614      	mov	r4, r2
 8107654:	4605      	mov	r5, r0
 8107656:	b118      	cbz	r0, 8107660 <__swbuf_r+0x12>
 8107658:	6a03      	ldr	r3, [r0, #32]
 810765a:	b90b      	cbnz	r3, 8107660 <__swbuf_r+0x12>
 810765c:	f7ff fef0 	bl	8107440 <__sinit>
 8107660:	69a3      	ldr	r3, [r4, #24]
 8107662:	60a3      	str	r3, [r4, #8]
 8107664:	89a3      	ldrh	r3, [r4, #12]
 8107666:	071a      	lsls	r2, r3, #28
 8107668:	d525      	bpl.n	81076b6 <__swbuf_r+0x68>
 810766a:	6923      	ldr	r3, [r4, #16]
 810766c:	b31b      	cbz	r3, 81076b6 <__swbuf_r+0x68>
 810766e:	6823      	ldr	r3, [r4, #0]
 8107670:	6922      	ldr	r2, [r4, #16]
 8107672:	1a98      	subs	r0, r3, r2
 8107674:	6963      	ldr	r3, [r4, #20]
 8107676:	b2f6      	uxtb	r6, r6
 8107678:	4283      	cmp	r3, r0
 810767a:	4637      	mov	r7, r6
 810767c:	dc04      	bgt.n	8107688 <__swbuf_r+0x3a>
 810767e:	4621      	mov	r1, r4
 8107680:	4628      	mov	r0, r5
 8107682:	f002 fee1 	bl	810a448 <_fflush_r>
 8107686:	b9e0      	cbnz	r0, 81076c2 <__swbuf_r+0x74>
 8107688:	68a3      	ldr	r3, [r4, #8]
 810768a:	3b01      	subs	r3, #1
 810768c:	60a3      	str	r3, [r4, #8]
 810768e:	6823      	ldr	r3, [r4, #0]
 8107690:	1c5a      	adds	r2, r3, #1
 8107692:	6022      	str	r2, [r4, #0]
 8107694:	701e      	strb	r6, [r3, #0]
 8107696:	6962      	ldr	r2, [r4, #20]
 8107698:	1c43      	adds	r3, r0, #1
 810769a:	429a      	cmp	r2, r3
 810769c:	d004      	beq.n	81076a8 <__swbuf_r+0x5a>
 810769e:	89a3      	ldrh	r3, [r4, #12]
 81076a0:	07db      	lsls	r3, r3, #31
 81076a2:	d506      	bpl.n	81076b2 <__swbuf_r+0x64>
 81076a4:	2e0a      	cmp	r6, #10
 81076a6:	d104      	bne.n	81076b2 <__swbuf_r+0x64>
 81076a8:	4621      	mov	r1, r4
 81076aa:	4628      	mov	r0, r5
 81076ac:	f002 fecc 	bl	810a448 <_fflush_r>
 81076b0:	b938      	cbnz	r0, 81076c2 <__swbuf_r+0x74>
 81076b2:	4638      	mov	r0, r7
 81076b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81076b6:	4621      	mov	r1, r4
 81076b8:	4628      	mov	r0, r5
 81076ba:	f000 f805 	bl	81076c8 <__swsetup_r>
 81076be:	2800      	cmp	r0, #0
 81076c0:	d0d5      	beq.n	810766e <__swbuf_r+0x20>
 81076c2:	f04f 37ff 	mov.w	r7, #4294967295
 81076c6:	e7f4      	b.n	81076b2 <__swbuf_r+0x64>

081076c8 <__swsetup_r>:
 81076c8:	b538      	push	{r3, r4, r5, lr}
 81076ca:	4b2a      	ldr	r3, [pc, #168]	; (8107774 <__swsetup_r+0xac>)
 81076cc:	4605      	mov	r5, r0
 81076ce:	6818      	ldr	r0, [r3, #0]
 81076d0:	460c      	mov	r4, r1
 81076d2:	b118      	cbz	r0, 81076dc <__swsetup_r+0x14>
 81076d4:	6a03      	ldr	r3, [r0, #32]
 81076d6:	b90b      	cbnz	r3, 81076dc <__swsetup_r+0x14>
 81076d8:	f7ff feb2 	bl	8107440 <__sinit>
 81076dc:	89a3      	ldrh	r3, [r4, #12]
 81076de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 81076e2:	0718      	lsls	r0, r3, #28
 81076e4:	d422      	bmi.n	810772c <__swsetup_r+0x64>
 81076e6:	06d9      	lsls	r1, r3, #27
 81076e8:	d407      	bmi.n	81076fa <__swsetup_r+0x32>
 81076ea:	2309      	movs	r3, #9
 81076ec:	602b      	str	r3, [r5, #0]
 81076ee:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 81076f2:	81a3      	strh	r3, [r4, #12]
 81076f4:	f04f 30ff 	mov.w	r0, #4294967295
 81076f8:	e034      	b.n	8107764 <__swsetup_r+0x9c>
 81076fa:	0758      	lsls	r0, r3, #29
 81076fc:	d512      	bpl.n	8107724 <__swsetup_r+0x5c>
 81076fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107700:	b141      	cbz	r1, 8107714 <__swsetup_r+0x4c>
 8107702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8107706:	4299      	cmp	r1, r3
 8107708:	d002      	beq.n	8107710 <__swsetup_r+0x48>
 810770a:	4628      	mov	r0, r5
 810770c:	f000 ff36 	bl	810857c <_free_r>
 8107710:	2300      	movs	r3, #0
 8107712:	6363      	str	r3, [r4, #52]	; 0x34
 8107714:	89a3      	ldrh	r3, [r4, #12]
 8107716:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 810771a:	81a3      	strh	r3, [r4, #12]
 810771c:	2300      	movs	r3, #0
 810771e:	6063      	str	r3, [r4, #4]
 8107720:	6923      	ldr	r3, [r4, #16]
 8107722:	6023      	str	r3, [r4, #0]
 8107724:	89a3      	ldrh	r3, [r4, #12]
 8107726:	f043 0308 	orr.w	r3, r3, #8
 810772a:	81a3      	strh	r3, [r4, #12]
 810772c:	6923      	ldr	r3, [r4, #16]
 810772e:	b94b      	cbnz	r3, 8107744 <__swsetup_r+0x7c>
 8107730:	89a3      	ldrh	r3, [r4, #12]
 8107732:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8107736:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 810773a:	d003      	beq.n	8107744 <__swsetup_r+0x7c>
 810773c:	4621      	mov	r1, r4
 810773e:	4628      	mov	r0, r5
 8107740:	f002 fed0 	bl	810a4e4 <__smakebuf_r>
 8107744:	89a0      	ldrh	r0, [r4, #12]
 8107746:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810774a:	f010 0301 	ands.w	r3, r0, #1
 810774e:	d00a      	beq.n	8107766 <__swsetup_r+0x9e>
 8107750:	2300      	movs	r3, #0
 8107752:	60a3      	str	r3, [r4, #8]
 8107754:	6963      	ldr	r3, [r4, #20]
 8107756:	425b      	negs	r3, r3
 8107758:	61a3      	str	r3, [r4, #24]
 810775a:	6923      	ldr	r3, [r4, #16]
 810775c:	b943      	cbnz	r3, 8107770 <__swsetup_r+0xa8>
 810775e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8107762:	d1c4      	bne.n	81076ee <__swsetup_r+0x26>
 8107764:	bd38      	pop	{r3, r4, r5, pc}
 8107766:	0781      	lsls	r1, r0, #30
 8107768:	bf58      	it	pl
 810776a:	6963      	ldrpl	r3, [r4, #20]
 810776c:	60a3      	str	r3, [r4, #8]
 810776e:	e7f4      	b.n	810775a <__swsetup_r+0x92>
 8107770:	2000      	movs	r0, #0
 8107772:	e7f7      	b.n	8107764 <__swsetup_r+0x9c>
 8107774:	10000074 	.word	0x10000074

08107778 <memset>:
 8107778:	4402      	add	r2, r0
 810777a:	4603      	mov	r3, r0
 810777c:	4293      	cmp	r3, r2
 810777e:	d100      	bne.n	8107782 <memset+0xa>
 8107780:	4770      	bx	lr
 8107782:	f803 1b01 	strb.w	r1, [r3], #1
 8107786:	e7f9      	b.n	810777c <memset+0x4>

08107788 <_localeconv_r>:
 8107788:	4800      	ldr	r0, [pc, #0]	; (810778c <_localeconv_r+0x4>)
 810778a:	4770      	bx	lr
 810778c:	10000168 	.word	0x10000168

08107790 <_close_r>:
 8107790:	b538      	push	{r3, r4, r5, lr}
 8107792:	4d06      	ldr	r5, [pc, #24]	; (81077ac <_close_r+0x1c>)
 8107794:	2300      	movs	r3, #0
 8107796:	4604      	mov	r4, r0
 8107798:	4608      	mov	r0, r1
 810779a:	602b      	str	r3, [r5, #0]
 810779c:	f7fa fa02 	bl	8101ba4 <_close>
 81077a0:	1c43      	adds	r3, r0, #1
 81077a2:	d102      	bne.n	81077aa <_close_r+0x1a>
 81077a4:	682b      	ldr	r3, [r5, #0]
 81077a6:	b103      	cbz	r3, 81077aa <_close_r+0x1a>
 81077a8:	6023      	str	r3, [r4, #0]
 81077aa:	bd38      	pop	{r3, r4, r5, pc}
 81077ac:	10000430 	.word	0x10000430

081077b0 <_lseek_r>:
 81077b0:	b538      	push	{r3, r4, r5, lr}
 81077b2:	4d07      	ldr	r5, [pc, #28]	; (81077d0 <_lseek_r+0x20>)
 81077b4:	4604      	mov	r4, r0
 81077b6:	4608      	mov	r0, r1
 81077b8:	4611      	mov	r1, r2
 81077ba:	2200      	movs	r2, #0
 81077bc:	602a      	str	r2, [r5, #0]
 81077be:	461a      	mov	r2, r3
 81077c0:	f7fa fa17 	bl	8101bf2 <_lseek>
 81077c4:	1c43      	adds	r3, r0, #1
 81077c6:	d102      	bne.n	81077ce <_lseek_r+0x1e>
 81077c8:	682b      	ldr	r3, [r5, #0]
 81077ca:	b103      	cbz	r3, 81077ce <_lseek_r+0x1e>
 81077cc:	6023      	str	r3, [r4, #0]
 81077ce:	bd38      	pop	{r3, r4, r5, pc}
 81077d0:	10000430 	.word	0x10000430

081077d4 <_read_r>:
 81077d4:	b538      	push	{r3, r4, r5, lr}
 81077d6:	4d07      	ldr	r5, [pc, #28]	; (81077f4 <_read_r+0x20>)
 81077d8:	4604      	mov	r4, r0
 81077da:	4608      	mov	r0, r1
 81077dc:	4611      	mov	r1, r2
 81077de:	2200      	movs	r2, #0
 81077e0:	602a      	str	r2, [r5, #0]
 81077e2:	461a      	mov	r2, r3
 81077e4:	f7fa f9a5 	bl	8101b32 <_read>
 81077e8:	1c43      	adds	r3, r0, #1
 81077ea:	d102      	bne.n	81077f2 <_read_r+0x1e>
 81077ec:	682b      	ldr	r3, [r5, #0]
 81077ee:	b103      	cbz	r3, 81077f2 <_read_r+0x1e>
 81077f0:	6023      	str	r3, [r4, #0]
 81077f2:	bd38      	pop	{r3, r4, r5, pc}
 81077f4:	10000430 	.word	0x10000430

081077f8 <_write_r>:
 81077f8:	b538      	push	{r3, r4, r5, lr}
 81077fa:	4d07      	ldr	r5, [pc, #28]	; (8107818 <_write_r+0x20>)
 81077fc:	4604      	mov	r4, r0
 81077fe:	4608      	mov	r0, r1
 8107800:	4611      	mov	r1, r2
 8107802:	2200      	movs	r2, #0
 8107804:	602a      	str	r2, [r5, #0]
 8107806:	461a      	mov	r2, r3
 8107808:	f7fa f9b0 	bl	8101b6c <_write>
 810780c:	1c43      	adds	r3, r0, #1
 810780e:	d102      	bne.n	8107816 <_write_r+0x1e>
 8107810:	682b      	ldr	r3, [r5, #0]
 8107812:	b103      	cbz	r3, 8107816 <_write_r+0x1e>
 8107814:	6023      	str	r3, [r4, #0]
 8107816:	bd38      	pop	{r3, r4, r5, pc}
 8107818:	10000430 	.word	0x10000430

0810781c <__errno>:
 810781c:	4b01      	ldr	r3, [pc, #4]	; (8107824 <__errno+0x8>)
 810781e:	6818      	ldr	r0, [r3, #0]
 8107820:	4770      	bx	lr
 8107822:	bf00      	nop
 8107824:	10000074 	.word	0x10000074

08107828 <__libc_init_array>:
 8107828:	b570      	push	{r4, r5, r6, lr}
 810782a:	4d0d      	ldr	r5, [pc, #52]	; (8107860 <__libc_init_array+0x38>)
 810782c:	4c0d      	ldr	r4, [pc, #52]	; (8107864 <__libc_init_array+0x3c>)
 810782e:	1b64      	subs	r4, r4, r5
 8107830:	10a4      	asrs	r4, r4, #2
 8107832:	2600      	movs	r6, #0
 8107834:	42a6      	cmp	r6, r4
 8107836:	d109      	bne.n	810784c <__libc_init_array+0x24>
 8107838:	4d0b      	ldr	r5, [pc, #44]	; (8107868 <__libc_init_array+0x40>)
 810783a:	4c0c      	ldr	r4, [pc, #48]	; (810786c <__libc_init_array+0x44>)
 810783c:	f003 fb44 	bl	810aec8 <_init>
 8107840:	1b64      	subs	r4, r4, r5
 8107842:	10a4      	asrs	r4, r4, #2
 8107844:	2600      	movs	r6, #0
 8107846:	42a6      	cmp	r6, r4
 8107848:	d105      	bne.n	8107856 <__libc_init_array+0x2e>
 810784a:	bd70      	pop	{r4, r5, r6, pc}
 810784c:	f855 3b04 	ldr.w	r3, [r5], #4
 8107850:	4798      	blx	r3
 8107852:	3601      	adds	r6, #1
 8107854:	e7ee      	b.n	8107834 <__libc_init_array+0xc>
 8107856:	f855 3b04 	ldr.w	r3, [r5], #4
 810785a:	4798      	blx	r3
 810785c:	3601      	adds	r6, #1
 810785e:	e7f2      	b.n	8107846 <__libc_init_array+0x1e>
 8107860:	0810b3f8 	.word	0x0810b3f8
 8107864:	0810b3f8 	.word	0x0810b3f8
 8107868:	0810b3f8 	.word	0x0810b3f8
 810786c:	0810b3fc 	.word	0x0810b3fc

08107870 <__retarget_lock_init_recursive>:
 8107870:	4770      	bx	lr

08107872 <__retarget_lock_acquire_recursive>:
 8107872:	4770      	bx	lr

08107874 <__retarget_lock_release_recursive>:
 8107874:	4770      	bx	lr
	...

08107878 <nanf>:
 8107878:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8107880 <nanf+0x8>
 810787c:	4770      	bx	lr
 810787e:	bf00      	nop
 8107880:	7fc00000 	.word	0x7fc00000

08107884 <quorem>:
 8107884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107888:	6903      	ldr	r3, [r0, #16]
 810788a:	690c      	ldr	r4, [r1, #16]
 810788c:	42a3      	cmp	r3, r4
 810788e:	4607      	mov	r7, r0
 8107890:	db7e      	blt.n	8107990 <quorem+0x10c>
 8107892:	3c01      	subs	r4, #1
 8107894:	f101 0814 	add.w	r8, r1, #20
 8107898:	f100 0514 	add.w	r5, r0, #20
 810789c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 81078a0:	9301      	str	r3, [sp, #4]
 81078a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 81078a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 81078aa:	3301      	adds	r3, #1
 81078ac:	429a      	cmp	r2, r3
 81078ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 81078b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81078b6:	fbb2 f6f3 	udiv	r6, r2, r3
 81078ba:	d331      	bcc.n	8107920 <quorem+0x9c>
 81078bc:	f04f 0e00 	mov.w	lr, #0
 81078c0:	4640      	mov	r0, r8
 81078c2:	46ac      	mov	ip, r5
 81078c4:	46f2      	mov	sl, lr
 81078c6:	f850 2b04 	ldr.w	r2, [r0], #4
 81078ca:	b293      	uxth	r3, r2
 81078cc:	fb06 e303 	mla	r3, r6, r3, lr
 81078d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81078d4:	0c1a      	lsrs	r2, r3, #16
 81078d6:	b29b      	uxth	r3, r3
 81078d8:	ebaa 0303 	sub.w	r3, sl, r3
 81078dc:	f8dc a000 	ldr.w	sl, [ip]
 81078e0:	fa13 f38a 	uxtah	r3, r3, sl
 81078e4:	fb06 220e 	mla	r2, r6, lr, r2
 81078e8:	9300      	str	r3, [sp, #0]
 81078ea:	9b00      	ldr	r3, [sp, #0]
 81078ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81078f0:	b292      	uxth	r2, r2
 81078f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 81078f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81078fa:	f8bd 3000 	ldrh.w	r3, [sp]
 81078fe:	4581      	cmp	r9, r0
 8107900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107904:	f84c 3b04 	str.w	r3, [ip], #4
 8107908:	ea4f 4a22 	mov.w	sl, r2, asr #16
 810790c:	d2db      	bcs.n	81078c6 <quorem+0x42>
 810790e:	f855 300b 	ldr.w	r3, [r5, fp]
 8107912:	b92b      	cbnz	r3, 8107920 <quorem+0x9c>
 8107914:	9b01      	ldr	r3, [sp, #4]
 8107916:	3b04      	subs	r3, #4
 8107918:	429d      	cmp	r5, r3
 810791a:	461a      	mov	r2, r3
 810791c:	d32c      	bcc.n	8107978 <quorem+0xf4>
 810791e:	613c      	str	r4, [r7, #16]
 8107920:	4638      	mov	r0, r7
 8107922:	f001 f9f1 	bl	8108d08 <__mcmp>
 8107926:	2800      	cmp	r0, #0
 8107928:	db22      	blt.n	8107970 <quorem+0xec>
 810792a:	3601      	adds	r6, #1
 810792c:	4629      	mov	r1, r5
 810792e:	2000      	movs	r0, #0
 8107930:	f858 2b04 	ldr.w	r2, [r8], #4
 8107934:	f8d1 c000 	ldr.w	ip, [r1]
 8107938:	b293      	uxth	r3, r2
 810793a:	1ac3      	subs	r3, r0, r3
 810793c:	0c12      	lsrs	r2, r2, #16
 810793e:	fa13 f38c 	uxtah	r3, r3, ip
 8107942:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8107946:	eb02 4223 	add.w	r2, r2, r3, asr #16
 810794a:	b29b      	uxth	r3, r3
 810794c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8107950:	45c1      	cmp	r9, r8
 8107952:	f841 3b04 	str.w	r3, [r1], #4
 8107956:	ea4f 4022 	mov.w	r0, r2, asr #16
 810795a:	d2e9      	bcs.n	8107930 <quorem+0xac>
 810795c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8107960:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8107964:	b922      	cbnz	r2, 8107970 <quorem+0xec>
 8107966:	3b04      	subs	r3, #4
 8107968:	429d      	cmp	r5, r3
 810796a:	461a      	mov	r2, r3
 810796c:	d30a      	bcc.n	8107984 <quorem+0x100>
 810796e:	613c      	str	r4, [r7, #16]
 8107970:	4630      	mov	r0, r6
 8107972:	b003      	add	sp, #12
 8107974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107978:	6812      	ldr	r2, [r2, #0]
 810797a:	3b04      	subs	r3, #4
 810797c:	2a00      	cmp	r2, #0
 810797e:	d1ce      	bne.n	810791e <quorem+0x9a>
 8107980:	3c01      	subs	r4, #1
 8107982:	e7c9      	b.n	8107918 <quorem+0x94>
 8107984:	6812      	ldr	r2, [r2, #0]
 8107986:	3b04      	subs	r3, #4
 8107988:	2a00      	cmp	r2, #0
 810798a:	d1f0      	bne.n	810796e <quorem+0xea>
 810798c:	3c01      	subs	r4, #1
 810798e:	e7eb      	b.n	8107968 <quorem+0xe4>
 8107990:	2000      	movs	r0, #0
 8107992:	e7ee      	b.n	8107972 <quorem+0xee>
 8107994:	0000      	movs	r0, r0
	...

08107998 <_dtoa_r>:
 8107998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810799c:	ed2d 8b04 	vpush	{d8-d9}
 81079a0:	69c5      	ldr	r5, [r0, #28]
 81079a2:	b093      	sub	sp, #76	; 0x4c
 81079a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 81079a8:	ec57 6b10 	vmov	r6, r7, d0
 81079ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 81079b0:	9107      	str	r1, [sp, #28]
 81079b2:	4604      	mov	r4, r0
 81079b4:	920a      	str	r2, [sp, #40]	; 0x28
 81079b6:	930d      	str	r3, [sp, #52]	; 0x34
 81079b8:	b975      	cbnz	r5, 81079d8 <_dtoa_r+0x40>
 81079ba:	2010      	movs	r0, #16
 81079bc:	f000 fe2a 	bl	8108614 <malloc>
 81079c0:	4602      	mov	r2, r0
 81079c2:	61e0      	str	r0, [r4, #28]
 81079c4:	b920      	cbnz	r0, 81079d0 <_dtoa_r+0x38>
 81079c6:	4bae      	ldr	r3, [pc, #696]	; (8107c80 <_dtoa_r+0x2e8>)
 81079c8:	21ef      	movs	r1, #239	; 0xef
 81079ca:	48ae      	ldr	r0, [pc, #696]	; (8107c84 <_dtoa_r+0x2ec>)
 81079cc:	f002 fe3c 	bl	810a648 <__assert_func>
 81079d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 81079d4:	6005      	str	r5, [r0, #0]
 81079d6:	60c5      	str	r5, [r0, #12]
 81079d8:	69e3      	ldr	r3, [r4, #28]
 81079da:	6819      	ldr	r1, [r3, #0]
 81079dc:	b151      	cbz	r1, 81079f4 <_dtoa_r+0x5c>
 81079de:	685a      	ldr	r2, [r3, #4]
 81079e0:	604a      	str	r2, [r1, #4]
 81079e2:	2301      	movs	r3, #1
 81079e4:	4093      	lsls	r3, r2
 81079e6:	608b      	str	r3, [r1, #8]
 81079e8:	4620      	mov	r0, r4
 81079ea:	f000 ff07 	bl	81087fc <_Bfree>
 81079ee:	69e3      	ldr	r3, [r4, #28]
 81079f0:	2200      	movs	r2, #0
 81079f2:	601a      	str	r2, [r3, #0]
 81079f4:	1e3b      	subs	r3, r7, #0
 81079f6:	bfbb      	ittet	lt
 81079f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 81079fc:	9303      	strlt	r3, [sp, #12]
 81079fe:	2300      	movge	r3, #0
 8107a00:	2201      	movlt	r2, #1
 8107a02:	bfac      	ite	ge
 8107a04:	f8c8 3000 	strge.w	r3, [r8]
 8107a08:	f8c8 2000 	strlt.w	r2, [r8]
 8107a0c:	4b9e      	ldr	r3, [pc, #632]	; (8107c88 <_dtoa_r+0x2f0>)
 8107a0e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8107a12:	ea33 0308 	bics.w	r3, r3, r8
 8107a16:	d11b      	bne.n	8107a50 <_dtoa_r+0xb8>
 8107a18:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8107a1a:	f242 730f 	movw	r3, #9999	; 0x270f
 8107a1e:	6013      	str	r3, [r2, #0]
 8107a20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8107a24:	4333      	orrs	r3, r6
 8107a26:	f000 8593 	beq.w	8108550 <_dtoa_r+0xbb8>
 8107a2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107a2c:	b963      	cbnz	r3, 8107a48 <_dtoa_r+0xb0>
 8107a2e:	4b97      	ldr	r3, [pc, #604]	; (8107c8c <_dtoa_r+0x2f4>)
 8107a30:	e027      	b.n	8107a82 <_dtoa_r+0xea>
 8107a32:	4b97      	ldr	r3, [pc, #604]	; (8107c90 <_dtoa_r+0x2f8>)
 8107a34:	9300      	str	r3, [sp, #0]
 8107a36:	3308      	adds	r3, #8
 8107a38:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8107a3a:	6013      	str	r3, [r2, #0]
 8107a3c:	9800      	ldr	r0, [sp, #0]
 8107a3e:	b013      	add	sp, #76	; 0x4c
 8107a40:	ecbd 8b04 	vpop	{d8-d9}
 8107a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107a48:	4b90      	ldr	r3, [pc, #576]	; (8107c8c <_dtoa_r+0x2f4>)
 8107a4a:	9300      	str	r3, [sp, #0]
 8107a4c:	3303      	adds	r3, #3
 8107a4e:	e7f3      	b.n	8107a38 <_dtoa_r+0xa0>
 8107a50:	ed9d 7b02 	vldr	d7, [sp, #8]
 8107a54:	2200      	movs	r2, #0
 8107a56:	ec51 0b17 	vmov	r0, r1, d7
 8107a5a:	eeb0 8a47 	vmov.f32	s16, s14
 8107a5e:	eef0 8a67 	vmov.f32	s17, s15
 8107a62:	2300      	movs	r3, #0
 8107a64:	f7f9 f8b8 	bl	8100bd8 <__aeabi_dcmpeq>
 8107a68:	4681      	mov	r9, r0
 8107a6a:	b160      	cbz	r0, 8107a86 <_dtoa_r+0xee>
 8107a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8107a6e:	2301      	movs	r3, #1
 8107a70:	6013      	str	r3, [r2, #0]
 8107a72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8107a74:	2b00      	cmp	r3, #0
 8107a76:	f000 8568 	beq.w	810854a <_dtoa_r+0xbb2>
 8107a7a:	4b86      	ldr	r3, [pc, #536]	; (8107c94 <_dtoa_r+0x2fc>)
 8107a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8107a7e:	6013      	str	r3, [r2, #0]
 8107a80:	3b01      	subs	r3, #1
 8107a82:	9300      	str	r3, [sp, #0]
 8107a84:	e7da      	b.n	8107a3c <_dtoa_r+0xa4>
 8107a86:	aa10      	add	r2, sp, #64	; 0x40
 8107a88:	a911      	add	r1, sp, #68	; 0x44
 8107a8a:	4620      	mov	r0, r4
 8107a8c:	eeb0 0a48 	vmov.f32	s0, s16
 8107a90:	eef0 0a68 	vmov.f32	s1, s17
 8107a94:	f001 fa4e 	bl	8108f34 <__d2b>
 8107a98:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8107a9c:	4682      	mov	sl, r0
 8107a9e:	2d00      	cmp	r5, #0
 8107aa0:	d07f      	beq.n	8107ba2 <_dtoa_r+0x20a>
 8107aa2:	ee18 3a90 	vmov	r3, s17
 8107aa6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107aaa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8107aae:	ec51 0b18 	vmov	r0, r1, d8
 8107ab2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8107ab6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8107aba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8107abe:	4619      	mov	r1, r3
 8107ac0:	2200      	movs	r2, #0
 8107ac2:	4b75      	ldr	r3, [pc, #468]	; (8107c98 <_dtoa_r+0x300>)
 8107ac4:	f7f8 fc68 	bl	8100398 <__aeabi_dsub>
 8107ac8:	a367      	add	r3, pc, #412	; (adr r3, 8107c68 <_dtoa_r+0x2d0>)
 8107aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ace:	f7f8 fe1b 	bl	8100708 <__aeabi_dmul>
 8107ad2:	a367      	add	r3, pc, #412	; (adr r3, 8107c70 <_dtoa_r+0x2d8>)
 8107ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107ad8:	f7f8 fc60 	bl	810039c <__adddf3>
 8107adc:	4606      	mov	r6, r0
 8107ade:	4628      	mov	r0, r5
 8107ae0:	460f      	mov	r7, r1
 8107ae2:	f7f8 fda7 	bl	8100634 <__aeabi_i2d>
 8107ae6:	a364      	add	r3, pc, #400	; (adr r3, 8107c78 <_dtoa_r+0x2e0>)
 8107ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107aec:	f7f8 fe0c 	bl	8100708 <__aeabi_dmul>
 8107af0:	4602      	mov	r2, r0
 8107af2:	460b      	mov	r3, r1
 8107af4:	4630      	mov	r0, r6
 8107af6:	4639      	mov	r1, r7
 8107af8:	f7f8 fc50 	bl	810039c <__adddf3>
 8107afc:	4606      	mov	r6, r0
 8107afe:	460f      	mov	r7, r1
 8107b00:	f7f9 f8b2 	bl	8100c68 <__aeabi_d2iz>
 8107b04:	2200      	movs	r2, #0
 8107b06:	4683      	mov	fp, r0
 8107b08:	2300      	movs	r3, #0
 8107b0a:	4630      	mov	r0, r6
 8107b0c:	4639      	mov	r1, r7
 8107b0e:	f7f9 f86d 	bl	8100bec <__aeabi_dcmplt>
 8107b12:	b148      	cbz	r0, 8107b28 <_dtoa_r+0x190>
 8107b14:	4658      	mov	r0, fp
 8107b16:	f7f8 fd8d 	bl	8100634 <__aeabi_i2d>
 8107b1a:	4632      	mov	r2, r6
 8107b1c:	463b      	mov	r3, r7
 8107b1e:	f7f9 f85b 	bl	8100bd8 <__aeabi_dcmpeq>
 8107b22:	b908      	cbnz	r0, 8107b28 <_dtoa_r+0x190>
 8107b24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8107b28:	f1bb 0f16 	cmp.w	fp, #22
 8107b2c:	d857      	bhi.n	8107bde <_dtoa_r+0x246>
 8107b2e:	4b5b      	ldr	r3, [pc, #364]	; (8107c9c <_dtoa_r+0x304>)
 8107b30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107b38:	ec51 0b18 	vmov	r0, r1, d8
 8107b3c:	f7f9 f856 	bl	8100bec <__aeabi_dcmplt>
 8107b40:	2800      	cmp	r0, #0
 8107b42:	d04e      	beq.n	8107be2 <_dtoa_r+0x24a>
 8107b44:	f10b 3bff 	add.w	fp, fp, #4294967295
 8107b48:	2300      	movs	r3, #0
 8107b4a:	930c      	str	r3, [sp, #48]	; 0x30
 8107b4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8107b4e:	1b5b      	subs	r3, r3, r5
 8107b50:	1e5a      	subs	r2, r3, #1
 8107b52:	bf45      	ittet	mi
 8107b54:	f1c3 0301 	rsbmi	r3, r3, #1
 8107b58:	9305      	strmi	r3, [sp, #20]
 8107b5a:	2300      	movpl	r3, #0
 8107b5c:	2300      	movmi	r3, #0
 8107b5e:	9206      	str	r2, [sp, #24]
 8107b60:	bf54      	ite	pl
 8107b62:	9305      	strpl	r3, [sp, #20]
 8107b64:	9306      	strmi	r3, [sp, #24]
 8107b66:	f1bb 0f00 	cmp.w	fp, #0
 8107b6a:	db3c      	blt.n	8107be6 <_dtoa_r+0x24e>
 8107b6c:	9b06      	ldr	r3, [sp, #24]
 8107b6e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8107b72:	445b      	add	r3, fp
 8107b74:	9306      	str	r3, [sp, #24]
 8107b76:	2300      	movs	r3, #0
 8107b78:	9308      	str	r3, [sp, #32]
 8107b7a:	9b07      	ldr	r3, [sp, #28]
 8107b7c:	2b09      	cmp	r3, #9
 8107b7e:	d868      	bhi.n	8107c52 <_dtoa_r+0x2ba>
 8107b80:	2b05      	cmp	r3, #5
 8107b82:	bfc4      	itt	gt
 8107b84:	3b04      	subgt	r3, #4
 8107b86:	9307      	strgt	r3, [sp, #28]
 8107b88:	9b07      	ldr	r3, [sp, #28]
 8107b8a:	f1a3 0302 	sub.w	r3, r3, #2
 8107b8e:	bfcc      	ite	gt
 8107b90:	2500      	movgt	r5, #0
 8107b92:	2501      	movle	r5, #1
 8107b94:	2b03      	cmp	r3, #3
 8107b96:	f200 8085 	bhi.w	8107ca4 <_dtoa_r+0x30c>
 8107b9a:	e8df f003 	tbb	[pc, r3]
 8107b9e:	3b2e      	.short	0x3b2e
 8107ba0:	5839      	.short	0x5839
 8107ba2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8107ba6:	441d      	add	r5, r3
 8107ba8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8107bac:	2b20      	cmp	r3, #32
 8107bae:	bfc1      	itttt	gt
 8107bb0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8107bb4:	fa08 f803 	lslgt.w	r8, r8, r3
 8107bb8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8107bbc:	fa26 f303 	lsrgt.w	r3, r6, r3
 8107bc0:	bfd6      	itet	le
 8107bc2:	f1c3 0320 	rsble	r3, r3, #32
 8107bc6:	ea48 0003 	orrgt.w	r0, r8, r3
 8107bca:	fa06 f003 	lslle.w	r0, r6, r3
 8107bce:	f7f8 fd21 	bl	8100614 <__aeabi_ui2d>
 8107bd2:	2201      	movs	r2, #1
 8107bd4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8107bd8:	3d01      	subs	r5, #1
 8107bda:	920e      	str	r2, [sp, #56]	; 0x38
 8107bdc:	e76f      	b.n	8107abe <_dtoa_r+0x126>
 8107bde:	2301      	movs	r3, #1
 8107be0:	e7b3      	b.n	8107b4a <_dtoa_r+0x1b2>
 8107be2:	900c      	str	r0, [sp, #48]	; 0x30
 8107be4:	e7b2      	b.n	8107b4c <_dtoa_r+0x1b4>
 8107be6:	9b05      	ldr	r3, [sp, #20]
 8107be8:	eba3 030b 	sub.w	r3, r3, fp
 8107bec:	9305      	str	r3, [sp, #20]
 8107bee:	f1cb 0300 	rsb	r3, fp, #0
 8107bf2:	9308      	str	r3, [sp, #32]
 8107bf4:	2300      	movs	r3, #0
 8107bf6:	930b      	str	r3, [sp, #44]	; 0x2c
 8107bf8:	e7bf      	b.n	8107b7a <_dtoa_r+0x1e2>
 8107bfa:	2300      	movs	r3, #0
 8107bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8107bfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c00:	2b00      	cmp	r3, #0
 8107c02:	dc52      	bgt.n	8107caa <_dtoa_r+0x312>
 8107c04:	2301      	movs	r3, #1
 8107c06:	9301      	str	r3, [sp, #4]
 8107c08:	9304      	str	r3, [sp, #16]
 8107c0a:	461a      	mov	r2, r3
 8107c0c:	920a      	str	r2, [sp, #40]	; 0x28
 8107c0e:	e00b      	b.n	8107c28 <_dtoa_r+0x290>
 8107c10:	2301      	movs	r3, #1
 8107c12:	e7f3      	b.n	8107bfc <_dtoa_r+0x264>
 8107c14:	2300      	movs	r3, #0
 8107c16:	9309      	str	r3, [sp, #36]	; 0x24
 8107c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107c1a:	445b      	add	r3, fp
 8107c1c:	9301      	str	r3, [sp, #4]
 8107c1e:	3301      	adds	r3, #1
 8107c20:	2b01      	cmp	r3, #1
 8107c22:	9304      	str	r3, [sp, #16]
 8107c24:	bfb8      	it	lt
 8107c26:	2301      	movlt	r3, #1
 8107c28:	69e0      	ldr	r0, [r4, #28]
 8107c2a:	2100      	movs	r1, #0
 8107c2c:	2204      	movs	r2, #4
 8107c2e:	f102 0614 	add.w	r6, r2, #20
 8107c32:	429e      	cmp	r6, r3
 8107c34:	d93d      	bls.n	8107cb2 <_dtoa_r+0x31a>
 8107c36:	6041      	str	r1, [r0, #4]
 8107c38:	4620      	mov	r0, r4
 8107c3a:	f000 fd9f 	bl	810877c <_Balloc>
 8107c3e:	9000      	str	r0, [sp, #0]
 8107c40:	2800      	cmp	r0, #0
 8107c42:	d139      	bne.n	8107cb8 <_dtoa_r+0x320>
 8107c44:	4b16      	ldr	r3, [pc, #88]	; (8107ca0 <_dtoa_r+0x308>)
 8107c46:	4602      	mov	r2, r0
 8107c48:	f240 11af 	movw	r1, #431	; 0x1af
 8107c4c:	e6bd      	b.n	81079ca <_dtoa_r+0x32>
 8107c4e:	2301      	movs	r3, #1
 8107c50:	e7e1      	b.n	8107c16 <_dtoa_r+0x27e>
 8107c52:	2501      	movs	r5, #1
 8107c54:	2300      	movs	r3, #0
 8107c56:	9307      	str	r3, [sp, #28]
 8107c58:	9509      	str	r5, [sp, #36]	; 0x24
 8107c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8107c5e:	9301      	str	r3, [sp, #4]
 8107c60:	9304      	str	r3, [sp, #16]
 8107c62:	2200      	movs	r2, #0
 8107c64:	2312      	movs	r3, #18
 8107c66:	e7d1      	b.n	8107c0c <_dtoa_r+0x274>
 8107c68:	636f4361 	.word	0x636f4361
 8107c6c:	3fd287a7 	.word	0x3fd287a7
 8107c70:	8b60c8b3 	.word	0x8b60c8b3
 8107c74:	3fc68a28 	.word	0x3fc68a28
 8107c78:	509f79fb 	.word	0x509f79fb
 8107c7c:	3fd34413 	.word	0x3fd34413
 8107c80:	0810b00a 	.word	0x0810b00a
 8107c84:	0810b021 	.word	0x0810b021
 8107c88:	7ff00000 	.word	0x7ff00000
 8107c8c:	0810b006 	.word	0x0810b006
 8107c90:	0810affd 	.word	0x0810affd
 8107c94:	0810afd5 	.word	0x0810afd5
 8107c98:	3ff80000 	.word	0x3ff80000
 8107c9c:	0810b110 	.word	0x0810b110
 8107ca0:	0810b079 	.word	0x0810b079
 8107ca4:	2301      	movs	r3, #1
 8107ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8107ca8:	e7d7      	b.n	8107c5a <_dtoa_r+0x2c2>
 8107caa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107cac:	9301      	str	r3, [sp, #4]
 8107cae:	9304      	str	r3, [sp, #16]
 8107cb0:	e7ba      	b.n	8107c28 <_dtoa_r+0x290>
 8107cb2:	3101      	adds	r1, #1
 8107cb4:	0052      	lsls	r2, r2, #1
 8107cb6:	e7ba      	b.n	8107c2e <_dtoa_r+0x296>
 8107cb8:	69e3      	ldr	r3, [r4, #28]
 8107cba:	9a00      	ldr	r2, [sp, #0]
 8107cbc:	601a      	str	r2, [r3, #0]
 8107cbe:	9b04      	ldr	r3, [sp, #16]
 8107cc0:	2b0e      	cmp	r3, #14
 8107cc2:	f200 80a8 	bhi.w	8107e16 <_dtoa_r+0x47e>
 8107cc6:	2d00      	cmp	r5, #0
 8107cc8:	f000 80a5 	beq.w	8107e16 <_dtoa_r+0x47e>
 8107ccc:	f1bb 0f00 	cmp.w	fp, #0
 8107cd0:	dd38      	ble.n	8107d44 <_dtoa_r+0x3ac>
 8107cd2:	4bc0      	ldr	r3, [pc, #768]	; (8107fd4 <_dtoa_r+0x63c>)
 8107cd4:	f00b 020f 	and.w	r2, fp, #15
 8107cd8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8107cdc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8107ce0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8107ce4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8107ce8:	d019      	beq.n	8107d1e <_dtoa_r+0x386>
 8107cea:	4bbb      	ldr	r3, [pc, #748]	; (8107fd8 <_dtoa_r+0x640>)
 8107cec:	ec51 0b18 	vmov	r0, r1, d8
 8107cf0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8107cf4:	f7f8 fe32 	bl	810095c <__aeabi_ddiv>
 8107cf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107cfc:	f008 080f 	and.w	r8, r8, #15
 8107d00:	2503      	movs	r5, #3
 8107d02:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8107fd8 <_dtoa_r+0x640>
 8107d06:	f1b8 0f00 	cmp.w	r8, #0
 8107d0a:	d10a      	bne.n	8107d22 <_dtoa_r+0x38a>
 8107d0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107d10:	4632      	mov	r2, r6
 8107d12:	463b      	mov	r3, r7
 8107d14:	f7f8 fe22 	bl	810095c <__aeabi_ddiv>
 8107d18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107d1c:	e02b      	b.n	8107d76 <_dtoa_r+0x3de>
 8107d1e:	2502      	movs	r5, #2
 8107d20:	e7ef      	b.n	8107d02 <_dtoa_r+0x36a>
 8107d22:	f018 0f01 	tst.w	r8, #1
 8107d26:	d008      	beq.n	8107d3a <_dtoa_r+0x3a2>
 8107d28:	4630      	mov	r0, r6
 8107d2a:	4639      	mov	r1, r7
 8107d2c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8107d30:	f7f8 fcea 	bl	8100708 <__aeabi_dmul>
 8107d34:	3501      	adds	r5, #1
 8107d36:	4606      	mov	r6, r0
 8107d38:	460f      	mov	r7, r1
 8107d3a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8107d3e:	f109 0908 	add.w	r9, r9, #8
 8107d42:	e7e0      	b.n	8107d06 <_dtoa_r+0x36e>
 8107d44:	f000 809f 	beq.w	8107e86 <_dtoa_r+0x4ee>
 8107d48:	f1cb 0600 	rsb	r6, fp, #0
 8107d4c:	4ba1      	ldr	r3, [pc, #644]	; (8107fd4 <_dtoa_r+0x63c>)
 8107d4e:	4fa2      	ldr	r7, [pc, #648]	; (8107fd8 <_dtoa_r+0x640>)
 8107d50:	f006 020f 	and.w	r2, r6, #15
 8107d54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8107d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107d5c:	ec51 0b18 	vmov	r0, r1, d8
 8107d60:	f7f8 fcd2 	bl	8100708 <__aeabi_dmul>
 8107d64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107d68:	1136      	asrs	r6, r6, #4
 8107d6a:	2300      	movs	r3, #0
 8107d6c:	2502      	movs	r5, #2
 8107d6e:	2e00      	cmp	r6, #0
 8107d70:	d17e      	bne.n	8107e70 <_dtoa_r+0x4d8>
 8107d72:	2b00      	cmp	r3, #0
 8107d74:	d1d0      	bne.n	8107d18 <_dtoa_r+0x380>
 8107d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8107d78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8107d7c:	2b00      	cmp	r3, #0
 8107d7e:	f000 8084 	beq.w	8107e8a <_dtoa_r+0x4f2>
 8107d82:	4b96      	ldr	r3, [pc, #600]	; (8107fdc <_dtoa_r+0x644>)
 8107d84:	2200      	movs	r2, #0
 8107d86:	4640      	mov	r0, r8
 8107d88:	4649      	mov	r1, r9
 8107d8a:	f7f8 ff2f 	bl	8100bec <__aeabi_dcmplt>
 8107d8e:	2800      	cmp	r0, #0
 8107d90:	d07b      	beq.n	8107e8a <_dtoa_r+0x4f2>
 8107d92:	9b04      	ldr	r3, [sp, #16]
 8107d94:	2b00      	cmp	r3, #0
 8107d96:	d078      	beq.n	8107e8a <_dtoa_r+0x4f2>
 8107d98:	9b01      	ldr	r3, [sp, #4]
 8107d9a:	2b00      	cmp	r3, #0
 8107d9c:	dd39      	ble.n	8107e12 <_dtoa_r+0x47a>
 8107d9e:	4b90      	ldr	r3, [pc, #576]	; (8107fe0 <_dtoa_r+0x648>)
 8107da0:	2200      	movs	r2, #0
 8107da2:	4640      	mov	r0, r8
 8107da4:	4649      	mov	r1, r9
 8107da6:	f7f8 fcaf 	bl	8100708 <__aeabi_dmul>
 8107daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107dae:	9e01      	ldr	r6, [sp, #4]
 8107db0:	f10b 37ff 	add.w	r7, fp, #4294967295
 8107db4:	3501      	adds	r5, #1
 8107db6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8107dba:	4628      	mov	r0, r5
 8107dbc:	f7f8 fc3a 	bl	8100634 <__aeabi_i2d>
 8107dc0:	4642      	mov	r2, r8
 8107dc2:	464b      	mov	r3, r9
 8107dc4:	f7f8 fca0 	bl	8100708 <__aeabi_dmul>
 8107dc8:	4b86      	ldr	r3, [pc, #536]	; (8107fe4 <_dtoa_r+0x64c>)
 8107dca:	2200      	movs	r2, #0
 8107dcc:	f7f8 fae6 	bl	810039c <__adddf3>
 8107dd0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8107dd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107dd8:	9303      	str	r3, [sp, #12]
 8107dda:	2e00      	cmp	r6, #0
 8107ddc:	d158      	bne.n	8107e90 <_dtoa_r+0x4f8>
 8107dde:	4b82      	ldr	r3, [pc, #520]	; (8107fe8 <_dtoa_r+0x650>)
 8107de0:	2200      	movs	r2, #0
 8107de2:	4640      	mov	r0, r8
 8107de4:	4649      	mov	r1, r9
 8107de6:	f7f8 fad7 	bl	8100398 <__aeabi_dsub>
 8107dea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8107dee:	4680      	mov	r8, r0
 8107df0:	4689      	mov	r9, r1
 8107df2:	f7f8 ff19 	bl	8100c28 <__aeabi_dcmpgt>
 8107df6:	2800      	cmp	r0, #0
 8107df8:	f040 8296 	bne.w	8108328 <_dtoa_r+0x990>
 8107dfc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8107e00:	4640      	mov	r0, r8
 8107e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8107e06:	4649      	mov	r1, r9
 8107e08:	f7f8 fef0 	bl	8100bec <__aeabi_dcmplt>
 8107e0c:	2800      	cmp	r0, #0
 8107e0e:	f040 8289 	bne.w	8108324 <_dtoa_r+0x98c>
 8107e12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8107e16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8107e18:	2b00      	cmp	r3, #0
 8107e1a:	f2c0 814e 	blt.w	81080ba <_dtoa_r+0x722>
 8107e1e:	f1bb 0f0e 	cmp.w	fp, #14
 8107e22:	f300 814a 	bgt.w	81080ba <_dtoa_r+0x722>
 8107e26:	4b6b      	ldr	r3, [pc, #428]	; (8107fd4 <_dtoa_r+0x63c>)
 8107e28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8107e2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8107e30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8107e32:	2b00      	cmp	r3, #0
 8107e34:	f280 80dc 	bge.w	8107ff0 <_dtoa_r+0x658>
 8107e38:	9b04      	ldr	r3, [sp, #16]
 8107e3a:	2b00      	cmp	r3, #0
 8107e3c:	f300 80d8 	bgt.w	8107ff0 <_dtoa_r+0x658>
 8107e40:	f040 826f 	bne.w	8108322 <_dtoa_r+0x98a>
 8107e44:	4b68      	ldr	r3, [pc, #416]	; (8107fe8 <_dtoa_r+0x650>)
 8107e46:	2200      	movs	r2, #0
 8107e48:	4640      	mov	r0, r8
 8107e4a:	4649      	mov	r1, r9
 8107e4c:	f7f8 fc5c 	bl	8100708 <__aeabi_dmul>
 8107e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8107e54:	f7f8 fede 	bl	8100c14 <__aeabi_dcmpge>
 8107e58:	9e04      	ldr	r6, [sp, #16]
 8107e5a:	4637      	mov	r7, r6
 8107e5c:	2800      	cmp	r0, #0
 8107e5e:	f040 8245 	bne.w	81082ec <_dtoa_r+0x954>
 8107e62:	9d00      	ldr	r5, [sp, #0]
 8107e64:	2331      	movs	r3, #49	; 0x31
 8107e66:	f805 3b01 	strb.w	r3, [r5], #1
 8107e6a:	f10b 0b01 	add.w	fp, fp, #1
 8107e6e:	e241      	b.n	81082f4 <_dtoa_r+0x95c>
 8107e70:	07f2      	lsls	r2, r6, #31
 8107e72:	d505      	bpl.n	8107e80 <_dtoa_r+0x4e8>
 8107e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107e78:	f7f8 fc46 	bl	8100708 <__aeabi_dmul>
 8107e7c:	3501      	adds	r5, #1
 8107e7e:	2301      	movs	r3, #1
 8107e80:	1076      	asrs	r6, r6, #1
 8107e82:	3708      	adds	r7, #8
 8107e84:	e773      	b.n	8107d6e <_dtoa_r+0x3d6>
 8107e86:	2502      	movs	r5, #2
 8107e88:	e775      	b.n	8107d76 <_dtoa_r+0x3de>
 8107e8a:	9e04      	ldr	r6, [sp, #16]
 8107e8c:	465f      	mov	r7, fp
 8107e8e:	e792      	b.n	8107db6 <_dtoa_r+0x41e>
 8107e90:	9900      	ldr	r1, [sp, #0]
 8107e92:	4b50      	ldr	r3, [pc, #320]	; (8107fd4 <_dtoa_r+0x63c>)
 8107e94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8107e98:	4431      	add	r1, r6
 8107e9a:	9102      	str	r1, [sp, #8]
 8107e9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8107e9e:	eeb0 9a47 	vmov.f32	s18, s14
 8107ea2:	eef0 9a67 	vmov.f32	s19, s15
 8107ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8107eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8107eae:	2900      	cmp	r1, #0
 8107eb0:	d044      	beq.n	8107f3c <_dtoa_r+0x5a4>
 8107eb2:	494e      	ldr	r1, [pc, #312]	; (8107fec <_dtoa_r+0x654>)
 8107eb4:	2000      	movs	r0, #0
 8107eb6:	f7f8 fd51 	bl	810095c <__aeabi_ddiv>
 8107eba:	ec53 2b19 	vmov	r2, r3, d9
 8107ebe:	f7f8 fa6b 	bl	8100398 <__aeabi_dsub>
 8107ec2:	9d00      	ldr	r5, [sp, #0]
 8107ec4:	ec41 0b19 	vmov	d9, r0, r1
 8107ec8:	4649      	mov	r1, r9
 8107eca:	4640      	mov	r0, r8
 8107ecc:	f7f8 fecc 	bl	8100c68 <__aeabi_d2iz>
 8107ed0:	4606      	mov	r6, r0
 8107ed2:	f7f8 fbaf 	bl	8100634 <__aeabi_i2d>
 8107ed6:	4602      	mov	r2, r0
 8107ed8:	460b      	mov	r3, r1
 8107eda:	4640      	mov	r0, r8
 8107edc:	4649      	mov	r1, r9
 8107ede:	f7f8 fa5b 	bl	8100398 <__aeabi_dsub>
 8107ee2:	3630      	adds	r6, #48	; 0x30
 8107ee4:	f805 6b01 	strb.w	r6, [r5], #1
 8107ee8:	ec53 2b19 	vmov	r2, r3, d9
 8107eec:	4680      	mov	r8, r0
 8107eee:	4689      	mov	r9, r1
 8107ef0:	f7f8 fe7c 	bl	8100bec <__aeabi_dcmplt>
 8107ef4:	2800      	cmp	r0, #0
 8107ef6:	d164      	bne.n	8107fc2 <_dtoa_r+0x62a>
 8107ef8:	4642      	mov	r2, r8
 8107efa:	464b      	mov	r3, r9
 8107efc:	4937      	ldr	r1, [pc, #220]	; (8107fdc <_dtoa_r+0x644>)
 8107efe:	2000      	movs	r0, #0
 8107f00:	f7f8 fa4a 	bl	8100398 <__aeabi_dsub>
 8107f04:	ec53 2b19 	vmov	r2, r3, d9
 8107f08:	f7f8 fe70 	bl	8100bec <__aeabi_dcmplt>
 8107f0c:	2800      	cmp	r0, #0
 8107f0e:	f040 80b6 	bne.w	810807e <_dtoa_r+0x6e6>
 8107f12:	9b02      	ldr	r3, [sp, #8]
 8107f14:	429d      	cmp	r5, r3
 8107f16:	f43f af7c 	beq.w	8107e12 <_dtoa_r+0x47a>
 8107f1a:	4b31      	ldr	r3, [pc, #196]	; (8107fe0 <_dtoa_r+0x648>)
 8107f1c:	ec51 0b19 	vmov	r0, r1, d9
 8107f20:	2200      	movs	r2, #0
 8107f22:	f7f8 fbf1 	bl	8100708 <__aeabi_dmul>
 8107f26:	4b2e      	ldr	r3, [pc, #184]	; (8107fe0 <_dtoa_r+0x648>)
 8107f28:	ec41 0b19 	vmov	d9, r0, r1
 8107f2c:	2200      	movs	r2, #0
 8107f2e:	4640      	mov	r0, r8
 8107f30:	4649      	mov	r1, r9
 8107f32:	f7f8 fbe9 	bl	8100708 <__aeabi_dmul>
 8107f36:	4680      	mov	r8, r0
 8107f38:	4689      	mov	r9, r1
 8107f3a:	e7c5      	b.n	8107ec8 <_dtoa_r+0x530>
 8107f3c:	ec51 0b17 	vmov	r0, r1, d7
 8107f40:	f7f8 fbe2 	bl	8100708 <__aeabi_dmul>
 8107f44:	9b02      	ldr	r3, [sp, #8]
 8107f46:	9d00      	ldr	r5, [sp, #0]
 8107f48:	930f      	str	r3, [sp, #60]	; 0x3c
 8107f4a:	ec41 0b19 	vmov	d9, r0, r1
 8107f4e:	4649      	mov	r1, r9
 8107f50:	4640      	mov	r0, r8
 8107f52:	f7f8 fe89 	bl	8100c68 <__aeabi_d2iz>
 8107f56:	4606      	mov	r6, r0
 8107f58:	f7f8 fb6c 	bl	8100634 <__aeabi_i2d>
 8107f5c:	3630      	adds	r6, #48	; 0x30
 8107f5e:	4602      	mov	r2, r0
 8107f60:	460b      	mov	r3, r1
 8107f62:	4640      	mov	r0, r8
 8107f64:	4649      	mov	r1, r9
 8107f66:	f7f8 fa17 	bl	8100398 <__aeabi_dsub>
 8107f6a:	f805 6b01 	strb.w	r6, [r5], #1
 8107f6e:	9b02      	ldr	r3, [sp, #8]
 8107f70:	429d      	cmp	r5, r3
 8107f72:	4680      	mov	r8, r0
 8107f74:	4689      	mov	r9, r1
 8107f76:	f04f 0200 	mov.w	r2, #0
 8107f7a:	d124      	bne.n	8107fc6 <_dtoa_r+0x62e>
 8107f7c:	4b1b      	ldr	r3, [pc, #108]	; (8107fec <_dtoa_r+0x654>)
 8107f7e:	ec51 0b19 	vmov	r0, r1, d9
 8107f82:	f7f8 fa0b 	bl	810039c <__adddf3>
 8107f86:	4602      	mov	r2, r0
 8107f88:	460b      	mov	r3, r1
 8107f8a:	4640      	mov	r0, r8
 8107f8c:	4649      	mov	r1, r9
 8107f8e:	f7f8 fe4b 	bl	8100c28 <__aeabi_dcmpgt>
 8107f92:	2800      	cmp	r0, #0
 8107f94:	d173      	bne.n	810807e <_dtoa_r+0x6e6>
 8107f96:	ec53 2b19 	vmov	r2, r3, d9
 8107f9a:	4914      	ldr	r1, [pc, #80]	; (8107fec <_dtoa_r+0x654>)
 8107f9c:	2000      	movs	r0, #0
 8107f9e:	f7f8 f9fb 	bl	8100398 <__aeabi_dsub>
 8107fa2:	4602      	mov	r2, r0
 8107fa4:	460b      	mov	r3, r1
 8107fa6:	4640      	mov	r0, r8
 8107fa8:	4649      	mov	r1, r9
 8107faa:	f7f8 fe1f 	bl	8100bec <__aeabi_dcmplt>
 8107fae:	2800      	cmp	r0, #0
 8107fb0:	f43f af2f 	beq.w	8107e12 <_dtoa_r+0x47a>
 8107fb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8107fb6:	1e6b      	subs	r3, r5, #1
 8107fb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8107fba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8107fbe:	2b30      	cmp	r3, #48	; 0x30
 8107fc0:	d0f8      	beq.n	8107fb4 <_dtoa_r+0x61c>
 8107fc2:	46bb      	mov	fp, r7
 8107fc4:	e04a      	b.n	810805c <_dtoa_r+0x6c4>
 8107fc6:	4b06      	ldr	r3, [pc, #24]	; (8107fe0 <_dtoa_r+0x648>)
 8107fc8:	f7f8 fb9e 	bl	8100708 <__aeabi_dmul>
 8107fcc:	4680      	mov	r8, r0
 8107fce:	4689      	mov	r9, r1
 8107fd0:	e7bd      	b.n	8107f4e <_dtoa_r+0x5b6>
 8107fd2:	bf00      	nop
 8107fd4:	0810b110 	.word	0x0810b110
 8107fd8:	0810b0e8 	.word	0x0810b0e8
 8107fdc:	3ff00000 	.word	0x3ff00000
 8107fe0:	40240000 	.word	0x40240000
 8107fe4:	401c0000 	.word	0x401c0000
 8107fe8:	40140000 	.word	0x40140000
 8107fec:	3fe00000 	.word	0x3fe00000
 8107ff0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8107ff4:	9d00      	ldr	r5, [sp, #0]
 8107ff6:	4642      	mov	r2, r8
 8107ff8:	464b      	mov	r3, r9
 8107ffa:	4630      	mov	r0, r6
 8107ffc:	4639      	mov	r1, r7
 8107ffe:	f7f8 fcad 	bl	810095c <__aeabi_ddiv>
 8108002:	f7f8 fe31 	bl	8100c68 <__aeabi_d2iz>
 8108006:	9001      	str	r0, [sp, #4]
 8108008:	f7f8 fb14 	bl	8100634 <__aeabi_i2d>
 810800c:	4642      	mov	r2, r8
 810800e:	464b      	mov	r3, r9
 8108010:	f7f8 fb7a 	bl	8100708 <__aeabi_dmul>
 8108014:	4602      	mov	r2, r0
 8108016:	460b      	mov	r3, r1
 8108018:	4630      	mov	r0, r6
 810801a:	4639      	mov	r1, r7
 810801c:	f7f8 f9bc 	bl	8100398 <__aeabi_dsub>
 8108020:	9e01      	ldr	r6, [sp, #4]
 8108022:	9f04      	ldr	r7, [sp, #16]
 8108024:	3630      	adds	r6, #48	; 0x30
 8108026:	f805 6b01 	strb.w	r6, [r5], #1
 810802a:	9e00      	ldr	r6, [sp, #0]
 810802c:	1bae      	subs	r6, r5, r6
 810802e:	42b7      	cmp	r7, r6
 8108030:	4602      	mov	r2, r0
 8108032:	460b      	mov	r3, r1
 8108034:	d134      	bne.n	81080a0 <_dtoa_r+0x708>
 8108036:	f7f8 f9b1 	bl	810039c <__adddf3>
 810803a:	4642      	mov	r2, r8
 810803c:	464b      	mov	r3, r9
 810803e:	4606      	mov	r6, r0
 8108040:	460f      	mov	r7, r1
 8108042:	f7f8 fdf1 	bl	8100c28 <__aeabi_dcmpgt>
 8108046:	b9c8      	cbnz	r0, 810807c <_dtoa_r+0x6e4>
 8108048:	4642      	mov	r2, r8
 810804a:	464b      	mov	r3, r9
 810804c:	4630      	mov	r0, r6
 810804e:	4639      	mov	r1, r7
 8108050:	f7f8 fdc2 	bl	8100bd8 <__aeabi_dcmpeq>
 8108054:	b110      	cbz	r0, 810805c <_dtoa_r+0x6c4>
 8108056:	9b01      	ldr	r3, [sp, #4]
 8108058:	07db      	lsls	r3, r3, #31
 810805a:	d40f      	bmi.n	810807c <_dtoa_r+0x6e4>
 810805c:	4651      	mov	r1, sl
 810805e:	4620      	mov	r0, r4
 8108060:	f000 fbcc 	bl	81087fc <_Bfree>
 8108064:	2300      	movs	r3, #0
 8108066:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8108068:	702b      	strb	r3, [r5, #0]
 810806a:	f10b 0301 	add.w	r3, fp, #1
 810806e:	6013      	str	r3, [r2, #0]
 8108070:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108072:	2b00      	cmp	r3, #0
 8108074:	f43f ace2 	beq.w	8107a3c <_dtoa_r+0xa4>
 8108078:	601d      	str	r5, [r3, #0]
 810807a:	e4df      	b.n	8107a3c <_dtoa_r+0xa4>
 810807c:	465f      	mov	r7, fp
 810807e:	462b      	mov	r3, r5
 8108080:	461d      	mov	r5, r3
 8108082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108086:	2a39      	cmp	r2, #57	; 0x39
 8108088:	d106      	bne.n	8108098 <_dtoa_r+0x700>
 810808a:	9a00      	ldr	r2, [sp, #0]
 810808c:	429a      	cmp	r2, r3
 810808e:	d1f7      	bne.n	8108080 <_dtoa_r+0x6e8>
 8108090:	9900      	ldr	r1, [sp, #0]
 8108092:	2230      	movs	r2, #48	; 0x30
 8108094:	3701      	adds	r7, #1
 8108096:	700a      	strb	r2, [r1, #0]
 8108098:	781a      	ldrb	r2, [r3, #0]
 810809a:	3201      	adds	r2, #1
 810809c:	701a      	strb	r2, [r3, #0]
 810809e:	e790      	b.n	8107fc2 <_dtoa_r+0x62a>
 81080a0:	4ba3      	ldr	r3, [pc, #652]	; (8108330 <_dtoa_r+0x998>)
 81080a2:	2200      	movs	r2, #0
 81080a4:	f7f8 fb30 	bl	8100708 <__aeabi_dmul>
 81080a8:	2200      	movs	r2, #0
 81080aa:	2300      	movs	r3, #0
 81080ac:	4606      	mov	r6, r0
 81080ae:	460f      	mov	r7, r1
 81080b0:	f7f8 fd92 	bl	8100bd8 <__aeabi_dcmpeq>
 81080b4:	2800      	cmp	r0, #0
 81080b6:	d09e      	beq.n	8107ff6 <_dtoa_r+0x65e>
 81080b8:	e7d0      	b.n	810805c <_dtoa_r+0x6c4>
 81080ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81080bc:	2a00      	cmp	r2, #0
 81080be:	f000 80ca 	beq.w	8108256 <_dtoa_r+0x8be>
 81080c2:	9a07      	ldr	r2, [sp, #28]
 81080c4:	2a01      	cmp	r2, #1
 81080c6:	f300 80ad 	bgt.w	8108224 <_dtoa_r+0x88c>
 81080ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 81080cc:	2a00      	cmp	r2, #0
 81080ce:	f000 80a5 	beq.w	810821c <_dtoa_r+0x884>
 81080d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 81080d6:	9e08      	ldr	r6, [sp, #32]
 81080d8:	9d05      	ldr	r5, [sp, #20]
 81080da:	9a05      	ldr	r2, [sp, #20]
 81080dc:	441a      	add	r2, r3
 81080de:	9205      	str	r2, [sp, #20]
 81080e0:	9a06      	ldr	r2, [sp, #24]
 81080e2:	2101      	movs	r1, #1
 81080e4:	441a      	add	r2, r3
 81080e6:	4620      	mov	r0, r4
 81080e8:	9206      	str	r2, [sp, #24]
 81080ea:	f000 fc87 	bl	81089fc <__i2b>
 81080ee:	4607      	mov	r7, r0
 81080f0:	b165      	cbz	r5, 810810c <_dtoa_r+0x774>
 81080f2:	9b06      	ldr	r3, [sp, #24]
 81080f4:	2b00      	cmp	r3, #0
 81080f6:	dd09      	ble.n	810810c <_dtoa_r+0x774>
 81080f8:	42ab      	cmp	r3, r5
 81080fa:	9a05      	ldr	r2, [sp, #20]
 81080fc:	bfa8      	it	ge
 81080fe:	462b      	movge	r3, r5
 8108100:	1ad2      	subs	r2, r2, r3
 8108102:	9205      	str	r2, [sp, #20]
 8108104:	9a06      	ldr	r2, [sp, #24]
 8108106:	1aed      	subs	r5, r5, r3
 8108108:	1ad3      	subs	r3, r2, r3
 810810a:	9306      	str	r3, [sp, #24]
 810810c:	9b08      	ldr	r3, [sp, #32]
 810810e:	b1f3      	cbz	r3, 810814e <_dtoa_r+0x7b6>
 8108110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108112:	2b00      	cmp	r3, #0
 8108114:	f000 80a3 	beq.w	810825e <_dtoa_r+0x8c6>
 8108118:	2e00      	cmp	r6, #0
 810811a:	dd10      	ble.n	810813e <_dtoa_r+0x7a6>
 810811c:	4639      	mov	r1, r7
 810811e:	4632      	mov	r2, r6
 8108120:	4620      	mov	r0, r4
 8108122:	f000 fd2b 	bl	8108b7c <__pow5mult>
 8108126:	4652      	mov	r2, sl
 8108128:	4601      	mov	r1, r0
 810812a:	4607      	mov	r7, r0
 810812c:	4620      	mov	r0, r4
 810812e:	f000 fc7b 	bl	8108a28 <__multiply>
 8108132:	4651      	mov	r1, sl
 8108134:	4680      	mov	r8, r0
 8108136:	4620      	mov	r0, r4
 8108138:	f000 fb60 	bl	81087fc <_Bfree>
 810813c:	46c2      	mov	sl, r8
 810813e:	9b08      	ldr	r3, [sp, #32]
 8108140:	1b9a      	subs	r2, r3, r6
 8108142:	d004      	beq.n	810814e <_dtoa_r+0x7b6>
 8108144:	4651      	mov	r1, sl
 8108146:	4620      	mov	r0, r4
 8108148:	f000 fd18 	bl	8108b7c <__pow5mult>
 810814c:	4682      	mov	sl, r0
 810814e:	2101      	movs	r1, #1
 8108150:	4620      	mov	r0, r4
 8108152:	f000 fc53 	bl	81089fc <__i2b>
 8108156:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108158:	2b00      	cmp	r3, #0
 810815a:	4606      	mov	r6, r0
 810815c:	f340 8081 	ble.w	8108262 <_dtoa_r+0x8ca>
 8108160:	461a      	mov	r2, r3
 8108162:	4601      	mov	r1, r0
 8108164:	4620      	mov	r0, r4
 8108166:	f000 fd09 	bl	8108b7c <__pow5mult>
 810816a:	9b07      	ldr	r3, [sp, #28]
 810816c:	2b01      	cmp	r3, #1
 810816e:	4606      	mov	r6, r0
 8108170:	dd7a      	ble.n	8108268 <_dtoa_r+0x8d0>
 8108172:	f04f 0800 	mov.w	r8, #0
 8108176:	6933      	ldr	r3, [r6, #16]
 8108178:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810817c:	6918      	ldr	r0, [r3, #16]
 810817e:	f000 fbef 	bl	8108960 <__hi0bits>
 8108182:	f1c0 0020 	rsb	r0, r0, #32
 8108186:	9b06      	ldr	r3, [sp, #24]
 8108188:	4418      	add	r0, r3
 810818a:	f010 001f 	ands.w	r0, r0, #31
 810818e:	f000 8094 	beq.w	81082ba <_dtoa_r+0x922>
 8108192:	f1c0 0320 	rsb	r3, r0, #32
 8108196:	2b04      	cmp	r3, #4
 8108198:	f340 8085 	ble.w	81082a6 <_dtoa_r+0x90e>
 810819c:	9b05      	ldr	r3, [sp, #20]
 810819e:	f1c0 001c 	rsb	r0, r0, #28
 81081a2:	4403      	add	r3, r0
 81081a4:	9305      	str	r3, [sp, #20]
 81081a6:	9b06      	ldr	r3, [sp, #24]
 81081a8:	4403      	add	r3, r0
 81081aa:	4405      	add	r5, r0
 81081ac:	9306      	str	r3, [sp, #24]
 81081ae:	9b05      	ldr	r3, [sp, #20]
 81081b0:	2b00      	cmp	r3, #0
 81081b2:	dd05      	ble.n	81081c0 <_dtoa_r+0x828>
 81081b4:	4651      	mov	r1, sl
 81081b6:	461a      	mov	r2, r3
 81081b8:	4620      	mov	r0, r4
 81081ba:	f000 fd39 	bl	8108c30 <__lshift>
 81081be:	4682      	mov	sl, r0
 81081c0:	9b06      	ldr	r3, [sp, #24]
 81081c2:	2b00      	cmp	r3, #0
 81081c4:	dd05      	ble.n	81081d2 <_dtoa_r+0x83a>
 81081c6:	4631      	mov	r1, r6
 81081c8:	461a      	mov	r2, r3
 81081ca:	4620      	mov	r0, r4
 81081cc:	f000 fd30 	bl	8108c30 <__lshift>
 81081d0:	4606      	mov	r6, r0
 81081d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 81081d4:	2b00      	cmp	r3, #0
 81081d6:	d072      	beq.n	81082be <_dtoa_r+0x926>
 81081d8:	4631      	mov	r1, r6
 81081da:	4650      	mov	r0, sl
 81081dc:	f000 fd94 	bl	8108d08 <__mcmp>
 81081e0:	2800      	cmp	r0, #0
 81081e2:	da6c      	bge.n	81082be <_dtoa_r+0x926>
 81081e4:	2300      	movs	r3, #0
 81081e6:	4651      	mov	r1, sl
 81081e8:	220a      	movs	r2, #10
 81081ea:	4620      	mov	r0, r4
 81081ec:	f000 fb28 	bl	8108840 <__multadd>
 81081f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81081f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 81081f6:	4682      	mov	sl, r0
 81081f8:	2b00      	cmp	r3, #0
 81081fa:	f000 81b0 	beq.w	810855e <_dtoa_r+0xbc6>
 81081fe:	2300      	movs	r3, #0
 8108200:	4639      	mov	r1, r7
 8108202:	220a      	movs	r2, #10
 8108204:	4620      	mov	r0, r4
 8108206:	f000 fb1b 	bl	8108840 <__multadd>
 810820a:	9b01      	ldr	r3, [sp, #4]
 810820c:	2b00      	cmp	r3, #0
 810820e:	4607      	mov	r7, r0
 8108210:	f300 8096 	bgt.w	8108340 <_dtoa_r+0x9a8>
 8108214:	9b07      	ldr	r3, [sp, #28]
 8108216:	2b02      	cmp	r3, #2
 8108218:	dc59      	bgt.n	81082ce <_dtoa_r+0x936>
 810821a:	e091      	b.n	8108340 <_dtoa_r+0x9a8>
 810821c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 810821e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8108222:	e758      	b.n	81080d6 <_dtoa_r+0x73e>
 8108224:	9b04      	ldr	r3, [sp, #16]
 8108226:	1e5e      	subs	r6, r3, #1
 8108228:	9b08      	ldr	r3, [sp, #32]
 810822a:	42b3      	cmp	r3, r6
 810822c:	bfbf      	itttt	lt
 810822e:	9b08      	ldrlt	r3, [sp, #32]
 8108230:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8108232:	9608      	strlt	r6, [sp, #32]
 8108234:	1af3      	sublt	r3, r6, r3
 8108236:	bfb4      	ite	lt
 8108238:	18d2      	addlt	r2, r2, r3
 810823a:	1b9e      	subge	r6, r3, r6
 810823c:	9b04      	ldr	r3, [sp, #16]
 810823e:	bfbc      	itt	lt
 8108240:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8108242:	2600      	movlt	r6, #0
 8108244:	2b00      	cmp	r3, #0
 8108246:	bfb7      	itett	lt
 8108248:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810824c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8108250:	1a9d      	sublt	r5, r3, r2
 8108252:	2300      	movlt	r3, #0
 8108254:	e741      	b.n	81080da <_dtoa_r+0x742>
 8108256:	9e08      	ldr	r6, [sp, #32]
 8108258:	9d05      	ldr	r5, [sp, #20]
 810825a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810825c:	e748      	b.n	81080f0 <_dtoa_r+0x758>
 810825e:	9a08      	ldr	r2, [sp, #32]
 8108260:	e770      	b.n	8108144 <_dtoa_r+0x7ac>
 8108262:	9b07      	ldr	r3, [sp, #28]
 8108264:	2b01      	cmp	r3, #1
 8108266:	dc19      	bgt.n	810829c <_dtoa_r+0x904>
 8108268:	9b02      	ldr	r3, [sp, #8]
 810826a:	b9bb      	cbnz	r3, 810829c <_dtoa_r+0x904>
 810826c:	9b03      	ldr	r3, [sp, #12]
 810826e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8108272:	b99b      	cbnz	r3, 810829c <_dtoa_r+0x904>
 8108274:	9b03      	ldr	r3, [sp, #12]
 8108276:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810827a:	0d1b      	lsrs	r3, r3, #20
 810827c:	051b      	lsls	r3, r3, #20
 810827e:	b183      	cbz	r3, 81082a2 <_dtoa_r+0x90a>
 8108280:	9b05      	ldr	r3, [sp, #20]
 8108282:	3301      	adds	r3, #1
 8108284:	9305      	str	r3, [sp, #20]
 8108286:	9b06      	ldr	r3, [sp, #24]
 8108288:	3301      	adds	r3, #1
 810828a:	9306      	str	r3, [sp, #24]
 810828c:	f04f 0801 	mov.w	r8, #1
 8108290:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8108292:	2b00      	cmp	r3, #0
 8108294:	f47f af6f 	bne.w	8108176 <_dtoa_r+0x7de>
 8108298:	2001      	movs	r0, #1
 810829a:	e774      	b.n	8108186 <_dtoa_r+0x7ee>
 810829c:	f04f 0800 	mov.w	r8, #0
 81082a0:	e7f6      	b.n	8108290 <_dtoa_r+0x8f8>
 81082a2:	4698      	mov	r8, r3
 81082a4:	e7f4      	b.n	8108290 <_dtoa_r+0x8f8>
 81082a6:	d082      	beq.n	81081ae <_dtoa_r+0x816>
 81082a8:	9a05      	ldr	r2, [sp, #20]
 81082aa:	331c      	adds	r3, #28
 81082ac:	441a      	add	r2, r3
 81082ae:	9205      	str	r2, [sp, #20]
 81082b0:	9a06      	ldr	r2, [sp, #24]
 81082b2:	441a      	add	r2, r3
 81082b4:	441d      	add	r5, r3
 81082b6:	9206      	str	r2, [sp, #24]
 81082b8:	e779      	b.n	81081ae <_dtoa_r+0x816>
 81082ba:	4603      	mov	r3, r0
 81082bc:	e7f4      	b.n	81082a8 <_dtoa_r+0x910>
 81082be:	9b04      	ldr	r3, [sp, #16]
 81082c0:	2b00      	cmp	r3, #0
 81082c2:	dc37      	bgt.n	8108334 <_dtoa_r+0x99c>
 81082c4:	9b07      	ldr	r3, [sp, #28]
 81082c6:	2b02      	cmp	r3, #2
 81082c8:	dd34      	ble.n	8108334 <_dtoa_r+0x99c>
 81082ca:	9b04      	ldr	r3, [sp, #16]
 81082cc:	9301      	str	r3, [sp, #4]
 81082ce:	9b01      	ldr	r3, [sp, #4]
 81082d0:	b963      	cbnz	r3, 81082ec <_dtoa_r+0x954>
 81082d2:	4631      	mov	r1, r6
 81082d4:	2205      	movs	r2, #5
 81082d6:	4620      	mov	r0, r4
 81082d8:	f000 fab2 	bl	8108840 <__multadd>
 81082dc:	4601      	mov	r1, r0
 81082de:	4606      	mov	r6, r0
 81082e0:	4650      	mov	r0, sl
 81082e2:	f000 fd11 	bl	8108d08 <__mcmp>
 81082e6:	2800      	cmp	r0, #0
 81082e8:	f73f adbb 	bgt.w	8107e62 <_dtoa_r+0x4ca>
 81082ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81082ee:	9d00      	ldr	r5, [sp, #0]
 81082f0:	ea6f 0b03 	mvn.w	fp, r3
 81082f4:	f04f 0800 	mov.w	r8, #0
 81082f8:	4631      	mov	r1, r6
 81082fa:	4620      	mov	r0, r4
 81082fc:	f000 fa7e 	bl	81087fc <_Bfree>
 8108300:	2f00      	cmp	r7, #0
 8108302:	f43f aeab 	beq.w	810805c <_dtoa_r+0x6c4>
 8108306:	f1b8 0f00 	cmp.w	r8, #0
 810830a:	d005      	beq.n	8108318 <_dtoa_r+0x980>
 810830c:	45b8      	cmp	r8, r7
 810830e:	d003      	beq.n	8108318 <_dtoa_r+0x980>
 8108310:	4641      	mov	r1, r8
 8108312:	4620      	mov	r0, r4
 8108314:	f000 fa72 	bl	81087fc <_Bfree>
 8108318:	4639      	mov	r1, r7
 810831a:	4620      	mov	r0, r4
 810831c:	f000 fa6e 	bl	81087fc <_Bfree>
 8108320:	e69c      	b.n	810805c <_dtoa_r+0x6c4>
 8108322:	2600      	movs	r6, #0
 8108324:	4637      	mov	r7, r6
 8108326:	e7e1      	b.n	81082ec <_dtoa_r+0x954>
 8108328:	46bb      	mov	fp, r7
 810832a:	4637      	mov	r7, r6
 810832c:	e599      	b.n	8107e62 <_dtoa_r+0x4ca>
 810832e:	bf00      	nop
 8108330:	40240000 	.word	0x40240000
 8108334:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8108336:	2b00      	cmp	r3, #0
 8108338:	f000 80c8 	beq.w	81084cc <_dtoa_r+0xb34>
 810833c:	9b04      	ldr	r3, [sp, #16]
 810833e:	9301      	str	r3, [sp, #4]
 8108340:	2d00      	cmp	r5, #0
 8108342:	dd05      	ble.n	8108350 <_dtoa_r+0x9b8>
 8108344:	4639      	mov	r1, r7
 8108346:	462a      	mov	r2, r5
 8108348:	4620      	mov	r0, r4
 810834a:	f000 fc71 	bl	8108c30 <__lshift>
 810834e:	4607      	mov	r7, r0
 8108350:	f1b8 0f00 	cmp.w	r8, #0
 8108354:	d05b      	beq.n	810840e <_dtoa_r+0xa76>
 8108356:	6879      	ldr	r1, [r7, #4]
 8108358:	4620      	mov	r0, r4
 810835a:	f000 fa0f 	bl	810877c <_Balloc>
 810835e:	4605      	mov	r5, r0
 8108360:	b928      	cbnz	r0, 810836e <_dtoa_r+0x9d6>
 8108362:	4b83      	ldr	r3, [pc, #524]	; (8108570 <_dtoa_r+0xbd8>)
 8108364:	4602      	mov	r2, r0
 8108366:	f240 21ef 	movw	r1, #751	; 0x2ef
 810836a:	f7ff bb2e 	b.w	81079ca <_dtoa_r+0x32>
 810836e:	693a      	ldr	r2, [r7, #16]
 8108370:	3202      	adds	r2, #2
 8108372:	0092      	lsls	r2, r2, #2
 8108374:	f107 010c 	add.w	r1, r7, #12
 8108378:	300c      	adds	r0, #12
 810837a:	f002 f94d 	bl	810a618 <memcpy>
 810837e:	2201      	movs	r2, #1
 8108380:	4629      	mov	r1, r5
 8108382:	4620      	mov	r0, r4
 8108384:	f000 fc54 	bl	8108c30 <__lshift>
 8108388:	9b00      	ldr	r3, [sp, #0]
 810838a:	3301      	adds	r3, #1
 810838c:	9304      	str	r3, [sp, #16]
 810838e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8108392:	4413      	add	r3, r2
 8108394:	9308      	str	r3, [sp, #32]
 8108396:	9b02      	ldr	r3, [sp, #8]
 8108398:	f003 0301 	and.w	r3, r3, #1
 810839c:	46b8      	mov	r8, r7
 810839e:	9306      	str	r3, [sp, #24]
 81083a0:	4607      	mov	r7, r0
 81083a2:	9b04      	ldr	r3, [sp, #16]
 81083a4:	4631      	mov	r1, r6
 81083a6:	3b01      	subs	r3, #1
 81083a8:	4650      	mov	r0, sl
 81083aa:	9301      	str	r3, [sp, #4]
 81083ac:	f7ff fa6a 	bl	8107884 <quorem>
 81083b0:	4641      	mov	r1, r8
 81083b2:	9002      	str	r0, [sp, #8]
 81083b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 81083b8:	4650      	mov	r0, sl
 81083ba:	f000 fca5 	bl	8108d08 <__mcmp>
 81083be:	463a      	mov	r2, r7
 81083c0:	9005      	str	r0, [sp, #20]
 81083c2:	4631      	mov	r1, r6
 81083c4:	4620      	mov	r0, r4
 81083c6:	f000 fcbb 	bl	8108d40 <__mdiff>
 81083ca:	68c2      	ldr	r2, [r0, #12]
 81083cc:	4605      	mov	r5, r0
 81083ce:	bb02      	cbnz	r2, 8108412 <_dtoa_r+0xa7a>
 81083d0:	4601      	mov	r1, r0
 81083d2:	4650      	mov	r0, sl
 81083d4:	f000 fc98 	bl	8108d08 <__mcmp>
 81083d8:	4602      	mov	r2, r0
 81083da:	4629      	mov	r1, r5
 81083dc:	4620      	mov	r0, r4
 81083de:	9209      	str	r2, [sp, #36]	; 0x24
 81083e0:	f000 fa0c 	bl	81087fc <_Bfree>
 81083e4:	9b07      	ldr	r3, [sp, #28]
 81083e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81083e8:	9d04      	ldr	r5, [sp, #16]
 81083ea:	ea43 0102 	orr.w	r1, r3, r2
 81083ee:	9b06      	ldr	r3, [sp, #24]
 81083f0:	4319      	orrs	r1, r3
 81083f2:	d110      	bne.n	8108416 <_dtoa_r+0xa7e>
 81083f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 81083f8:	d029      	beq.n	810844e <_dtoa_r+0xab6>
 81083fa:	9b05      	ldr	r3, [sp, #20]
 81083fc:	2b00      	cmp	r3, #0
 81083fe:	dd02      	ble.n	8108406 <_dtoa_r+0xa6e>
 8108400:	9b02      	ldr	r3, [sp, #8]
 8108402:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8108406:	9b01      	ldr	r3, [sp, #4]
 8108408:	f883 9000 	strb.w	r9, [r3]
 810840c:	e774      	b.n	81082f8 <_dtoa_r+0x960>
 810840e:	4638      	mov	r0, r7
 8108410:	e7ba      	b.n	8108388 <_dtoa_r+0x9f0>
 8108412:	2201      	movs	r2, #1
 8108414:	e7e1      	b.n	81083da <_dtoa_r+0xa42>
 8108416:	9b05      	ldr	r3, [sp, #20]
 8108418:	2b00      	cmp	r3, #0
 810841a:	db04      	blt.n	8108426 <_dtoa_r+0xa8e>
 810841c:	9907      	ldr	r1, [sp, #28]
 810841e:	430b      	orrs	r3, r1
 8108420:	9906      	ldr	r1, [sp, #24]
 8108422:	430b      	orrs	r3, r1
 8108424:	d120      	bne.n	8108468 <_dtoa_r+0xad0>
 8108426:	2a00      	cmp	r2, #0
 8108428:	dded      	ble.n	8108406 <_dtoa_r+0xa6e>
 810842a:	4651      	mov	r1, sl
 810842c:	2201      	movs	r2, #1
 810842e:	4620      	mov	r0, r4
 8108430:	f000 fbfe 	bl	8108c30 <__lshift>
 8108434:	4631      	mov	r1, r6
 8108436:	4682      	mov	sl, r0
 8108438:	f000 fc66 	bl	8108d08 <__mcmp>
 810843c:	2800      	cmp	r0, #0
 810843e:	dc03      	bgt.n	8108448 <_dtoa_r+0xab0>
 8108440:	d1e1      	bne.n	8108406 <_dtoa_r+0xa6e>
 8108442:	f019 0f01 	tst.w	r9, #1
 8108446:	d0de      	beq.n	8108406 <_dtoa_r+0xa6e>
 8108448:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810844c:	d1d8      	bne.n	8108400 <_dtoa_r+0xa68>
 810844e:	9a01      	ldr	r2, [sp, #4]
 8108450:	2339      	movs	r3, #57	; 0x39
 8108452:	7013      	strb	r3, [r2, #0]
 8108454:	462b      	mov	r3, r5
 8108456:	461d      	mov	r5, r3
 8108458:	3b01      	subs	r3, #1
 810845a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810845e:	2a39      	cmp	r2, #57	; 0x39
 8108460:	d06c      	beq.n	810853c <_dtoa_r+0xba4>
 8108462:	3201      	adds	r2, #1
 8108464:	701a      	strb	r2, [r3, #0]
 8108466:	e747      	b.n	81082f8 <_dtoa_r+0x960>
 8108468:	2a00      	cmp	r2, #0
 810846a:	dd07      	ble.n	810847c <_dtoa_r+0xae4>
 810846c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8108470:	d0ed      	beq.n	810844e <_dtoa_r+0xab6>
 8108472:	9a01      	ldr	r2, [sp, #4]
 8108474:	f109 0301 	add.w	r3, r9, #1
 8108478:	7013      	strb	r3, [r2, #0]
 810847a:	e73d      	b.n	81082f8 <_dtoa_r+0x960>
 810847c:	9b04      	ldr	r3, [sp, #16]
 810847e:	9a08      	ldr	r2, [sp, #32]
 8108480:	f803 9c01 	strb.w	r9, [r3, #-1]
 8108484:	4293      	cmp	r3, r2
 8108486:	d043      	beq.n	8108510 <_dtoa_r+0xb78>
 8108488:	4651      	mov	r1, sl
 810848a:	2300      	movs	r3, #0
 810848c:	220a      	movs	r2, #10
 810848e:	4620      	mov	r0, r4
 8108490:	f000 f9d6 	bl	8108840 <__multadd>
 8108494:	45b8      	cmp	r8, r7
 8108496:	4682      	mov	sl, r0
 8108498:	f04f 0300 	mov.w	r3, #0
 810849c:	f04f 020a 	mov.w	r2, #10
 81084a0:	4641      	mov	r1, r8
 81084a2:	4620      	mov	r0, r4
 81084a4:	d107      	bne.n	81084b6 <_dtoa_r+0xb1e>
 81084a6:	f000 f9cb 	bl	8108840 <__multadd>
 81084aa:	4680      	mov	r8, r0
 81084ac:	4607      	mov	r7, r0
 81084ae:	9b04      	ldr	r3, [sp, #16]
 81084b0:	3301      	adds	r3, #1
 81084b2:	9304      	str	r3, [sp, #16]
 81084b4:	e775      	b.n	81083a2 <_dtoa_r+0xa0a>
 81084b6:	f000 f9c3 	bl	8108840 <__multadd>
 81084ba:	4639      	mov	r1, r7
 81084bc:	4680      	mov	r8, r0
 81084be:	2300      	movs	r3, #0
 81084c0:	220a      	movs	r2, #10
 81084c2:	4620      	mov	r0, r4
 81084c4:	f000 f9bc 	bl	8108840 <__multadd>
 81084c8:	4607      	mov	r7, r0
 81084ca:	e7f0      	b.n	81084ae <_dtoa_r+0xb16>
 81084cc:	9b04      	ldr	r3, [sp, #16]
 81084ce:	9301      	str	r3, [sp, #4]
 81084d0:	9d00      	ldr	r5, [sp, #0]
 81084d2:	4631      	mov	r1, r6
 81084d4:	4650      	mov	r0, sl
 81084d6:	f7ff f9d5 	bl	8107884 <quorem>
 81084da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 81084de:	9b00      	ldr	r3, [sp, #0]
 81084e0:	f805 9b01 	strb.w	r9, [r5], #1
 81084e4:	1aea      	subs	r2, r5, r3
 81084e6:	9b01      	ldr	r3, [sp, #4]
 81084e8:	4293      	cmp	r3, r2
 81084ea:	dd07      	ble.n	81084fc <_dtoa_r+0xb64>
 81084ec:	4651      	mov	r1, sl
 81084ee:	2300      	movs	r3, #0
 81084f0:	220a      	movs	r2, #10
 81084f2:	4620      	mov	r0, r4
 81084f4:	f000 f9a4 	bl	8108840 <__multadd>
 81084f8:	4682      	mov	sl, r0
 81084fa:	e7ea      	b.n	81084d2 <_dtoa_r+0xb3a>
 81084fc:	9b01      	ldr	r3, [sp, #4]
 81084fe:	2b00      	cmp	r3, #0
 8108500:	bfc8      	it	gt
 8108502:	461d      	movgt	r5, r3
 8108504:	9b00      	ldr	r3, [sp, #0]
 8108506:	bfd8      	it	le
 8108508:	2501      	movle	r5, #1
 810850a:	441d      	add	r5, r3
 810850c:	f04f 0800 	mov.w	r8, #0
 8108510:	4651      	mov	r1, sl
 8108512:	2201      	movs	r2, #1
 8108514:	4620      	mov	r0, r4
 8108516:	f000 fb8b 	bl	8108c30 <__lshift>
 810851a:	4631      	mov	r1, r6
 810851c:	4682      	mov	sl, r0
 810851e:	f000 fbf3 	bl	8108d08 <__mcmp>
 8108522:	2800      	cmp	r0, #0
 8108524:	dc96      	bgt.n	8108454 <_dtoa_r+0xabc>
 8108526:	d102      	bne.n	810852e <_dtoa_r+0xb96>
 8108528:	f019 0f01 	tst.w	r9, #1
 810852c:	d192      	bne.n	8108454 <_dtoa_r+0xabc>
 810852e:	462b      	mov	r3, r5
 8108530:	461d      	mov	r5, r3
 8108532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8108536:	2a30      	cmp	r2, #48	; 0x30
 8108538:	d0fa      	beq.n	8108530 <_dtoa_r+0xb98>
 810853a:	e6dd      	b.n	81082f8 <_dtoa_r+0x960>
 810853c:	9a00      	ldr	r2, [sp, #0]
 810853e:	429a      	cmp	r2, r3
 8108540:	d189      	bne.n	8108456 <_dtoa_r+0xabe>
 8108542:	f10b 0b01 	add.w	fp, fp, #1
 8108546:	2331      	movs	r3, #49	; 0x31
 8108548:	e796      	b.n	8108478 <_dtoa_r+0xae0>
 810854a:	4b0a      	ldr	r3, [pc, #40]	; (8108574 <_dtoa_r+0xbdc>)
 810854c:	f7ff ba99 	b.w	8107a82 <_dtoa_r+0xea>
 8108550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8108552:	2b00      	cmp	r3, #0
 8108554:	f47f aa6d 	bne.w	8107a32 <_dtoa_r+0x9a>
 8108558:	4b07      	ldr	r3, [pc, #28]	; (8108578 <_dtoa_r+0xbe0>)
 810855a:	f7ff ba92 	b.w	8107a82 <_dtoa_r+0xea>
 810855e:	9b01      	ldr	r3, [sp, #4]
 8108560:	2b00      	cmp	r3, #0
 8108562:	dcb5      	bgt.n	81084d0 <_dtoa_r+0xb38>
 8108564:	9b07      	ldr	r3, [sp, #28]
 8108566:	2b02      	cmp	r3, #2
 8108568:	f73f aeb1 	bgt.w	81082ce <_dtoa_r+0x936>
 810856c:	e7b0      	b.n	81084d0 <_dtoa_r+0xb38>
 810856e:	bf00      	nop
 8108570:	0810b079 	.word	0x0810b079
 8108574:	0810afd4 	.word	0x0810afd4
 8108578:	0810affd 	.word	0x0810affd

0810857c <_free_r>:
 810857c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810857e:	2900      	cmp	r1, #0
 8108580:	d044      	beq.n	810860c <_free_r+0x90>
 8108582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8108586:	9001      	str	r0, [sp, #4]
 8108588:	2b00      	cmp	r3, #0
 810858a:	f1a1 0404 	sub.w	r4, r1, #4
 810858e:	bfb8      	it	lt
 8108590:	18e4      	addlt	r4, r4, r3
 8108592:	f000 f8e7 	bl	8108764 <__malloc_lock>
 8108596:	4a1e      	ldr	r2, [pc, #120]	; (8108610 <_free_r+0x94>)
 8108598:	9801      	ldr	r0, [sp, #4]
 810859a:	6813      	ldr	r3, [r2, #0]
 810859c:	b933      	cbnz	r3, 81085ac <_free_r+0x30>
 810859e:	6063      	str	r3, [r4, #4]
 81085a0:	6014      	str	r4, [r2, #0]
 81085a2:	b003      	add	sp, #12
 81085a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81085a8:	f000 b8e2 	b.w	8108770 <__malloc_unlock>
 81085ac:	42a3      	cmp	r3, r4
 81085ae:	d908      	bls.n	81085c2 <_free_r+0x46>
 81085b0:	6825      	ldr	r5, [r4, #0]
 81085b2:	1961      	adds	r1, r4, r5
 81085b4:	428b      	cmp	r3, r1
 81085b6:	bf01      	itttt	eq
 81085b8:	6819      	ldreq	r1, [r3, #0]
 81085ba:	685b      	ldreq	r3, [r3, #4]
 81085bc:	1949      	addeq	r1, r1, r5
 81085be:	6021      	streq	r1, [r4, #0]
 81085c0:	e7ed      	b.n	810859e <_free_r+0x22>
 81085c2:	461a      	mov	r2, r3
 81085c4:	685b      	ldr	r3, [r3, #4]
 81085c6:	b10b      	cbz	r3, 81085cc <_free_r+0x50>
 81085c8:	42a3      	cmp	r3, r4
 81085ca:	d9fa      	bls.n	81085c2 <_free_r+0x46>
 81085cc:	6811      	ldr	r1, [r2, #0]
 81085ce:	1855      	adds	r5, r2, r1
 81085d0:	42a5      	cmp	r5, r4
 81085d2:	d10b      	bne.n	81085ec <_free_r+0x70>
 81085d4:	6824      	ldr	r4, [r4, #0]
 81085d6:	4421      	add	r1, r4
 81085d8:	1854      	adds	r4, r2, r1
 81085da:	42a3      	cmp	r3, r4
 81085dc:	6011      	str	r1, [r2, #0]
 81085de:	d1e0      	bne.n	81085a2 <_free_r+0x26>
 81085e0:	681c      	ldr	r4, [r3, #0]
 81085e2:	685b      	ldr	r3, [r3, #4]
 81085e4:	6053      	str	r3, [r2, #4]
 81085e6:	440c      	add	r4, r1
 81085e8:	6014      	str	r4, [r2, #0]
 81085ea:	e7da      	b.n	81085a2 <_free_r+0x26>
 81085ec:	d902      	bls.n	81085f4 <_free_r+0x78>
 81085ee:	230c      	movs	r3, #12
 81085f0:	6003      	str	r3, [r0, #0]
 81085f2:	e7d6      	b.n	81085a2 <_free_r+0x26>
 81085f4:	6825      	ldr	r5, [r4, #0]
 81085f6:	1961      	adds	r1, r4, r5
 81085f8:	428b      	cmp	r3, r1
 81085fa:	bf04      	itt	eq
 81085fc:	6819      	ldreq	r1, [r3, #0]
 81085fe:	685b      	ldreq	r3, [r3, #4]
 8108600:	6063      	str	r3, [r4, #4]
 8108602:	bf04      	itt	eq
 8108604:	1949      	addeq	r1, r1, r5
 8108606:	6021      	streq	r1, [r4, #0]
 8108608:	6054      	str	r4, [r2, #4]
 810860a:	e7ca      	b.n	81085a2 <_free_r+0x26>
 810860c:	b003      	add	sp, #12
 810860e:	bd30      	pop	{r4, r5, pc}
 8108610:	10000438 	.word	0x10000438

08108614 <malloc>:
 8108614:	4b02      	ldr	r3, [pc, #8]	; (8108620 <malloc+0xc>)
 8108616:	4601      	mov	r1, r0
 8108618:	6818      	ldr	r0, [r3, #0]
 810861a:	f000 b823 	b.w	8108664 <_malloc_r>
 810861e:	bf00      	nop
 8108620:	10000074 	.word	0x10000074

08108624 <sbrk_aligned>:
 8108624:	b570      	push	{r4, r5, r6, lr}
 8108626:	4e0e      	ldr	r6, [pc, #56]	; (8108660 <sbrk_aligned+0x3c>)
 8108628:	460c      	mov	r4, r1
 810862a:	6831      	ldr	r1, [r6, #0]
 810862c:	4605      	mov	r5, r0
 810862e:	b911      	cbnz	r1, 8108636 <sbrk_aligned+0x12>
 8108630:	f001 ffe2 	bl	810a5f8 <_sbrk_r>
 8108634:	6030      	str	r0, [r6, #0]
 8108636:	4621      	mov	r1, r4
 8108638:	4628      	mov	r0, r5
 810863a:	f001 ffdd 	bl	810a5f8 <_sbrk_r>
 810863e:	1c43      	adds	r3, r0, #1
 8108640:	d00a      	beq.n	8108658 <sbrk_aligned+0x34>
 8108642:	1cc4      	adds	r4, r0, #3
 8108644:	f024 0403 	bic.w	r4, r4, #3
 8108648:	42a0      	cmp	r0, r4
 810864a:	d007      	beq.n	810865c <sbrk_aligned+0x38>
 810864c:	1a21      	subs	r1, r4, r0
 810864e:	4628      	mov	r0, r5
 8108650:	f001 ffd2 	bl	810a5f8 <_sbrk_r>
 8108654:	3001      	adds	r0, #1
 8108656:	d101      	bne.n	810865c <sbrk_aligned+0x38>
 8108658:	f04f 34ff 	mov.w	r4, #4294967295
 810865c:	4620      	mov	r0, r4
 810865e:	bd70      	pop	{r4, r5, r6, pc}
 8108660:	1000043c 	.word	0x1000043c

08108664 <_malloc_r>:
 8108664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108668:	1ccd      	adds	r5, r1, #3
 810866a:	f025 0503 	bic.w	r5, r5, #3
 810866e:	3508      	adds	r5, #8
 8108670:	2d0c      	cmp	r5, #12
 8108672:	bf38      	it	cc
 8108674:	250c      	movcc	r5, #12
 8108676:	2d00      	cmp	r5, #0
 8108678:	4607      	mov	r7, r0
 810867a:	db01      	blt.n	8108680 <_malloc_r+0x1c>
 810867c:	42a9      	cmp	r1, r5
 810867e:	d905      	bls.n	810868c <_malloc_r+0x28>
 8108680:	230c      	movs	r3, #12
 8108682:	603b      	str	r3, [r7, #0]
 8108684:	2600      	movs	r6, #0
 8108686:	4630      	mov	r0, r6
 8108688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810868c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8108760 <_malloc_r+0xfc>
 8108690:	f000 f868 	bl	8108764 <__malloc_lock>
 8108694:	f8d8 3000 	ldr.w	r3, [r8]
 8108698:	461c      	mov	r4, r3
 810869a:	bb5c      	cbnz	r4, 81086f4 <_malloc_r+0x90>
 810869c:	4629      	mov	r1, r5
 810869e:	4638      	mov	r0, r7
 81086a0:	f7ff ffc0 	bl	8108624 <sbrk_aligned>
 81086a4:	1c43      	adds	r3, r0, #1
 81086a6:	4604      	mov	r4, r0
 81086a8:	d155      	bne.n	8108756 <_malloc_r+0xf2>
 81086aa:	f8d8 4000 	ldr.w	r4, [r8]
 81086ae:	4626      	mov	r6, r4
 81086b0:	2e00      	cmp	r6, #0
 81086b2:	d145      	bne.n	8108740 <_malloc_r+0xdc>
 81086b4:	2c00      	cmp	r4, #0
 81086b6:	d048      	beq.n	810874a <_malloc_r+0xe6>
 81086b8:	6823      	ldr	r3, [r4, #0]
 81086ba:	4631      	mov	r1, r6
 81086bc:	4638      	mov	r0, r7
 81086be:	eb04 0903 	add.w	r9, r4, r3
 81086c2:	f001 ff99 	bl	810a5f8 <_sbrk_r>
 81086c6:	4581      	cmp	r9, r0
 81086c8:	d13f      	bne.n	810874a <_malloc_r+0xe6>
 81086ca:	6821      	ldr	r1, [r4, #0]
 81086cc:	1a6d      	subs	r5, r5, r1
 81086ce:	4629      	mov	r1, r5
 81086d0:	4638      	mov	r0, r7
 81086d2:	f7ff ffa7 	bl	8108624 <sbrk_aligned>
 81086d6:	3001      	adds	r0, #1
 81086d8:	d037      	beq.n	810874a <_malloc_r+0xe6>
 81086da:	6823      	ldr	r3, [r4, #0]
 81086dc:	442b      	add	r3, r5
 81086de:	6023      	str	r3, [r4, #0]
 81086e0:	f8d8 3000 	ldr.w	r3, [r8]
 81086e4:	2b00      	cmp	r3, #0
 81086e6:	d038      	beq.n	810875a <_malloc_r+0xf6>
 81086e8:	685a      	ldr	r2, [r3, #4]
 81086ea:	42a2      	cmp	r2, r4
 81086ec:	d12b      	bne.n	8108746 <_malloc_r+0xe2>
 81086ee:	2200      	movs	r2, #0
 81086f0:	605a      	str	r2, [r3, #4]
 81086f2:	e00f      	b.n	8108714 <_malloc_r+0xb0>
 81086f4:	6822      	ldr	r2, [r4, #0]
 81086f6:	1b52      	subs	r2, r2, r5
 81086f8:	d41f      	bmi.n	810873a <_malloc_r+0xd6>
 81086fa:	2a0b      	cmp	r2, #11
 81086fc:	d917      	bls.n	810872e <_malloc_r+0xca>
 81086fe:	1961      	adds	r1, r4, r5
 8108700:	42a3      	cmp	r3, r4
 8108702:	6025      	str	r5, [r4, #0]
 8108704:	bf18      	it	ne
 8108706:	6059      	strne	r1, [r3, #4]
 8108708:	6863      	ldr	r3, [r4, #4]
 810870a:	bf08      	it	eq
 810870c:	f8c8 1000 	streq.w	r1, [r8]
 8108710:	5162      	str	r2, [r4, r5]
 8108712:	604b      	str	r3, [r1, #4]
 8108714:	4638      	mov	r0, r7
 8108716:	f104 060b 	add.w	r6, r4, #11
 810871a:	f000 f829 	bl	8108770 <__malloc_unlock>
 810871e:	f026 0607 	bic.w	r6, r6, #7
 8108722:	1d23      	adds	r3, r4, #4
 8108724:	1af2      	subs	r2, r6, r3
 8108726:	d0ae      	beq.n	8108686 <_malloc_r+0x22>
 8108728:	1b9b      	subs	r3, r3, r6
 810872a:	50a3      	str	r3, [r4, r2]
 810872c:	e7ab      	b.n	8108686 <_malloc_r+0x22>
 810872e:	42a3      	cmp	r3, r4
 8108730:	6862      	ldr	r2, [r4, #4]
 8108732:	d1dd      	bne.n	81086f0 <_malloc_r+0x8c>
 8108734:	f8c8 2000 	str.w	r2, [r8]
 8108738:	e7ec      	b.n	8108714 <_malloc_r+0xb0>
 810873a:	4623      	mov	r3, r4
 810873c:	6864      	ldr	r4, [r4, #4]
 810873e:	e7ac      	b.n	810869a <_malloc_r+0x36>
 8108740:	4634      	mov	r4, r6
 8108742:	6876      	ldr	r6, [r6, #4]
 8108744:	e7b4      	b.n	81086b0 <_malloc_r+0x4c>
 8108746:	4613      	mov	r3, r2
 8108748:	e7cc      	b.n	81086e4 <_malloc_r+0x80>
 810874a:	230c      	movs	r3, #12
 810874c:	603b      	str	r3, [r7, #0]
 810874e:	4638      	mov	r0, r7
 8108750:	f000 f80e 	bl	8108770 <__malloc_unlock>
 8108754:	e797      	b.n	8108686 <_malloc_r+0x22>
 8108756:	6025      	str	r5, [r4, #0]
 8108758:	e7dc      	b.n	8108714 <_malloc_r+0xb0>
 810875a:	605b      	str	r3, [r3, #4]
 810875c:	deff      	udf	#255	; 0xff
 810875e:	bf00      	nop
 8108760:	10000438 	.word	0x10000438

08108764 <__malloc_lock>:
 8108764:	4801      	ldr	r0, [pc, #4]	; (810876c <__malloc_lock+0x8>)
 8108766:	f7ff b884 	b.w	8107872 <__retarget_lock_acquire_recursive>
 810876a:	bf00      	nop
 810876c:	10000434 	.word	0x10000434

08108770 <__malloc_unlock>:
 8108770:	4801      	ldr	r0, [pc, #4]	; (8108778 <__malloc_unlock+0x8>)
 8108772:	f7ff b87f 	b.w	8107874 <__retarget_lock_release_recursive>
 8108776:	bf00      	nop
 8108778:	10000434 	.word	0x10000434

0810877c <_Balloc>:
 810877c:	b570      	push	{r4, r5, r6, lr}
 810877e:	69c6      	ldr	r6, [r0, #28]
 8108780:	4604      	mov	r4, r0
 8108782:	460d      	mov	r5, r1
 8108784:	b976      	cbnz	r6, 81087a4 <_Balloc+0x28>
 8108786:	2010      	movs	r0, #16
 8108788:	f7ff ff44 	bl	8108614 <malloc>
 810878c:	4602      	mov	r2, r0
 810878e:	61e0      	str	r0, [r4, #28]
 8108790:	b920      	cbnz	r0, 810879c <_Balloc+0x20>
 8108792:	4b18      	ldr	r3, [pc, #96]	; (81087f4 <_Balloc+0x78>)
 8108794:	4818      	ldr	r0, [pc, #96]	; (81087f8 <_Balloc+0x7c>)
 8108796:	216b      	movs	r1, #107	; 0x6b
 8108798:	f001 ff56 	bl	810a648 <__assert_func>
 810879c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81087a0:	6006      	str	r6, [r0, #0]
 81087a2:	60c6      	str	r6, [r0, #12]
 81087a4:	69e6      	ldr	r6, [r4, #28]
 81087a6:	68f3      	ldr	r3, [r6, #12]
 81087a8:	b183      	cbz	r3, 81087cc <_Balloc+0x50>
 81087aa:	69e3      	ldr	r3, [r4, #28]
 81087ac:	68db      	ldr	r3, [r3, #12]
 81087ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81087b2:	b9b8      	cbnz	r0, 81087e4 <_Balloc+0x68>
 81087b4:	2101      	movs	r1, #1
 81087b6:	fa01 f605 	lsl.w	r6, r1, r5
 81087ba:	1d72      	adds	r2, r6, #5
 81087bc:	0092      	lsls	r2, r2, #2
 81087be:	4620      	mov	r0, r4
 81087c0:	f001 ff60 	bl	810a684 <_calloc_r>
 81087c4:	b160      	cbz	r0, 81087e0 <_Balloc+0x64>
 81087c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 81087ca:	e00e      	b.n	81087ea <_Balloc+0x6e>
 81087cc:	2221      	movs	r2, #33	; 0x21
 81087ce:	2104      	movs	r1, #4
 81087d0:	4620      	mov	r0, r4
 81087d2:	f001 ff57 	bl	810a684 <_calloc_r>
 81087d6:	69e3      	ldr	r3, [r4, #28]
 81087d8:	60f0      	str	r0, [r6, #12]
 81087da:	68db      	ldr	r3, [r3, #12]
 81087dc:	2b00      	cmp	r3, #0
 81087de:	d1e4      	bne.n	81087aa <_Balloc+0x2e>
 81087e0:	2000      	movs	r0, #0
 81087e2:	bd70      	pop	{r4, r5, r6, pc}
 81087e4:	6802      	ldr	r2, [r0, #0]
 81087e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 81087ea:	2300      	movs	r3, #0
 81087ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 81087f0:	e7f7      	b.n	81087e2 <_Balloc+0x66>
 81087f2:	bf00      	nop
 81087f4:	0810b00a 	.word	0x0810b00a
 81087f8:	0810b08a 	.word	0x0810b08a

081087fc <_Bfree>:
 81087fc:	b570      	push	{r4, r5, r6, lr}
 81087fe:	69c6      	ldr	r6, [r0, #28]
 8108800:	4605      	mov	r5, r0
 8108802:	460c      	mov	r4, r1
 8108804:	b976      	cbnz	r6, 8108824 <_Bfree+0x28>
 8108806:	2010      	movs	r0, #16
 8108808:	f7ff ff04 	bl	8108614 <malloc>
 810880c:	4602      	mov	r2, r0
 810880e:	61e8      	str	r0, [r5, #28]
 8108810:	b920      	cbnz	r0, 810881c <_Bfree+0x20>
 8108812:	4b09      	ldr	r3, [pc, #36]	; (8108838 <_Bfree+0x3c>)
 8108814:	4809      	ldr	r0, [pc, #36]	; (810883c <_Bfree+0x40>)
 8108816:	218f      	movs	r1, #143	; 0x8f
 8108818:	f001 ff16 	bl	810a648 <__assert_func>
 810881c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8108820:	6006      	str	r6, [r0, #0]
 8108822:	60c6      	str	r6, [r0, #12]
 8108824:	b13c      	cbz	r4, 8108836 <_Bfree+0x3a>
 8108826:	69eb      	ldr	r3, [r5, #28]
 8108828:	6862      	ldr	r2, [r4, #4]
 810882a:	68db      	ldr	r3, [r3, #12]
 810882c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8108830:	6021      	str	r1, [r4, #0]
 8108832:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8108836:	bd70      	pop	{r4, r5, r6, pc}
 8108838:	0810b00a 	.word	0x0810b00a
 810883c:	0810b08a 	.word	0x0810b08a

08108840 <__multadd>:
 8108840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108844:	690d      	ldr	r5, [r1, #16]
 8108846:	4607      	mov	r7, r0
 8108848:	460c      	mov	r4, r1
 810884a:	461e      	mov	r6, r3
 810884c:	f101 0c14 	add.w	ip, r1, #20
 8108850:	2000      	movs	r0, #0
 8108852:	f8dc 3000 	ldr.w	r3, [ip]
 8108856:	b299      	uxth	r1, r3
 8108858:	fb02 6101 	mla	r1, r2, r1, r6
 810885c:	0c1e      	lsrs	r6, r3, #16
 810885e:	0c0b      	lsrs	r3, r1, #16
 8108860:	fb02 3306 	mla	r3, r2, r6, r3
 8108864:	b289      	uxth	r1, r1
 8108866:	3001      	adds	r0, #1
 8108868:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 810886c:	4285      	cmp	r5, r0
 810886e:	f84c 1b04 	str.w	r1, [ip], #4
 8108872:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8108876:	dcec      	bgt.n	8108852 <__multadd+0x12>
 8108878:	b30e      	cbz	r6, 81088be <__multadd+0x7e>
 810887a:	68a3      	ldr	r3, [r4, #8]
 810887c:	42ab      	cmp	r3, r5
 810887e:	dc19      	bgt.n	81088b4 <__multadd+0x74>
 8108880:	6861      	ldr	r1, [r4, #4]
 8108882:	4638      	mov	r0, r7
 8108884:	3101      	adds	r1, #1
 8108886:	f7ff ff79 	bl	810877c <_Balloc>
 810888a:	4680      	mov	r8, r0
 810888c:	b928      	cbnz	r0, 810889a <__multadd+0x5a>
 810888e:	4602      	mov	r2, r0
 8108890:	4b0c      	ldr	r3, [pc, #48]	; (81088c4 <__multadd+0x84>)
 8108892:	480d      	ldr	r0, [pc, #52]	; (81088c8 <__multadd+0x88>)
 8108894:	21ba      	movs	r1, #186	; 0xba
 8108896:	f001 fed7 	bl	810a648 <__assert_func>
 810889a:	6922      	ldr	r2, [r4, #16]
 810889c:	3202      	adds	r2, #2
 810889e:	f104 010c 	add.w	r1, r4, #12
 81088a2:	0092      	lsls	r2, r2, #2
 81088a4:	300c      	adds	r0, #12
 81088a6:	f001 feb7 	bl	810a618 <memcpy>
 81088aa:	4621      	mov	r1, r4
 81088ac:	4638      	mov	r0, r7
 81088ae:	f7ff ffa5 	bl	81087fc <_Bfree>
 81088b2:	4644      	mov	r4, r8
 81088b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 81088b8:	3501      	adds	r5, #1
 81088ba:	615e      	str	r6, [r3, #20]
 81088bc:	6125      	str	r5, [r4, #16]
 81088be:	4620      	mov	r0, r4
 81088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81088c4:	0810b079 	.word	0x0810b079
 81088c8:	0810b08a 	.word	0x0810b08a

081088cc <__s2b>:
 81088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 81088d0:	460c      	mov	r4, r1
 81088d2:	4615      	mov	r5, r2
 81088d4:	461f      	mov	r7, r3
 81088d6:	2209      	movs	r2, #9
 81088d8:	3308      	adds	r3, #8
 81088da:	4606      	mov	r6, r0
 81088dc:	fb93 f3f2 	sdiv	r3, r3, r2
 81088e0:	2100      	movs	r1, #0
 81088e2:	2201      	movs	r2, #1
 81088e4:	429a      	cmp	r2, r3
 81088e6:	db09      	blt.n	81088fc <__s2b+0x30>
 81088e8:	4630      	mov	r0, r6
 81088ea:	f7ff ff47 	bl	810877c <_Balloc>
 81088ee:	b940      	cbnz	r0, 8108902 <__s2b+0x36>
 81088f0:	4602      	mov	r2, r0
 81088f2:	4b19      	ldr	r3, [pc, #100]	; (8108958 <__s2b+0x8c>)
 81088f4:	4819      	ldr	r0, [pc, #100]	; (810895c <__s2b+0x90>)
 81088f6:	21d3      	movs	r1, #211	; 0xd3
 81088f8:	f001 fea6 	bl	810a648 <__assert_func>
 81088fc:	0052      	lsls	r2, r2, #1
 81088fe:	3101      	adds	r1, #1
 8108900:	e7f0      	b.n	81088e4 <__s2b+0x18>
 8108902:	9b08      	ldr	r3, [sp, #32]
 8108904:	6143      	str	r3, [r0, #20]
 8108906:	2d09      	cmp	r5, #9
 8108908:	f04f 0301 	mov.w	r3, #1
 810890c:	6103      	str	r3, [r0, #16]
 810890e:	dd16      	ble.n	810893e <__s2b+0x72>
 8108910:	f104 0909 	add.w	r9, r4, #9
 8108914:	46c8      	mov	r8, r9
 8108916:	442c      	add	r4, r5
 8108918:	f818 3b01 	ldrb.w	r3, [r8], #1
 810891c:	4601      	mov	r1, r0
 810891e:	3b30      	subs	r3, #48	; 0x30
 8108920:	220a      	movs	r2, #10
 8108922:	4630      	mov	r0, r6
 8108924:	f7ff ff8c 	bl	8108840 <__multadd>
 8108928:	45a0      	cmp	r8, r4
 810892a:	d1f5      	bne.n	8108918 <__s2b+0x4c>
 810892c:	f1a5 0408 	sub.w	r4, r5, #8
 8108930:	444c      	add	r4, r9
 8108932:	1b2d      	subs	r5, r5, r4
 8108934:	1963      	adds	r3, r4, r5
 8108936:	42bb      	cmp	r3, r7
 8108938:	db04      	blt.n	8108944 <__s2b+0x78>
 810893a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810893e:	340a      	adds	r4, #10
 8108940:	2509      	movs	r5, #9
 8108942:	e7f6      	b.n	8108932 <__s2b+0x66>
 8108944:	f814 3b01 	ldrb.w	r3, [r4], #1
 8108948:	4601      	mov	r1, r0
 810894a:	3b30      	subs	r3, #48	; 0x30
 810894c:	220a      	movs	r2, #10
 810894e:	4630      	mov	r0, r6
 8108950:	f7ff ff76 	bl	8108840 <__multadd>
 8108954:	e7ee      	b.n	8108934 <__s2b+0x68>
 8108956:	bf00      	nop
 8108958:	0810b079 	.word	0x0810b079
 810895c:	0810b08a 	.word	0x0810b08a

08108960 <__hi0bits>:
 8108960:	0c03      	lsrs	r3, r0, #16
 8108962:	041b      	lsls	r3, r3, #16
 8108964:	b9d3      	cbnz	r3, 810899c <__hi0bits+0x3c>
 8108966:	0400      	lsls	r0, r0, #16
 8108968:	2310      	movs	r3, #16
 810896a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 810896e:	bf04      	itt	eq
 8108970:	0200      	lsleq	r0, r0, #8
 8108972:	3308      	addeq	r3, #8
 8108974:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8108978:	bf04      	itt	eq
 810897a:	0100      	lsleq	r0, r0, #4
 810897c:	3304      	addeq	r3, #4
 810897e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8108982:	bf04      	itt	eq
 8108984:	0080      	lsleq	r0, r0, #2
 8108986:	3302      	addeq	r3, #2
 8108988:	2800      	cmp	r0, #0
 810898a:	db05      	blt.n	8108998 <__hi0bits+0x38>
 810898c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8108990:	f103 0301 	add.w	r3, r3, #1
 8108994:	bf08      	it	eq
 8108996:	2320      	moveq	r3, #32
 8108998:	4618      	mov	r0, r3
 810899a:	4770      	bx	lr
 810899c:	2300      	movs	r3, #0
 810899e:	e7e4      	b.n	810896a <__hi0bits+0xa>

081089a0 <__lo0bits>:
 81089a0:	6803      	ldr	r3, [r0, #0]
 81089a2:	f013 0207 	ands.w	r2, r3, #7
 81089a6:	d00c      	beq.n	81089c2 <__lo0bits+0x22>
 81089a8:	07d9      	lsls	r1, r3, #31
 81089aa:	d422      	bmi.n	81089f2 <__lo0bits+0x52>
 81089ac:	079a      	lsls	r2, r3, #30
 81089ae:	bf49      	itett	mi
 81089b0:	085b      	lsrmi	r3, r3, #1
 81089b2:	089b      	lsrpl	r3, r3, #2
 81089b4:	6003      	strmi	r3, [r0, #0]
 81089b6:	2201      	movmi	r2, #1
 81089b8:	bf5c      	itt	pl
 81089ba:	6003      	strpl	r3, [r0, #0]
 81089bc:	2202      	movpl	r2, #2
 81089be:	4610      	mov	r0, r2
 81089c0:	4770      	bx	lr
 81089c2:	b299      	uxth	r1, r3
 81089c4:	b909      	cbnz	r1, 81089ca <__lo0bits+0x2a>
 81089c6:	0c1b      	lsrs	r3, r3, #16
 81089c8:	2210      	movs	r2, #16
 81089ca:	b2d9      	uxtb	r1, r3
 81089cc:	b909      	cbnz	r1, 81089d2 <__lo0bits+0x32>
 81089ce:	3208      	adds	r2, #8
 81089d0:	0a1b      	lsrs	r3, r3, #8
 81089d2:	0719      	lsls	r1, r3, #28
 81089d4:	bf04      	itt	eq
 81089d6:	091b      	lsreq	r3, r3, #4
 81089d8:	3204      	addeq	r2, #4
 81089da:	0799      	lsls	r1, r3, #30
 81089dc:	bf04      	itt	eq
 81089de:	089b      	lsreq	r3, r3, #2
 81089e0:	3202      	addeq	r2, #2
 81089e2:	07d9      	lsls	r1, r3, #31
 81089e4:	d403      	bmi.n	81089ee <__lo0bits+0x4e>
 81089e6:	085b      	lsrs	r3, r3, #1
 81089e8:	f102 0201 	add.w	r2, r2, #1
 81089ec:	d003      	beq.n	81089f6 <__lo0bits+0x56>
 81089ee:	6003      	str	r3, [r0, #0]
 81089f0:	e7e5      	b.n	81089be <__lo0bits+0x1e>
 81089f2:	2200      	movs	r2, #0
 81089f4:	e7e3      	b.n	81089be <__lo0bits+0x1e>
 81089f6:	2220      	movs	r2, #32
 81089f8:	e7e1      	b.n	81089be <__lo0bits+0x1e>
	...

081089fc <__i2b>:
 81089fc:	b510      	push	{r4, lr}
 81089fe:	460c      	mov	r4, r1
 8108a00:	2101      	movs	r1, #1
 8108a02:	f7ff febb 	bl	810877c <_Balloc>
 8108a06:	4602      	mov	r2, r0
 8108a08:	b928      	cbnz	r0, 8108a16 <__i2b+0x1a>
 8108a0a:	4b05      	ldr	r3, [pc, #20]	; (8108a20 <__i2b+0x24>)
 8108a0c:	4805      	ldr	r0, [pc, #20]	; (8108a24 <__i2b+0x28>)
 8108a0e:	f240 1145 	movw	r1, #325	; 0x145
 8108a12:	f001 fe19 	bl	810a648 <__assert_func>
 8108a16:	2301      	movs	r3, #1
 8108a18:	6144      	str	r4, [r0, #20]
 8108a1a:	6103      	str	r3, [r0, #16]
 8108a1c:	bd10      	pop	{r4, pc}
 8108a1e:	bf00      	nop
 8108a20:	0810b079 	.word	0x0810b079
 8108a24:	0810b08a 	.word	0x0810b08a

08108a28 <__multiply>:
 8108a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108a2c:	4691      	mov	r9, r2
 8108a2e:	690a      	ldr	r2, [r1, #16]
 8108a30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8108a34:	429a      	cmp	r2, r3
 8108a36:	bfb8      	it	lt
 8108a38:	460b      	movlt	r3, r1
 8108a3a:	460c      	mov	r4, r1
 8108a3c:	bfbc      	itt	lt
 8108a3e:	464c      	movlt	r4, r9
 8108a40:	4699      	movlt	r9, r3
 8108a42:	6927      	ldr	r7, [r4, #16]
 8108a44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8108a48:	68a3      	ldr	r3, [r4, #8]
 8108a4a:	6861      	ldr	r1, [r4, #4]
 8108a4c:	eb07 060a 	add.w	r6, r7, sl
 8108a50:	42b3      	cmp	r3, r6
 8108a52:	b085      	sub	sp, #20
 8108a54:	bfb8      	it	lt
 8108a56:	3101      	addlt	r1, #1
 8108a58:	f7ff fe90 	bl	810877c <_Balloc>
 8108a5c:	b930      	cbnz	r0, 8108a6c <__multiply+0x44>
 8108a5e:	4602      	mov	r2, r0
 8108a60:	4b44      	ldr	r3, [pc, #272]	; (8108b74 <__multiply+0x14c>)
 8108a62:	4845      	ldr	r0, [pc, #276]	; (8108b78 <__multiply+0x150>)
 8108a64:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8108a68:	f001 fdee 	bl	810a648 <__assert_func>
 8108a6c:	f100 0514 	add.w	r5, r0, #20
 8108a70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8108a74:	462b      	mov	r3, r5
 8108a76:	2200      	movs	r2, #0
 8108a78:	4543      	cmp	r3, r8
 8108a7a:	d321      	bcc.n	8108ac0 <__multiply+0x98>
 8108a7c:	f104 0314 	add.w	r3, r4, #20
 8108a80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8108a84:	f109 0314 	add.w	r3, r9, #20
 8108a88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8108a8c:	9202      	str	r2, [sp, #8]
 8108a8e:	1b3a      	subs	r2, r7, r4
 8108a90:	3a15      	subs	r2, #21
 8108a92:	f022 0203 	bic.w	r2, r2, #3
 8108a96:	3204      	adds	r2, #4
 8108a98:	f104 0115 	add.w	r1, r4, #21
 8108a9c:	428f      	cmp	r7, r1
 8108a9e:	bf38      	it	cc
 8108aa0:	2204      	movcc	r2, #4
 8108aa2:	9201      	str	r2, [sp, #4]
 8108aa4:	9a02      	ldr	r2, [sp, #8]
 8108aa6:	9303      	str	r3, [sp, #12]
 8108aa8:	429a      	cmp	r2, r3
 8108aaa:	d80c      	bhi.n	8108ac6 <__multiply+0x9e>
 8108aac:	2e00      	cmp	r6, #0
 8108aae:	dd03      	ble.n	8108ab8 <__multiply+0x90>
 8108ab0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8108ab4:	2b00      	cmp	r3, #0
 8108ab6:	d05b      	beq.n	8108b70 <__multiply+0x148>
 8108ab8:	6106      	str	r6, [r0, #16]
 8108aba:	b005      	add	sp, #20
 8108abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108ac0:	f843 2b04 	str.w	r2, [r3], #4
 8108ac4:	e7d8      	b.n	8108a78 <__multiply+0x50>
 8108ac6:	f8b3 a000 	ldrh.w	sl, [r3]
 8108aca:	f1ba 0f00 	cmp.w	sl, #0
 8108ace:	d024      	beq.n	8108b1a <__multiply+0xf2>
 8108ad0:	f104 0e14 	add.w	lr, r4, #20
 8108ad4:	46a9      	mov	r9, r5
 8108ad6:	f04f 0c00 	mov.w	ip, #0
 8108ada:	f85e 2b04 	ldr.w	r2, [lr], #4
 8108ade:	f8d9 1000 	ldr.w	r1, [r9]
 8108ae2:	fa1f fb82 	uxth.w	fp, r2
 8108ae6:	b289      	uxth	r1, r1
 8108ae8:	fb0a 110b 	mla	r1, sl, fp, r1
 8108aec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8108af0:	f8d9 2000 	ldr.w	r2, [r9]
 8108af4:	4461      	add	r1, ip
 8108af6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8108afa:	fb0a c20b 	mla	r2, sl, fp, ip
 8108afe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8108b02:	b289      	uxth	r1, r1
 8108b04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8108b08:	4577      	cmp	r7, lr
 8108b0a:	f849 1b04 	str.w	r1, [r9], #4
 8108b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8108b12:	d8e2      	bhi.n	8108ada <__multiply+0xb2>
 8108b14:	9a01      	ldr	r2, [sp, #4]
 8108b16:	f845 c002 	str.w	ip, [r5, r2]
 8108b1a:	9a03      	ldr	r2, [sp, #12]
 8108b1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8108b20:	3304      	adds	r3, #4
 8108b22:	f1b9 0f00 	cmp.w	r9, #0
 8108b26:	d021      	beq.n	8108b6c <__multiply+0x144>
 8108b28:	6829      	ldr	r1, [r5, #0]
 8108b2a:	f104 0c14 	add.w	ip, r4, #20
 8108b2e:	46ae      	mov	lr, r5
 8108b30:	f04f 0a00 	mov.w	sl, #0
 8108b34:	f8bc b000 	ldrh.w	fp, [ip]
 8108b38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8108b3c:	fb09 220b 	mla	r2, r9, fp, r2
 8108b40:	4452      	add	r2, sl
 8108b42:	b289      	uxth	r1, r1
 8108b44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8108b48:	f84e 1b04 	str.w	r1, [lr], #4
 8108b4c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8108b50:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8108b54:	f8be 1000 	ldrh.w	r1, [lr]
 8108b58:	fb09 110a 	mla	r1, r9, sl, r1
 8108b5c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8108b60:	4567      	cmp	r7, ip
 8108b62:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8108b66:	d8e5      	bhi.n	8108b34 <__multiply+0x10c>
 8108b68:	9a01      	ldr	r2, [sp, #4]
 8108b6a:	50a9      	str	r1, [r5, r2]
 8108b6c:	3504      	adds	r5, #4
 8108b6e:	e799      	b.n	8108aa4 <__multiply+0x7c>
 8108b70:	3e01      	subs	r6, #1
 8108b72:	e79b      	b.n	8108aac <__multiply+0x84>
 8108b74:	0810b079 	.word	0x0810b079
 8108b78:	0810b08a 	.word	0x0810b08a

08108b7c <__pow5mult>:
 8108b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108b80:	4615      	mov	r5, r2
 8108b82:	f012 0203 	ands.w	r2, r2, #3
 8108b86:	4606      	mov	r6, r0
 8108b88:	460f      	mov	r7, r1
 8108b8a:	d007      	beq.n	8108b9c <__pow5mult+0x20>
 8108b8c:	4c25      	ldr	r4, [pc, #148]	; (8108c24 <__pow5mult+0xa8>)
 8108b8e:	3a01      	subs	r2, #1
 8108b90:	2300      	movs	r3, #0
 8108b92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8108b96:	f7ff fe53 	bl	8108840 <__multadd>
 8108b9a:	4607      	mov	r7, r0
 8108b9c:	10ad      	asrs	r5, r5, #2
 8108b9e:	d03d      	beq.n	8108c1c <__pow5mult+0xa0>
 8108ba0:	69f4      	ldr	r4, [r6, #28]
 8108ba2:	b97c      	cbnz	r4, 8108bc4 <__pow5mult+0x48>
 8108ba4:	2010      	movs	r0, #16
 8108ba6:	f7ff fd35 	bl	8108614 <malloc>
 8108baa:	4602      	mov	r2, r0
 8108bac:	61f0      	str	r0, [r6, #28]
 8108bae:	b928      	cbnz	r0, 8108bbc <__pow5mult+0x40>
 8108bb0:	4b1d      	ldr	r3, [pc, #116]	; (8108c28 <__pow5mult+0xac>)
 8108bb2:	481e      	ldr	r0, [pc, #120]	; (8108c2c <__pow5mult+0xb0>)
 8108bb4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8108bb8:	f001 fd46 	bl	810a648 <__assert_func>
 8108bbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8108bc0:	6004      	str	r4, [r0, #0]
 8108bc2:	60c4      	str	r4, [r0, #12]
 8108bc4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8108bc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8108bcc:	b94c      	cbnz	r4, 8108be2 <__pow5mult+0x66>
 8108bce:	f240 2171 	movw	r1, #625	; 0x271
 8108bd2:	4630      	mov	r0, r6
 8108bd4:	f7ff ff12 	bl	81089fc <__i2b>
 8108bd8:	2300      	movs	r3, #0
 8108bda:	f8c8 0008 	str.w	r0, [r8, #8]
 8108bde:	4604      	mov	r4, r0
 8108be0:	6003      	str	r3, [r0, #0]
 8108be2:	f04f 0900 	mov.w	r9, #0
 8108be6:	07eb      	lsls	r3, r5, #31
 8108be8:	d50a      	bpl.n	8108c00 <__pow5mult+0x84>
 8108bea:	4639      	mov	r1, r7
 8108bec:	4622      	mov	r2, r4
 8108bee:	4630      	mov	r0, r6
 8108bf0:	f7ff ff1a 	bl	8108a28 <__multiply>
 8108bf4:	4639      	mov	r1, r7
 8108bf6:	4680      	mov	r8, r0
 8108bf8:	4630      	mov	r0, r6
 8108bfa:	f7ff fdff 	bl	81087fc <_Bfree>
 8108bfe:	4647      	mov	r7, r8
 8108c00:	106d      	asrs	r5, r5, #1
 8108c02:	d00b      	beq.n	8108c1c <__pow5mult+0xa0>
 8108c04:	6820      	ldr	r0, [r4, #0]
 8108c06:	b938      	cbnz	r0, 8108c18 <__pow5mult+0x9c>
 8108c08:	4622      	mov	r2, r4
 8108c0a:	4621      	mov	r1, r4
 8108c0c:	4630      	mov	r0, r6
 8108c0e:	f7ff ff0b 	bl	8108a28 <__multiply>
 8108c12:	6020      	str	r0, [r4, #0]
 8108c14:	f8c0 9000 	str.w	r9, [r0]
 8108c18:	4604      	mov	r4, r0
 8108c1a:	e7e4      	b.n	8108be6 <__pow5mult+0x6a>
 8108c1c:	4638      	mov	r0, r7
 8108c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108c22:	bf00      	nop
 8108c24:	0810b1d8 	.word	0x0810b1d8
 8108c28:	0810b00a 	.word	0x0810b00a
 8108c2c:	0810b08a 	.word	0x0810b08a

08108c30 <__lshift>:
 8108c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108c34:	460c      	mov	r4, r1
 8108c36:	6849      	ldr	r1, [r1, #4]
 8108c38:	6923      	ldr	r3, [r4, #16]
 8108c3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8108c3e:	68a3      	ldr	r3, [r4, #8]
 8108c40:	4607      	mov	r7, r0
 8108c42:	4691      	mov	r9, r2
 8108c44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8108c48:	f108 0601 	add.w	r6, r8, #1
 8108c4c:	42b3      	cmp	r3, r6
 8108c4e:	db0b      	blt.n	8108c68 <__lshift+0x38>
 8108c50:	4638      	mov	r0, r7
 8108c52:	f7ff fd93 	bl	810877c <_Balloc>
 8108c56:	4605      	mov	r5, r0
 8108c58:	b948      	cbnz	r0, 8108c6e <__lshift+0x3e>
 8108c5a:	4602      	mov	r2, r0
 8108c5c:	4b28      	ldr	r3, [pc, #160]	; (8108d00 <__lshift+0xd0>)
 8108c5e:	4829      	ldr	r0, [pc, #164]	; (8108d04 <__lshift+0xd4>)
 8108c60:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8108c64:	f001 fcf0 	bl	810a648 <__assert_func>
 8108c68:	3101      	adds	r1, #1
 8108c6a:	005b      	lsls	r3, r3, #1
 8108c6c:	e7ee      	b.n	8108c4c <__lshift+0x1c>
 8108c6e:	2300      	movs	r3, #0
 8108c70:	f100 0114 	add.w	r1, r0, #20
 8108c74:	f100 0210 	add.w	r2, r0, #16
 8108c78:	4618      	mov	r0, r3
 8108c7a:	4553      	cmp	r3, sl
 8108c7c:	db33      	blt.n	8108ce6 <__lshift+0xb6>
 8108c7e:	6920      	ldr	r0, [r4, #16]
 8108c80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108c84:	f104 0314 	add.w	r3, r4, #20
 8108c88:	f019 091f 	ands.w	r9, r9, #31
 8108c8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8108c90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8108c94:	d02b      	beq.n	8108cee <__lshift+0xbe>
 8108c96:	f1c9 0e20 	rsb	lr, r9, #32
 8108c9a:	468a      	mov	sl, r1
 8108c9c:	2200      	movs	r2, #0
 8108c9e:	6818      	ldr	r0, [r3, #0]
 8108ca0:	fa00 f009 	lsl.w	r0, r0, r9
 8108ca4:	4310      	orrs	r0, r2
 8108ca6:	f84a 0b04 	str.w	r0, [sl], #4
 8108caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8108cae:	459c      	cmp	ip, r3
 8108cb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8108cb4:	d8f3      	bhi.n	8108c9e <__lshift+0x6e>
 8108cb6:	ebac 0304 	sub.w	r3, ip, r4
 8108cba:	3b15      	subs	r3, #21
 8108cbc:	f023 0303 	bic.w	r3, r3, #3
 8108cc0:	3304      	adds	r3, #4
 8108cc2:	f104 0015 	add.w	r0, r4, #21
 8108cc6:	4584      	cmp	ip, r0
 8108cc8:	bf38      	it	cc
 8108cca:	2304      	movcc	r3, #4
 8108ccc:	50ca      	str	r2, [r1, r3]
 8108cce:	b10a      	cbz	r2, 8108cd4 <__lshift+0xa4>
 8108cd0:	f108 0602 	add.w	r6, r8, #2
 8108cd4:	3e01      	subs	r6, #1
 8108cd6:	4638      	mov	r0, r7
 8108cd8:	612e      	str	r6, [r5, #16]
 8108cda:	4621      	mov	r1, r4
 8108cdc:	f7ff fd8e 	bl	81087fc <_Bfree>
 8108ce0:	4628      	mov	r0, r5
 8108ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108ce6:	f842 0f04 	str.w	r0, [r2, #4]!
 8108cea:	3301      	adds	r3, #1
 8108cec:	e7c5      	b.n	8108c7a <__lshift+0x4a>
 8108cee:	3904      	subs	r1, #4
 8108cf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8108cf4:	f841 2f04 	str.w	r2, [r1, #4]!
 8108cf8:	459c      	cmp	ip, r3
 8108cfa:	d8f9      	bhi.n	8108cf0 <__lshift+0xc0>
 8108cfc:	e7ea      	b.n	8108cd4 <__lshift+0xa4>
 8108cfe:	bf00      	nop
 8108d00:	0810b079 	.word	0x0810b079
 8108d04:	0810b08a 	.word	0x0810b08a

08108d08 <__mcmp>:
 8108d08:	b530      	push	{r4, r5, lr}
 8108d0a:	6902      	ldr	r2, [r0, #16]
 8108d0c:	690c      	ldr	r4, [r1, #16]
 8108d0e:	1b12      	subs	r2, r2, r4
 8108d10:	d10e      	bne.n	8108d30 <__mcmp+0x28>
 8108d12:	f100 0314 	add.w	r3, r0, #20
 8108d16:	3114      	adds	r1, #20
 8108d18:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8108d1c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8108d20:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8108d24:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8108d28:	42a5      	cmp	r5, r4
 8108d2a:	d003      	beq.n	8108d34 <__mcmp+0x2c>
 8108d2c:	d305      	bcc.n	8108d3a <__mcmp+0x32>
 8108d2e:	2201      	movs	r2, #1
 8108d30:	4610      	mov	r0, r2
 8108d32:	bd30      	pop	{r4, r5, pc}
 8108d34:	4283      	cmp	r3, r0
 8108d36:	d3f3      	bcc.n	8108d20 <__mcmp+0x18>
 8108d38:	e7fa      	b.n	8108d30 <__mcmp+0x28>
 8108d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8108d3e:	e7f7      	b.n	8108d30 <__mcmp+0x28>

08108d40 <__mdiff>:
 8108d40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108d44:	460c      	mov	r4, r1
 8108d46:	4606      	mov	r6, r0
 8108d48:	4611      	mov	r1, r2
 8108d4a:	4620      	mov	r0, r4
 8108d4c:	4690      	mov	r8, r2
 8108d4e:	f7ff ffdb 	bl	8108d08 <__mcmp>
 8108d52:	1e05      	subs	r5, r0, #0
 8108d54:	d110      	bne.n	8108d78 <__mdiff+0x38>
 8108d56:	4629      	mov	r1, r5
 8108d58:	4630      	mov	r0, r6
 8108d5a:	f7ff fd0f 	bl	810877c <_Balloc>
 8108d5e:	b930      	cbnz	r0, 8108d6e <__mdiff+0x2e>
 8108d60:	4b3a      	ldr	r3, [pc, #232]	; (8108e4c <__mdiff+0x10c>)
 8108d62:	4602      	mov	r2, r0
 8108d64:	f240 2137 	movw	r1, #567	; 0x237
 8108d68:	4839      	ldr	r0, [pc, #228]	; (8108e50 <__mdiff+0x110>)
 8108d6a:	f001 fc6d 	bl	810a648 <__assert_func>
 8108d6e:	2301      	movs	r3, #1
 8108d70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8108d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108d78:	bfa4      	itt	ge
 8108d7a:	4643      	movge	r3, r8
 8108d7c:	46a0      	movge	r8, r4
 8108d7e:	4630      	mov	r0, r6
 8108d80:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8108d84:	bfa6      	itte	ge
 8108d86:	461c      	movge	r4, r3
 8108d88:	2500      	movge	r5, #0
 8108d8a:	2501      	movlt	r5, #1
 8108d8c:	f7ff fcf6 	bl	810877c <_Balloc>
 8108d90:	b920      	cbnz	r0, 8108d9c <__mdiff+0x5c>
 8108d92:	4b2e      	ldr	r3, [pc, #184]	; (8108e4c <__mdiff+0x10c>)
 8108d94:	4602      	mov	r2, r0
 8108d96:	f240 2145 	movw	r1, #581	; 0x245
 8108d9a:	e7e5      	b.n	8108d68 <__mdiff+0x28>
 8108d9c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8108da0:	6926      	ldr	r6, [r4, #16]
 8108da2:	60c5      	str	r5, [r0, #12]
 8108da4:	f104 0914 	add.w	r9, r4, #20
 8108da8:	f108 0514 	add.w	r5, r8, #20
 8108dac:	f100 0e14 	add.w	lr, r0, #20
 8108db0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8108db4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8108db8:	f108 0210 	add.w	r2, r8, #16
 8108dbc:	46f2      	mov	sl, lr
 8108dbe:	2100      	movs	r1, #0
 8108dc0:	f859 3b04 	ldr.w	r3, [r9], #4
 8108dc4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8108dc8:	fa11 f88b 	uxtah	r8, r1, fp
 8108dcc:	b299      	uxth	r1, r3
 8108dce:	0c1b      	lsrs	r3, r3, #16
 8108dd0:	eba8 0801 	sub.w	r8, r8, r1
 8108dd4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8108dd8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8108ddc:	fa1f f888 	uxth.w	r8, r8
 8108de0:	1419      	asrs	r1, r3, #16
 8108de2:	454e      	cmp	r6, r9
 8108de4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8108de8:	f84a 3b04 	str.w	r3, [sl], #4
 8108dec:	d8e8      	bhi.n	8108dc0 <__mdiff+0x80>
 8108dee:	1b33      	subs	r3, r6, r4
 8108df0:	3b15      	subs	r3, #21
 8108df2:	f023 0303 	bic.w	r3, r3, #3
 8108df6:	3304      	adds	r3, #4
 8108df8:	3415      	adds	r4, #21
 8108dfa:	42a6      	cmp	r6, r4
 8108dfc:	bf38      	it	cc
 8108dfe:	2304      	movcc	r3, #4
 8108e00:	441d      	add	r5, r3
 8108e02:	4473      	add	r3, lr
 8108e04:	469e      	mov	lr, r3
 8108e06:	462e      	mov	r6, r5
 8108e08:	4566      	cmp	r6, ip
 8108e0a:	d30e      	bcc.n	8108e2a <__mdiff+0xea>
 8108e0c:	f10c 0203 	add.w	r2, ip, #3
 8108e10:	1b52      	subs	r2, r2, r5
 8108e12:	f022 0203 	bic.w	r2, r2, #3
 8108e16:	3d03      	subs	r5, #3
 8108e18:	45ac      	cmp	ip, r5
 8108e1a:	bf38      	it	cc
 8108e1c:	2200      	movcc	r2, #0
 8108e1e:	4413      	add	r3, r2
 8108e20:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8108e24:	b17a      	cbz	r2, 8108e46 <__mdiff+0x106>
 8108e26:	6107      	str	r7, [r0, #16]
 8108e28:	e7a4      	b.n	8108d74 <__mdiff+0x34>
 8108e2a:	f856 8b04 	ldr.w	r8, [r6], #4
 8108e2e:	fa11 f288 	uxtah	r2, r1, r8
 8108e32:	1414      	asrs	r4, r2, #16
 8108e34:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8108e38:	b292      	uxth	r2, r2
 8108e3a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8108e3e:	f84e 2b04 	str.w	r2, [lr], #4
 8108e42:	1421      	asrs	r1, r4, #16
 8108e44:	e7e0      	b.n	8108e08 <__mdiff+0xc8>
 8108e46:	3f01      	subs	r7, #1
 8108e48:	e7ea      	b.n	8108e20 <__mdiff+0xe0>
 8108e4a:	bf00      	nop
 8108e4c:	0810b079 	.word	0x0810b079
 8108e50:	0810b08a 	.word	0x0810b08a

08108e54 <__ulp>:
 8108e54:	b082      	sub	sp, #8
 8108e56:	ed8d 0b00 	vstr	d0, [sp]
 8108e5a:	9a01      	ldr	r2, [sp, #4]
 8108e5c:	4b0f      	ldr	r3, [pc, #60]	; (8108e9c <__ulp+0x48>)
 8108e5e:	4013      	ands	r3, r2
 8108e60:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8108e64:	2b00      	cmp	r3, #0
 8108e66:	dc08      	bgt.n	8108e7a <__ulp+0x26>
 8108e68:	425b      	negs	r3, r3
 8108e6a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8108e6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8108e72:	da04      	bge.n	8108e7e <__ulp+0x2a>
 8108e74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8108e78:	4113      	asrs	r3, r2
 8108e7a:	2200      	movs	r2, #0
 8108e7c:	e008      	b.n	8108e90 <__ulp+0x3c>
 8108e7e:	f1a2 0314 	sub.w	r3, r2, #20
 8108e82:	2b1e      	cmp	r3, #30
 8108e84:	bfda      	itte	le
 8108e86:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8108e8a:	40da      	lsrle	r2, r3
 8108e8c:	2201      	movgt	r2, #1
 8108e8e:	2300      	movs	r3, #0
 8108e90:	4619      	mov	r1, r3
 8108e92:	4610      	mov	r0, r2
 8108e94:	ec41 0b10 	vmov	d0, r0, r1
 8108e98:	b002      	add	sp, #8
 8108e9a:	4770      	bx	lr
 8108e9c:	7ff00000 	.word	0x7ff00000

08108ea0 <__b2d>:
 8108ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108ea4:	6906      	ldr	r6, [r0, #16]
 8108ea6:	f100 0814 	add.w	r8, r0, #20
 8108eaa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8108eae:	1f37      	subs	r7, r6, #4
 8108eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8108eb4:	4610      	mov	r0, r2
 8108eb6:	f7ff fd53 	bl	8108960 <__hi0bits>
 8108eba:	f1c0 0320 	rsb	r3, r0, #32
 8108ebe:	280a      	cmp	r0, #10
 8108ec0:	600b      	str	r3, [r1, #0]
 8108ec2:	491b      	ldr	r1, [pc, #108]	; (8108f30 <__b2d+0x90>)
 8108ec4:	dc15      	bgt.n	8108ef2 <__b2d+0x52>
 8108ec6:	f1c0 0c0b 	rsb	ip, r0, #11
 8108eca:	fa22 f30c 	lsr.w	r3, r2, ip
 8108ece:	45b8      	cmp	r8, r7
 8108ed0:	ea43 0501 	orr.w	r5, r3, r1
 8108ed4:	bf34      	ite	cc
 8108ed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8108eda:	2300      	movcs	r3, #0
 8108edc:	3015      	adds	r0, #21
 8108ede:	fa02 f000 	lsl.w	r0, r2, r0
 8108ee2:	fa23 f30c 	lsr.w	r3, r3, ip
 8108ee6:	4303      	orrs	r3, r0
 8108ee8:	461c      	mov	r4, r3
 8108eea:	ec45 4b10 	vmov	d0, r4, r5
 8108eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108ef2:	45b8      	cmp	r8, r7
 8108ef4:	bf3a      	itte	cc
 8108ef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8108efa:	f1a6 0708 	subcc.w	r7, r6, #8
 8108efe:	2300      	movcs	r3, #0
 8108f00:	380b      	subs	r0, #11
 8108f02:	d012      	beq.n	8108f2a <__b2d+0x8a>
 8108f04:	f1c0 0120 	rsb	r1, r0, #32
 8108f08:	fa23 f401 	lsr.w	r4, r3, r1
 8108f0c:	4082      	lsls	r2, r0
 8108f0e:	4322      	orrs	r2, r4
 8108f10:	4547      	cmp	r7, r8
 8108f12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8108f16:	bf8c      	ite	hi
 8108f18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8108f1c:	2200      	movls	r2, #0
 8108f1e:	4083      	lsls	r3, r0
 8108f20:	40ca      	lsrs	r2, r1
 8108f22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8108f26:	4313      	orrs	r3, r2
 8108f28:	e7de      	b.n	8108ee8 <__b2d+0x48>
 8108f2a:	ea42 0501 	orr.w	r5, r2, r1
 8108f2e:	e7db      	b.n	8108ee8 <__b2d+0x48>
 8108f30:	3ff00000 	.word	0x3ff00000

08108f34 <__d2b>:
 8108f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108f38:	460f      	mov	r7, r1
 8108f3a:	2101      	movs	r1, #1
 8108f3c:	ec59 8b10 	vmov	r8, r9, d0
 8108f40:	4616      	mov	r6, r2
 8108f42:	f7ff fc1b 	bl	810877c <_Balloc>
 8108f46:	4604      	mov	r4, r0
 8108f48:	b930      	cbnz	r0, 8108f58 <__d2b+0x24>
 8108f4a:	4602      	mov	r2, r0
 8108f4c:	4b24      	ldr	r3, [pc, #144]	; (8108fe0 <__d2b+0xac>)
 8108f4e:	4825      	ldr	r0, [pc, #148]	; (8108fe4 <__d2b+0xb0>)
 8108f50:	f240 310f 	movw	r1, #783	; 0x30f
 8108f54:	f001 fb78 	bl	810a648 <__assert_func>
 8108f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8108f60:	bb2d      	cbnz	r5, 8108fae <__d2b+0x7a>
 8108f62:	9301      	str	r3, [sp, #4]
 8108f64:	f1b8 0300 	subs.w	r3, r8, #0
 8108f68:	d026      	beq.n	8108fb8 <__d2b+0x84>
 8108f6a:	4668      	mov	r0, sp
 8108f6c:	9300      	str	r3, [sp, #0]
 8108f6e:	f7ff fd17 	bl	81089a0 <__lo0bits>
 8108f72:	e9dd 1200 	ldrd	r1, r2, [sp]
 8108f76:	b1e8      	cbz	r0, 8108fb4 <__d2b+0x80>
 8108f78:	f1c0 0320 	rsb	r3, r0, #32
 8108f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8108f80:	430b      	orrs	r3, r1
 8108f82:	40c2      	lsrs	r2, r0
 8108f84:	6163      	str	r3, [r4, #20]
 8108f86:	9201      	str	r2, [sp, #4]
 8108f88:	9b01      	ldr	r3, [sp, #4]
 8108f8a:	61a3      	str	r3, [r4, #24]
 8108f8c:	2b00      	cmp	r3, #0
 8108f8e:	bf14      	ite	ne
 8108f90:	2202      	movne	r2, #2
 8108f92:	2201      	moveq	r2, #1
 8108f94:	6122      	str	r2, [r4, #16]
 8108f96:	b1bd      	cbz	r5, 8108fc8 <__d2b+0x94>
 8108f98:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8108f9c:	4405      	add	r5, r0
 8108f9e:	603d      	str	r5, [r7, #0]
 8108fa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8108fa4:	6030      	str	r0, [r6, #0]
 8108fa6:	4620      	mov	r0, r4
 8108fa8:	b003      	add	sp, #12
 8108faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108fae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8108fb2:	e7d6      	b.n	8108f62 <__d2b+0x2e>
 8108fb4:	6161      	str	r1, [r4, #20]
 8108fb6:	e7e7      	b.n	8108f88 <__d2b+0x54>
 8108fb8:	a801      	add	r0, sp, #4
 8108fba:	f7ff fcf1 	bl	81089a0 <__lo0bits>
 8108fbe:	9b01      	ldr	r3, [sp, #4]
 8108fc0:	6163      	str	r3, [r4, #20]
 8108fc2:	3020      	adds	r0, #32
 8108fc4:	2201      	movs	r2, #1
 8108fc6:	e7e5      	b.n	8108f94 <__d2b+0x60>
 8108fc8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8108fcc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8108fd0:	6038      	str	r0, [r7, #0]
 8108fd2:	6918      	ldr	r0, [r3, #16]
 8108fd4:	f7ff fcc4 	bl	8108960 <__hi0bits>
 8108fd8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8108fdc:	e7e2      	b.n	8108fa4 <__d2b+0x70>
 8108fde:	bf00      	nop
 8108fe0:	0810b079 	.word	0x0810b079
 8108fe4:	0810b08a 	.word	0x0810b08a

08108fe8 <__ratio>:
 8108fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108fec:	4688      	mov	r8, r1
 8108fee:	4669      	mov	r1, sp
 8108ff0:	4681      	mov	r9, r0
 8108ff2:	f7ff ff55 	bl	8108ea0 <__b2d>
 8108ff6:	a901      	add	r1, sp, #4
 8108ff8:	4640      	mov	r0, r8
 8108ffa:	ec55 4b10 	vmov	r4, r5, d0
 8108ffe:	f7ff ff4f 	bl	8108ea0 <__b2d>
 8109002:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8109006:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810900a:	eba3 0c02 	sub.w	ip, r3, r2
 810900e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8109012:	1a9b      	subs	r3, r3, r2
 8109014:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8109018:	ec51 0b10 	vmov	r0, r1, d0
 810901c:	2b00      	cmp	r3, #0
 810901e:	bfd6      	itet	le
 8109020:	460a      	movle	r2, r1
 8109022:	462a      	movgt	r2, r5
 8109024:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8109028:	468b      	mov	fp, r1
 810902a:	462f      	mov	r7, r5
 810902c:	bfd4      	ite	le
 810902e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8109032:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8109036:	4620      	mov	r0, r4
 8109038:	ee10 2a10 	vmov	r2, s0
 810903c:	465b      	mov	r3, fp
 810903e:	4639      	mov	r1, r7
 8109040:	f7f7 fc8c 	bl	810095c <__aeabi_ddiv>
 8109044:	ec41 0b10 	vmov	d0, r0, r1
 8109048:	b003      	add	sp, #12
 810904a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810904e <__copybits>:
 810904e:	3901      	subs	r1, #1
 8109050:	b570      	push	{r4, r5, r6, lr}
 8109052:	1149      	asrs	r1, r1, #5
 8109054:	6914      	ldr	r4, [r2, #16]
 8109056:	3101      	adds	r1, #1
 8109058:	f102 0314 	add.w	r3, r2, #20
 810905c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8109060:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8109064:	1f05      	subs	r5, r0, #4
 8109066:	42a3      	cmp	r3, r4
 8109068:	d30c      	bcc.n	8109084 <__copybits+0x36>
 810906a:	1aa3      	subs	r3, r4, r2
 810906c:	3b11      	subs	r3, #17
 810906e:	f023 0303 	bic.w	r3, r3, #3
 8109072:	3211      	adds	r2, #17
 8109074:	42a2      	cmp	r2, r4
 8109076:	bf88      	it	hi
 8109078:	2300      	movhi	r3, #0
 810907a:	4418      	add	r0, r3
 810907c:	2300      	movs	r3, #0
 810907e:	4288      	cmp	r0, r1
 8109080:	d305      	bcc.n	810908e <__copybits+0x40>
 8109082:	bd70      	pop	{r4, r5, r6, pc}
 8109084:	f853 6b04 	ldr.w	r6, [r3], #4
 8109088:	f845 6f04 	str.w	r6, [r5, #4]!
 810908c:	e7eb      	b.n	8109066 <__copybits+0x18>
 810908e:	f840 3b04 	str.w	r3, [r0], #4
 8109092:	e7f4      	b.n	810907e <__copybits+0x30>

08109094 <__any_on>:
 8109094:	f100 0214 	add.w	r2, r0, #20
 8109098:	6900      	ldr	r0, [r0, #16]
 810909a:	114b      	asrs	r3, r1, #5
 810909c:	4298      	cmp	r0, r3
 810909e:	b510      	push	{r4, lr}
 81090a0:	db11      	blt.n	81090c6 <__any_on+0x32>
 81090a2:	dd0a      	ble.n	81090ba <__any_on+0x26>
 81090a4:	f011 011f 	ands.w	r1, r1, #31
 81090a8:	d007      	beq.n	81090ba <__any_on+0x26>
 81090aa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 81090ae:	fa24 f001 	lsr.w	r0, r4, r1
 81090b2:	fa00 f101 	lsl.w	r1, r0, r1
 81090b6:	428c      	cmp	r4, r1
 81090b8:	d10b      	bne.n	81090d2 <__any_on+0x3e>
 81090ba:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 81090be:	4293      	cmp	r3, r2
 81090c0:	d803      	bhi.n	81090ca <__any_on+0x36>
 81090c2:	2000      	movs	r0, #0
 81090c4:	bd10      	pop	{r4, pc}
 81090c6:	4603      	mov	r3, r0
 81090c8:	e7f7      	b.n	81090ba <__any_on+0x26>
 81090ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81090ce:	2900      	cmp	r1, #0
 81090d0:	d0f5      	beq.n	81090be <__any_on+0x2a>
 81090d2:	2001      	movs	r0, #1
 81090d4:	e7f6      	b.n	81090c4 <__any_on+0x30>

081090d6 <sulp>:
 81090d6:	b570      	push	{r4, r5, r6, lr}
 81090d8:	4604      	mov	r4, r0
 81090da:	460d      	mov	r5, r1
 81090dc:	ec45 4b10 	vmov	d0, r4, r5
 81090e0:	4616      	mov	r6, r2
 81090e2:	f7ff feb7 	bl	8108e54 <__ulp>
 81090e6:	ec51 0b10 	vmov	r0, r1, d0
 81090ea:	b17e      	cbz	r6, 810910c <sulp+0x36>
 81090ec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 81090f0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81090f4:	2b00      	cmp	r3, #0
 81090f6:	dd09      	ble.n	810910c <sulp+0x36>
 81090f8:	051b      	lsls	r3, r3, #20
 81090fa:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 81090fe:	2400      	movs	r4, #0
 8109100:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8109104:	4622      	mov	r2, r4
 8109106:	462b      	mov	r3, r5
 8109108:	f7f7 fafe 	bl	8100708 <__aeabi_dmul>
 810910c:	bd70      	pop	{r4, r5, r6, pc}
	...

08109110 <_strtod_l>:
 8109110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109114:	ed2d 8b02 	vpush	{d8}
 8109118:	b09b      	sub	sp, #108	; 0x6c
 810911a:	4604      	mov	r4, r0
 810911c:	9213      	str	r2, [sp, #76]	; 0x4c
 810911e:	2200      	movs	r2, #0
 8109120:	9216      	str	r2, [sp, #88]	; 0x58
 8109122:	460d      	mov	r5, r1
 8109124:	f04f 0800 	mov.w	r8, #0
 8109128:	f04f 0900 	mov.w	r9, #0
 810912c:	460a      	mov	r2, r1
 810912e:	9215      	str	r2, [sp, #84]	; 0x54
 8109130:	7811      	ldrb	r1, [r2, #0]
 8109132:	292b      	cmp	r1, #43	; 0x2b
 8109134:	d04c      	beq.n	81091d0 <_strtod_l+0xc0>
 8109136:	d83a      	bhi.n	81091ae <_strtod_l+0x9e>
 8109138:	290d      	cmp	r1, #13
 810913a:	d834      	bhi.n	81091a6 <_strtod_l+0x96>
 810913c:	2908      	cmp	r1, #8
 810913e:	d834      	bhi.n	81091aa <_strtod_l+0x9a>
 8109140:	2900      	cmp	r1, #0
 8109142:	d03d      	beq.n	81091c0 <_strtod_l+0xb0>
 8109144:	2200      	movs	r2, #0
 8109146:	920a      	str	r2, [sp, #40]	; 0x28
 8109148:	9e15      	ldr	r6, [sp, #84]	; 0x54
 810914a:	7832      	ldrb	r2, [r6, #0]
 810914c:	2a30      	cmp	r2, #48	; 0x30
 810914e:	f040 80b4 	bne.w	81092ba <_strtod_l+0x1aa>
 8109152:	7872      	ldrb	r2, [r6, #1]
 8109154:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8109158:	2a58      	cmp	r2, #88	; 0x58
 810915a:	d170      	bne.n	810923e <_strtod_l+0x12e>
 810915c:	9302      	str	r3, [sp, #8]
 810915e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109160:	9301      	str	r3, [sp, #4]
 8109162:	ab16      	add	r3, sp, #88	; 0x58
 8109164:	9300      	str	r3, [sp, #0]
 8109166:	4a8e      	ldr	r2, [pc, #568]	; (81093a0 <_strtod_l+0x290>)
 8109168:	ab17      	add	r3, sp, #92	; 0x5c
 810916a:	a915      	add	r1, sp, #84	; 0x54
 810916c:	4620      	mov	r0, r4
 810916e:	f001 fb07 	bl	810a780 <__gethex>
 8109172:	f010 070f 	ands.w	r7, r0, #15
 8109176:	4605      	mov	r5, r0
 8109178:	d005      	beq.n	8109186 <_strtod_l+0x76>
 810917a:	2f06      	cmp	r7, #6
 810917c:	d12a      	bne.n	81091d4 <_strtod_l+0xc4>
 810917e:	3601      	adds	r6, #1
 8109180:	2300      	movs	r3, #0
 8109182:	9615      	str	r6, [sp, #84]	; 0x54
 8109184:	930a      	str	r3, [sp, #40]	; 0x28
 8109186:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8109188:	2b00      	cmp	r3, #0
 810918a:	f040 857f 	bne.w	8109c8c <_strtod_l+0xb7c>
 810918e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8109190:	b1db      	cbz	r3, 81091ca <_strtod_l+0xba>
 8109192:	4642      	mov	r2, r8
 8109194:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8109198:	ec43 2b10 	vmov	d0, r2, r3
 810919c:	b01b      	add	sp, #108	; 0x6c
 810919e:	ecbd 8b02 	vpop	{d8}
 81091a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81091a6:	2920      	cmp	r1, #32
 81091a8:	d1cc      	bne.n	8109144 <_strtod_l+0x34>
 81091aa:	3201      	adds	r2, #1
 81091ac:	e7bf      	b.n	810912e <_strtod_l+0x1e>
 81091ae:	292d      	cmp	r1, #45	; 0x2d
 81091b0:	d1c8      	bne.n	8109144 <_strtod_l+0x34>
 81091b2:	2101      	movs	r1, #1
 81091b4:	910a      	str	r1, [sp, #40]	; 0x28
 81091b6:	1c51      	adds	r1, r2, #1
 81091b8:	9115      	str	r1, [sp, #84]	; 0x54
 81091ba:	7852      	ldrb	r2, [r2, #1]
 81091bc:	2a00      	cmp	r2, #0
 81091be:	d1c3      	bne.n	8109148 <_strtod_l+0x38>
 81091c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 81091c2:	9515      	str	r5, [sp, #84]	; 0x54
 81091c4:	2b00      	cmp	r3, #0
 81091c6:	f040 855f 	bne.w	8109c88 <_strtod_l+0xb78>
 81091ca:	4642      	mov	r2, r8
 81091cc:	464b      	mov	r3, r9
 81091ce:	e7e3      	b.n	8109198 <_strtod_l+0x88>
 81091d0:	2100      	movs	r1, #0
 81091d2:	e7ef      	b.n	81091b4 <_strtod_l+0xa4>
 81091d4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 81091d6:	b13a      	cbz	r2, 81091e8 <_strtod_l+0xd8>
 81091d8:	2135      	movs	r1, #53	; 0x35
 81091da:	a818      	add	r0, sp, #96	; 0x60
 81091dc:	f7ff ff37 	bl	810904e <__copybits>
 81091e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 81091e2:	4620      	mov	r0, r4
 81091e4:	f7ff fb0a 	bl	81087fc <_Bfree>
 81091e8:	3f01      	subs	r7, #1
 81091ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 81091ec:	2f04      	cmp	r7, #4
 81091ee:	d806      	bhi.n	81091fe <_strtod_l+0xee>
 81091f0:	e8df f007 	tbb	[pc, r7]
 81091f4:	201d0314 	.word	0x201d0314
 81091f8:	14          	.byte	0x14
 81091f9:	00          	.byte	0x00
 81091fa:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 81091fe:	05e9      	lsls	r1, r5, #23
 8109200:	bf48      	it	mi
 8109202:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8109206:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 810920a:	0d1b      	lsrs	r3, r3, #20
 810920c:	051b      	lsls	r3, r3, #20
 810920e:	2b00      	cmp	r3, #0
 8109210:	d1b9      	bne.n	8109186 <_strtod_l+0x76>
 8109212:	f7fe fb03 	bl	810781c <__errno>
 8109216:	2322      	movs	r3, #34	; 0x22
 8109218:	6003      	str	r3, [r0, #0]
 810921a:	e7b4      	b.n	8109186 <_strtod_l+0x76>
 810921c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8109220:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8109224:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8109228:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 810922c:	e7e7      	b.n	81091fe <_strtod_l+0xee>
 810922e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 81093a8 <_strtod_l+0x298>
 8109232:	e7e4      	b.n	81091fe <_strtod_l+0xee>
 8109234:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8109238:	f04f 38ff 	mov.w	r8, #4294967295
 810923c:	e7df      	b.n	81091fe <_strtod_l+0xee>
 810923e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109240:	1c5a      	adds	r2, r3, #1
 8109242:	9215      	str	r2, [sp, #84]	; 0x54
 8109244:	785b      	ldrb	r3, [r3, #1]
 8109246:	2b30      	cmp	r3, #48	; 0x30
 8109248:	d0f9      	beq.n	810923e <_strtod_l+0x12e>
 810924a:	2b00      	cmp	r3, #0
 810924c:	d09b      	beq.n	8109186 <_strtod_l+0x76>
 810924e:	2301      	movs	r3, #1
 8109250:	f04f 0a00 	mov.w	sl, #0
 8109254:	9304      	str	r3, [sp, #16]
 8109256:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109258:	930b      	str	r3, [sp, #44]	; 0x2c
 810925a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 810925e:	46d3      	mov	fp, sl
 8109260:	220a      	movs	r2, #10
 8109262:	9815      	ldr	r0, [sp, #84]	; 0x54
 8109264:	7806      	ldrb	r6, [r0, #0]
 8109266:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 810926a:	b2d9      	uxtb	r1, r3
 810926c:	2909      	cmp	r1, #9
 810926e:	d926      	bls.n	81092be <_strtod_l+0x1ae>
 8109270:	494c      	ldr	r1, [pc, #304]	; (81093a4 <_strtod_l+0x294>)
 8109272:	2201      	movs	r2, #1
 8109274:	f001 f98c 	bl	810a590 <strncmp>
 8109278:	2800      	cmp	r0, #0
 810927a:	d030      	beq.n	81092de <_strtod_l+0x1ce>
 810927c:	2000      	movs	r0, #0
 810927e:	4632      	mov	r2, r6
 8109280:	9005      	str	r0, [sp, #20]
 8109282:	465e      	mov	r6, fp
 8109284:	4603      	mov	r3, r0
 8109286:	2a65      	cmp	r2, #101	; 0x65
 8109288:	d001      	beq.n	810928e <_strtod_l+0x17e>
 810928a:	2a45      	cmp	r2, #69	; 0x45
 810928c:	d113      	bne.n	81092b6 <_strtod_l+0x1a6>
 810928e:	b91e      	cbnz	r6, 8109298 <_strtod_l+0x188>
 8109290:	9a04      	ldr	r2, [sp, #16]
 8109292:	4302      	orrs	r2, r0
 8109294:	d094      	beq.n	81091c0 <_strtod_l+0xb0>
 8109296:	2600      	movs	r6, #0
 8109298:	9d15      	ldr	r5, [sp, #84]	; 0x54
 810929a:	1c6a      	adds	r2, r5, #1
 810929c:	9215      	str	r2, [sp, #84]	; 0x54
 810929e:	786a      	ldrb	r2, [r5, #1]
 81092a0:	2a2b      	cmp	r2, #43	; 0x2b
 81092a2:	d074      	beq.n	810938e <_strtod_l+0x27e>
 81092a4:	2a2d      	cmp	r2, #45	; 0x2d
 81092a6:	d078      	beq.n	810939a <_strtod_l+0x28a>
 81092a8:	f04f 0c00 	mov.w	ip, #0
 81092ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 81092b0:	2909      	cmp	r1, #9
 81092b2:	d97f      	bls.n	81093b4 <_strtod_l+0x2a4>
 81092b4:	9515      	str	r5, [sp, #84]	; 0x54
 81092b6:	2700      	movs	r7, #0
 81092b8:	e09e      	b.n	81093f8 <_strtod_l+0x2e8>
 81092ba:	2300      	movs	r3, #0
 81092bc:	e7c8      	b.n	8109250 <_strtod_l+0x140>
 81092be:	f1bb 0f08 	cmp.w	fp, #8
 81092c2:	bfd8      	it	le
 81092c4:	9909      	ldrle	r1, [sp, #36]	; 0x24
 81092c6:	f100 0001 	add.w	r0, r0, #1
 81092ca:	bfda      	itte	le
 81092cc:	fb02 3301 	mlale	r3, r2, r1, r3
 81092d0:	9309      	strle	r3, [sp, #36]	; 0x24
 81092d2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 81092d6:	f10b 0b01 	add.w	fp, fp, #1
 81092da:	9015      	str	r0, [sp, #84]	; 0x54
 81092dc:	e7c1      	b.n	8109262 <_strtod_l+0x152>
 81092de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81092e0:	1c5a      	adds	r2, r3, #1
 81092e2:	9215      	str	r2, [sp, #84]	; 0x54
 81092e4:	785a      	ldrb	r2, [r3, #1]
 81092e6:	f1bb 0f00 	cmp.w	fp, #0
 81092ea:	d037      	beq.n	810935c <_strtod_l+0x24c>
 81092ec:	9005      	str	r0, [sp, #20]
 81092ee:	465e      	mov	r6, fp
 81092f0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 81092f4:	2b09      	cmp	r3, #9
 81092f6:	d912      	bls.n	810931e <_strtod_l+0x20e>
 81092f8:	2301      	movs	r3, #1
 81092fa:	e7c4      	b.n	8109286 <_strtod_l+0x176>
 81092fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81092fe:	1c5a      	adds	r2, r3, #1
 8109300:	9215      	str	r2, [sp, #84]	; 0x54
 8109302:	785a      	ldrb	r2, [r3, #1]
 8109304:	3001      	adds	r0, #1
 8109306:	2a30      	cmp	r2, #48	; 0x30
 8109308:	d0f8      	beq.n	81092fc <_strtod_l+0x1ec>
 810930a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 810930e:	2b08      	cmp	r3, #8
 8109310:	f200 84c1 	bhi.w	8109c96 <_strtod_l+0xb86>
 8109314:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109316:	9005      	str	r0, [sp, #20]
 8109318:	2000      	movs	r0, #0
 810931a:	930b      	str	r3, [sp, #44]	; 0x2c
 810931c:	4606      	mov	r6, r0
 810931e:	3a30      	subs	r2, #48	; 0x30
 8109320:	f100 0301 	add.w	r3, r0, #1
 8109324:	d014      	beq.n	8109350 <_strtod_l+0x240>
 8109326:	9905      	ldr	r1, [sp, #20]
 8109328:	4419      	add	r1, r3
 810932a:	9105      	str	r1, [sp, #20]
 810932c:	4633      	mov	r3, r6
 810932e:	eb00 0c06 	add.w	ip, r0, r6
 8109332:	210a      	movs	r1, #10
 8109334:	4563      	cmp	r3, ip
 8109336:	d113      	bne.n	8109360 <_strtod_l+0x250>
 8109338:	1833      	adds	r3, r6, r0
 810933a:	2b08      	cmp	r3, #8
 810933c:	f106 0601 	add.w	r6, r6, #1
 8109340:	4406      	add	r6, r0
 8109342:	dc1a      	bgt.n	810937a <_strtod_l+0x26a>
 8109344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8109346:	230a      	movs	r3, #10
 8109348:	fb03 2301 	mla	r3, r3, r1, r2
 810934c:	9309      	str	r3, [sp, #36]	; 0x24
 810934e:	2300      	movs	r3, #0
 8109350:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8109352:	1c51      	adds	r1, r2, #1
 8109354:	9115      	str	r1, [sp, #84]	; 0x54
 8109356:	7852      	ldrb	r2, [r2, #1]
 8109358:	4618      	mov	r0, r3
 810935a:	e7c9      	b.n	81092f0 <_strtod_l+0x1e0>
 810935c:	4658      	mov	r0, fp
 810935e:	e7d2      	b.n	8109306 <_strtod_l+0x1f6>
 8109360:	2b08      	cmp	r3, #8
 8109362:	f103 0301 	add.w	r3, r3, #1
 8109366:	dc03      	bgt.n	8109370 <_strtod_l+0x260>
 8109368:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810936a:	434f      	muls	r7, r1
 810936c:	9709      	str	r7, [sp, #36]	; 0x24
 810936e:	e7e1      	b.n	8109334 <_strtod_l+0x224>
 8109370:	2b10      	cmp	r3, #16
 8109372:	bfd8      	it	le
 8109374:	fb01 fa0a 	mulle.w	sl, r1, sl
 8109378:	e7dc      	b.n	8109334 <_strtod_l+0x224>
 810937a:	2e10      	cmp	r6, #16
 810937c:	bfdc      	itt	le
 810937e:	230a      	movle	r3, #10
 8109380:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8109384:	e7e3      	b.n	810934e <_strtod_l+0x23e>
 8109386:	2300      	movs	r3, #0
 8109388:	9305      	str	r3, [sp, #20]
 810938a:	2301      	movs	r3, #1
 810938c:	e780      	b.n	8109290 <_strtod_l+0x180>
 810938e:	f04f 0c00 	mov.w	ip, #0
 8109392:	1caa      	adds	r2, r5, #2
 8109394:	9215      	str	r2, [sp, #84]	; 0x54
 8109396:	78aa      	ldrb	r2, [r5, #2]
 8109398:	e788      	b.n	81092ac <_strtod_l+0x19c>
 810939a:	f04f 0c01 	mov.w	ip, #1
 810939e:	e7f8      	b.n	8109392 <_strtod_l+0x282>
 81093a0:	0810b1e8 	.word	0x0810b1e8
 81093a4:	0810b1e4 	.word	0x0810b1e4
 81093a8:	7ff00000 	.word	0x7ff00000
 81093ac:	9a15      	ldr	r2, [sp, #84]	; 0x54
 81093ae:	1c51      	adds	r1, r2, #1
 81093b0:	9115      	str	r1, [sp, #84]	; 0x54
 81093b2:	7852      	ldrb	r2, [r2, #1]
 81093b4:	2a30      	cmp	r2, #48	; 0x30
 81093b6:	d0f9      	beq.n	81093ac <_strtod_l+0x29c>
 81093b8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 81093bc:	2908      	cmp	r1, #8
 81093be:	f63f af7a 	bhi.w	81092b6 <_strtod_l+0x1a6>
 81093c2:	3a30      	subs	r2, #48	; 0x30
 81093c4:	9208      	str	r2, [sp, #32]
 81093c6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 81093c8:	920c      	str	r2, [sp, #48]	; 0x30
 81093ca:	9a15      	ldr	r2, [sp, #84]	; 0x54
 81093cc:	1c57      	adds	r7, r2, #1
 81093ce:	9715      	str	r7, [sp, #84]	; 0x54
 81093d0:	7852      	ldrb	r2, [r2, #1]
 81093d2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 81093d6:	f1be 0f09 	cmp.w	lr, #9
 81093da:	d938      	bls.n	810944e <_strtod_l+0x33e>
 81093dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 81093de:	1a7f      	subs	r7, r7, r1
 81093e0:	2f08      	cmp	r7, #8
 81093e2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 81093e6:	dc03      	bgt.n	81093f0 <_strtod_l+0x2e0>
 81093e8:	9908      	ldr	r1, [sp, #32]
 81093ea:	428f      	cmp	r7, r1
 81093ec:	bfa8      	it	ge
 81093ee:	460f      	movge	r7, r1
 81093f0:	f1bc 0f00 	cmp.w	ip, #0
 81093f4:	d000      	beq.n	81093f8 <_strtod_l+0x2e8>
 81093f6:	427f      	negs	r7, r7
 81093f8:	2e00      	cmp	r6, #0
 81093fa:	d14f      	bne.n	810949c <_strtod_l+0x38c>
 81093fc:	9904      	ldr	r1, [sp, #16]
 81093fe:	4301      	orrs	r1, r0
 8109400:	f47f aec1 	bne.w	8109186 <_strtod_l+0x76>
 8109404:	2b00      	cmp	r3, #0
 8109406:	f47f aedb 	bne.w	81091c0 <_strtod_l+0xb0>
 810940a:	2a69      	cmp	r2, #105	; 0x69
 810940c:	d029      	beq.n	8109462 <_strtod_l+0x352>
 810940e:	dc26      	bgt.n	810945e <_strtod_l+0x34e>
 8109410:	2a49      	cmp	r2, #73	; 0x49
 8109412:	d026      	beq.n	8109462 <_strtod_l+0x352>
 8109414:	2a4e      	cmp	r2, #78	; 0x4e
 8109416:	f47f aed3 	bne.w	81091c0 <_strtod_l+0xb0>
 810941a:	499b      	ldr	r1, [pc, #620]	; (8109688 <_strtod_l+0x578>)
 810941c:	a815      	add	r0, sp, #84	; 0x54
 810941e:	f001 fbef 	bl	810ac00 <__match>
 8109422:	2800      	cmp	r0, #0
 8109424:	f43f aecc 	beq.w	81091c0 <_strtod_l+0xb0>
 8109428:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810942a:	781b      	ldrb	r3, [r3, #0]
 810942c:	2b28      	cmp	r3, #40	; 0x28
 810942e:	d12f      	bne.n	8109490 <_strtod_l+0x380>
 8109430:	4996      	ldr	r1, [pc, #600]	; (810968c <_strtod_l+0x57c>)
 8109432:	aa18      	add	r2, sp, #96	; 0x60
 8109434:	a815      	add	r0, sp, #84	; 0x54
 8109436:	f001 fbf7 	bl	810ac28 <__hexnan>
 810943a:	2805      	cmp	r0, #5
 810943c:	d128      	bne.n	8109490 <_strtod_l+0x380>
 810943e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8109440:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8109444:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8109448:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 810944c:	e69b      	b.n	8109186 <_strtod_l+0x76>
 810944e:	9f08      	ldr	r7, [sp, #32]
 8109450:	210a      	movs	r1, #10
 8109452:	fb01 2107 	mla	r1, r1, r7, r2
 8109456:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 810945a:	9208      	str	r2, [sp, #32]
 810945c:	e7b5      	b.n	81093ca <_strtod_l+0x2ba>
 810945e:	2a6e      	cmp	r2, #110	; 0x6e
 8109460:	e7d9      	b.n	8109416 <_strtod_l+0x306>
 8109462:	498b      	ldr	r1, [pc, #556]	; (8109690 <_strtod_l+0x580>)
 8109464:	a815      	add	r0, sp, #84	; 0x54
 8109466:	f001 fbcb 	bl	810ac00 <__match>
 810946a:	2800      	cmp	r0, #0
 810946c:	f43f aea8 	beq.w	81091c0 <_strtod_l+0xb0>
 8109470:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109472:	4988      	ldr	r1, [pc, #544]	; (8109694 <_strtod_l+0x584>)
 8109474:	3b01      	subs	r3, #1
 8109476:	a815      	add	r0, sp, #84	; 0x54
 8109478:	9315      	str	r3, [sp, #84]	; 0x54
 810947a:	f001 fbc1 	bl	810ac00 <__match>
 810947e:	b910      	cbnz	r0, 8109486 <_strtod_l+0x376>
 8109480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109482:	3301      	adds	r3, #1
 8109484:	9315      	str	r3, [sp, #84]	; 0x54
 8109486:	f8df 921c 	ldr.w	r9, [pc, #540]	; 81096a4 <_strtod_l+0x594>
 810948a:	f04f 0800 	mov.w	r8, #0
 810948e:	e67a      	b.n	8109186 <_strtod_l+0x76>
 8109490:	4881      	ldr	r0, [pc, #516]	; (8109698 <_strtod_l+0x588>)
 8109492:	f001 f8d1 	bl	810a638 <nan>
 8109496:	ec59 8b10 	vmov	r8, r9, d0
 810949a:	e674      	b.n	8109186 <_strtod_l+0x76>
 810949c:	9b05      	ldr	r3, [sp, #20]
 810949e:	9809      	ldr	r0, [sp, #36]	; 0x24
 81094a0:	1afb      	subs	r3, r7, r3
 81094a2:	f1bb 0f00 	cmp.w	fp, #0
 81094a6:	bf08      	it	eq
 81094a8:	46b3      	moveq	fp, r6
 81094aa:	2e10      	cmp	r6, #16
 81094ac:	9308      	str	r3, [sp, #32]
 81094ae:	4635      	mov	r5, r6
 81094b0:	bfa8      	it	ge
 81094b2:	2510      	movge	r5, #16
 81094b4:	f7f7 f8ae 	bl	8100614 <__aeabi_ui2d>
 81094b8:	2e09      	cmp	r6, #9
 81094ba:	4680      	mov	r8, r0
 81094bc:	4689      	mov	r9, r1
 81094be:	dd13      	ble.n	81094e8 <_strtod_l+0x3d8>
 81094c0:	4b76      	ldr	r3, [pc, #472]	; (810969c <_strtod_l+0x58c>)
 81094c2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 81094c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 81094ca:	f7f7 f91d 	bl	8100708 <__aeabi_dmul>
 81094ce:	4680      	mov	r8, r0
 81094d0:	4650      	mov	r0, sl
 81094d2:	4689      	mov	r9, r1
 81094d4:	f7f7 f89e 	bl	8100614 <__aeabi_ui2d>
 81094d8:	4602      	mov	r2, r0
 81094da:	460b      	mov	r3, r1
 81094dc:	4640      	mov	r0, r8
 81094de:	4649      	mov	r1, r9
 81094e0:	f7f6 ff5c 	bl	810039c <__adddf3>
 81094e4:	4680      	mov	r8, r0
 81094e6:	4689      	mov	r9, r1
 81094e8:	2e0f      	cmp	r6, #15
 81094ea:	dc38      	bgt.n	810955e <_strtod_l+0x44e>
 81094ec:	9b08      	ldr	r3, [sp, #32]
 81094ee:	2b00      	cmp	r3, #0
 81094f0:	f43f ae49 	beq.w	8109186 <_strtod_l+0x76>
 81094f4:	dd24      	ble.n	8109540 <_strtod_l+0x430>
 81094f6:	2b16      	cmp	r3, #22
 81094f8:	dc0b      	bgt.n	8109512 <_strtod_l+0x402>
 81094fa:	4968      	ldr	r1, [pc, #416]	; (810969c <_strtod_l+0x58c>)
 81094fc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109504:	4642      	mov	r2, r8
 8109506:	464b      	mov	r3, r9
 8109508:	f7f7 f8fe 	bl	8100708 <__aeabi_dmul>
 810950c:	4680      	mov	r8, r0
 810950e:	4689      	mov	r9, r1
 8109510:	e639      	b.n	8109186 <_strtod_l+0x76>
 8109512:	9a08      	ldr	r2, [sp, #32]
 8109514:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8109518:	4293      	cmp	r3, r2
 810951a:	db20      	blt.n	810955e <_strtod_l+0x44e>
 810951c:	4c5f      	ldr	r4, [pc, #380]	; (810969c <_strtod_l+0x58c>)
 810951e:	f1c6 060f 	rsb	r6, r6, #15
 8109522:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8109526:	4642      	mov	r2, r8
 8109528:	464b      	mov	r3, r9
 810952a:	e9d1 0100 	ldrd	r0, r1, [r1]
 810952e:	f7f7 f8eb 	bl	8100708 <__aeabi_dmul>
 8109532:	9b08      	ldr	r3, [sp, #32]
 8109534:	1b9e      	subs	r6, r3, r6
 8109536:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 810953a:	e9d4 2300 	ldrd	r2, r3, [r4]
 810953e:	e7e3      	b.n	8109508 <_strtod_l+0x3f8>
 8109540:	9b08      	ldr	r3, [sp, #32]
 8109542:	3316      	adds	r3, #22
 8109544:	db0b      	blt.n	810955e <_strtod_l+0x44e>
 8109546:	9b05      	ldr	r3, [sp, #20]
 8109548:	1bdf      	subs	r7, r3, r7
 810954a:	4b54      	ldr	r3, [pc, #336]	; (810969c <_strtod_l+0x58c>)
 810954c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8109550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8109554:	4640      	mov	r0, r8
 8109556:	4649      	mov	r1, r9
 8109558:	f7f7 fa00 	bl	810095c <__aeabi_ddiv>
 810955c:	e7d6      	b.n	810950c <_strtod_l+0x3fc>
 810955e:	9b08      	ldr	r3, [sp, #32]
 8109560:	1b75      	subs	r5, r6, r5
 8109562:	441d      	add	r5, r3
 8109564:	2d00      	cmp	r5, #0
 8109566:	dd70      	ble.n	810964a <_strtod_l+0x53a>
 8109568:	f015 030f 	ands.w	r3, r5, #15
 810956c:	d00a      	beq.n	8109584 <_strtod_l+0x474>
 810956e:	494b      	ldr	r1, [pc, #300]	; (810969c <_strtod_l+0x58c>)
 8109570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8109574:	4642      	mov	r2, r8
 8109576:	464b      	mov	r3, r9
 8109578:	e9d1 0100 	ldrd	r0, r1, [r1]
 810957c:	f7f7 f8c4 	bl	8100708 <__aeabi_dmul>
 8109580:	4680      	mov	r8, r0
 8109582:	4689      	mov	r9, r1
 8109584:	f035 050f 	bics.w	r5, r5, #15
 8109588:	d04d      	beq.n	8109626 <_strtod_l+0x516>
 810958a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 810958e:	dd22      	ble.n	81095d6 <_strtod_l+0x4c6>
 8109590:	2500      	movs	r5, #0
 8109592:	46ab      	mov	fp, r5
 8109594:	9509      	str	r5, [sp, #36]	; 0x24
 8109596:	9505      	str	r5, [sp, #20]
 8109598:	2322      	movs	r3, #34	; 0x22
 810959a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 81096a4 <_strtod_l+0x594>
 810959e:	6023      	str	r3, [r4, #0]
 81095a0:	f04f 0800 	mov.w	r8, #0
 81095a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81095a6:	2b00      	cmp	r3, #0
 81095a8:	f43f aded 	beq.w	8109186 <_strtod_l+0x76>
 81095ac:	9916      	ldr	r1, [sp, #88]	; 0x58
 81095ae:	4620      	mov	r0, r4
 81095b0:	f7ff f924 	bl	81087fc <_Bfree>
 81095b4:	9905      	ldr	r1, [sp, #20]
 81095b6:	4620      	mov	r0, r4
 81095b8:	f7ff f920 	bl	81087fc <_Bfree>
 81095bc:	4659      	mov	r1, fp
 81095be:	4620      	mov	r0, r4
 81095c0:	f7ff f91c 	bl	81087fc <_Bfree>
 81095c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 81095c6:	4620      	mov	r0, r4
 81095c8:	f7ff f918 	bl	81087fc <_Bfree>
 81095cc:	4629      	mov	r1, r5
 81095ce:	4620      	mov	r0, r4
 81095d0:	f7ff f914 	bl	81087fc <_Bfree>
 81095d4:	e5d7      	b.n	8109186 <_strtod_l+0x76>
 81095d6:	4b32      	ldr	r3, [pc, #200]	; (81096a0 <_strtod_l+0x590>)
 81095d8:	9304      	str	r3, [sp, #16]
 81095da:	2300      	movs	r3, #0
 81095dc:	112d      	asrs	r5, r5, #4
 81095de:	4640      	mov	r0, r8
 81095e0:	4649      	mov	r1, r9
 81095e2:	469a      	mov	sl, r3
 81095e4:	2d01      	cmp	r5, #1
 81095e6:	dc21      	bgt.n	810962c <_strtod_l+0x51c>
 81095e8:	b10b      	cbz	r3, 81095ee <_strtod_l+0x4de>
 81095ea:	4680      	mov	r8, r0
 81095ec:	4689      	mov	r9, r1
 81095ee:	492c      	ldr	r1, [pc, #176]	; (81096a0 <_strtod_l+0x590>)
 81095f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 81095f4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 81095f8:	4642      	mov	r2, r8
 81095fa:	464b      	mov	r3, r9
 81095fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8109600:	f7f7 f882 	bl	8100708 <__aeabi_dmul>
 8109604:	4b27      	ldr	r3, [pc, #156]	; (81096a4 <_strtod_l+0x594>)
 8109606:	460a      	mov	r2, r1
 8109608:	400b      	ands	r3, r1
 810960a:	4927      	ldr	r1, [pc, #156]	; (81096a8 <_strtod_l+0x598>)
 810960c:	428b      	cmp	r3, r1
 810960e:	4680      	mov	r8, r0
 8109610:	d8be      	bhi.n	8109590 <_strtod_l+0x480>
 8109612:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8109616:	428b      	cmp	r3, r1
 8109618:	bf86      	itte	hi
 810961a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 81096ac <_strtod_l+0x59c>
 810961e:	f04f 38ff 	movhi.w	r8, #4294967295
 8109622:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8109626:	2300      	movs	r3, #0
 8109628:	9304      	str	r3, [sp, #16]
 810962a:	e07b      	b.n	8109724 <_strtod_l+0x614>
 810962c:	07ea      	lsls	r2, r5, #31
 810962e:	d505      	bpl.n	810963c <_strtod_l+0x52c>
 8109630:	9b04      	ldr	r3, [sp, #16]
 8109632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109636:	f7f7 f867 	bl	8100708 <__aeabi_dmul>
 810963a:	2301      	movs	r3, #1
 810963c:	9a04      	ldr	r2, [sp, #16]
 810963e:	3208      	adds	r2, #8
 8109640:	f10a 0a01 	add.w	sl, sl, #1
 8109644:	106d      	asrs	r5, r5, #1
 8109646:	9204      	str	r2, [sp, #16]
 8109648:	e7cc      	b.n	81095e4 <_strtod_l+0x4d4>
 810964a:	d0ec      	beq.n	8109626 <_strtod_l+0x516>
 810964c:	426d      	negs	r5, r5
 810964e:	f015 020f 	ands.w	r2, r5, #15
 8109652:	d00a      	beq.n	810966a <_strtod_l+0x55a>
 8109654:	4b11      	ldr	r3, [pc, #68]	; (810969c <_strtod_l+0x58c>)
 8109656:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810965a:	4640      	mov	r0, r8
 810965c:	4649      	mov	r1, r9
 810965e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109662:	f7f7 f97b 	bl	810095c <__aeabi_ddiv>
 8109666:	4680      	mov	r8, r0
 8109668:	4689      	mov	r9, r1
 810966a:	112d      	asrs	r5, r5, #4
 810966c:	d0db      	beq.n	8109626 <_strtod_l+0x516>
 810966e:	2d1f      	cmp	r5, #31
 8109670:	dd1e      	ble.n	81096b0 <_strtod_l+0x5a0>
 8109672:	2500      	movs	r5, #0
 8109674:	46ab      	mov	fp, r5
 8109676:	9509      	str	r5, [sp, #36]	; 0x24
 8109678:	9505      	str	r5, [sp, #20]
 810967a:	2322      	movs	r3, #34	; 0x22
 810967c:	f04f 0800 	mov.w	r8, #0
 8109680:	f04f 0900 	mov.w	r9, #0
 8109684:	6023      	str	r3, [r4, #0]
 8109686:	e78d      	b.n	81095a4 <_strtod_l+0x494>
 8109688:	0810afd1 	.word	0x0810afd1
 810968c:	0810b1fc 	.word	0x0810b1fc
 8109690:	0810afc9 	.word	0x0810afc9
 8109694:	0810b000 	.word	0x0810b000
 8109698:	0810b38d 	.word	0x0810b38d
 810969c:	0810b110 	.word	0x0810b110
 81096a0:	0810b0e8 	.word	0x0810b0e8
 81096a4:	7ff00000 	.word	0x7ff00000
 81096a8:	7ca00000 	.word	0x7ca00000
 81096ac:	7fefffff 	.word	0x7fefffff
 81096b0:	f015 0310 	ands.w	r3, r5, #16
 81096b4:	bf18      	it	ne
 81096b6:	236a      	movne	r3, #106	; 0x6a
 81096b8:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8109a5c <_strtod_l+0x94c>
 81096bc:	9304      	str	r3, [sp, #16]
 81096be:	4640      	mov	r0, r8
 81096c0:	4649      	mov	r1, r9
 81096c2:	2300      	movs	r3, #0
 81096c4:	07ea      	lsls	r2, r5, #31
 81096c6:	d504      	bpl.n	81096d2 <_strtod_l+0x5c2>
 81096c8:	e9da 2300 	ldrd	r2, r3, [sl]
 81096cc:	f7f7 f81c 	bl	8100708 <__aeabi_dmul>
 81096d0:	2301      	movs	r3, #1
 81096d2:	106d      	asrs	r5, r5, #1
 81096d4:	f10a 0a08 	add.w	sl, sl, #8
 81096d8:	d1f4      	bne.n	81096c4 <_strtod_l+0x5b4>
 81096da:	b10b      	cbz	r3, 81096e0 <_strtod_l+0x5d0>
 81096dc:	4680      	mov	r8, r0
 81096de:	4689      	mov	r9, r1
 81096e0:	9b04      	ldr	r3, [sp, #16]
 81096e2:	b1bb      	cbz	r3, 8109714 <_strtod_l+0x604>
 81096e4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 81096e8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 81096ec:	2b00      	cmp	r3, #0
 81096ee:	4649      	mov	r1, r9
 81096f0:	dd10      	ble.n	8109714 <_strtod_l+0x604>
 81096f2:	2b1f      	cmp	r3, #31
 81096f4:	f340 811e 	ble.w	8109934 <_strtod_l+0x824>
 81096f8:	2b34      	cmp	r3, #52	; 0x34
 81096fa:	bfde      	ittt	le
 81096fc:	f04f 33ff 	movle.w	r3, #4294967295
 8109700:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8109704:	4093      	lslle	r3, r2
 8109706:	f04f 0800 	mov.w	r8, #0
 810970a:	bfcc      	ite	gt
 810970c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8109710:	ea03 0901 	andle.w	r9, r3, r1
 8109714:	2200      	movs	r2, #0
 8109716:	2300      	movs	r3, #0
 8109718:	4640      	mov	r0, r8
 810971a:	4649      	mov	r1, r9
 810971c:	f7f7 fa5c 	bl	8100bd8 <__aeabi_dcmpeq>
 8109720:	2800      	cmp	r0, #0
 8109722:	d1a6      	bne.n	8109672 <_strtod_l+0x562>
 8109724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109726:	9300      	str	r3, [sp, #0]
 8109728:	990b      	ldr	r1, [sp, #44]	; 0x2c
 810972a:	4633      	mov	r3, r6
 810972c:	465a      	mov	r2, fp
 810972e:	4620      	mov	r0, r4
 8109730:	f7ff f8cc 	bl	81088cc <__s2b>
 8109734:	9009      	str	r0, [sp, #36]	; 0x24
 8109736:	2800      	cmp	r0, #0
 8109738:	f43f af2a 	beq.w	8109590 <_strtod_l+0x480>
 810973c:	9a08      	ldr	r2, [sp, #32]
 810973e:	9b05      	ldr	r3, [sp, #20]
 8109740:	2a00      	cmp	r2, #0
 8109742:	eba3 0307 	sub.w	r3, r3, r7
 8109746:	bfa8      	it	ge
 8109748:	2300      	movge	r3, #0
 810974a:	930c      	str	r3, [sp, #48]	; 0x30
 810974c:	2500      	movs	r5, #0
 810974e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8109752:	9312      	str	r3, [sp, #72]	; 0x48
 8109754:	46ab      	mov	fp, r5
 8109756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8109758:	4620      	mov	r0, r4
 810975a:	6859      	ldr	r1, [r3, #4]
 810975c:	f7ff f80e 	bl	810877c <_Balloc>
 8109760:	9005      	str	r0, [sp, #20]
 8109762:	2800      	cmp	r0, #0
 8109764:	f43f af18 	beq.w	8109598 <_strtod_l+0x488>
 8109768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810976a:	691a      	ldr	r2, [r3, #16]
 810976c:	3202      	adds	r2, #2
 810976e:	f103 010c 	add.w	r1, r3, #12
 8109772:	0092      	lsls	r2, r2, #2
 8109774:	300c      	adds	r0, #12
 8109776:	f000 ff4f 	bl	810a618 <memcpy>
 810977a:	ec49 8b10 	vmov	d0, r8, r9
 810977e:	aa18      	add	r2, sp, #96	; 0x60
 8109780:	a917      	add	r1, sp, #92	; 0x5c
 8109782:	4620      	mov	r0, r4
 8109784:	f7ff fbd6 	bl	8108f34 <__d2b>
 8109788:	ec49 8b18 	vmov	d8, r8, r9
 810978c:	9016      	str	r0, [sp, #88]	; 0x58
 810978e:	2800      	cmp	r0, #0
 8109790:	f43f af02 	beq.w	8109598 <_strtod_l+0x488>
 8109794:	2101      	movs	r1, #1
 8109796:	4620      	mov	r0, r4
 8109798:	f7ff f930 	bl	81089fc <__i2b>
 810979c:	4683      	mov	fp, r0
 810979e:	2800      	cmp	r0, #0
 81097a0:	f43f aefa 	beq.w	8109598 <_strtod_l+0x488>
 81097a4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 81097a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 81097a8:	2e00      	cmp	r6, #0
 81097aa:	bfab      	itete	ge
 81097ac:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 81097ae:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 81097b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 81097b2:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 81097b6:	bfac      	ite	ge
 81097b8:	eb06 0a03 	addge.w	sl, r6, r3
 81097bc:	1b9f      	sublt	r7, r3, r6
 81097be:	9b04      	ldr	r3, [sp, #16]
 81097c0:	1af6      	subs	r6, r6, r3
 81097c2:	4416      	add	r6, r2
 81097c4:	4ba0      	ldr	r3, [pc, #640]	; (8109a48 <_strtod_l+0x938>)
 81097c6:	3e01      	subs	r6, #1
 81097c8:	429e      	cmp	r6, r3
 81097ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 81097ce:	f280 80c4 	bge.w	810995a <_strtod_l+0x84a>
 81097d2:	1b9b      	subs	r3, r3, r6
 81097d4:	2b1f      	cmp	r3, #31
 81097d6:	eba2 0203 	sub.w	r2, r2, r3
 81097da:	f04f 0101 	mov.w	r1, #1
 81097de:	f300 80b0 	bgt.w	8109942 <_strtod_l+0x832>
 81097e2:	fa01 f303 	lsl.w	r3, r1, r3
 81097e6:	930e      	str	r3, [sp, #56]	; 0x38
 81097e8:	2300      	movs	r3, #0
 81097ea:	930d      	str	r3, [sp, #52]	; 0x34
 81097ec:	eb0a 0602 	add.w	r6, sl, r2
 81097f0:	9b04      	ldr	r3, [sp, #16]
 81097f2:	45b2      	cmp	sl, r6
 81097f4:	4417      	add	r7, r2
 81097f6:	441f      	add	r7, r3
 81097f8:	4653      	mov	r3, sl
 81097fa:	bfa8      	it	ge
 81097fc:	4633      	movge	r3, r6
 81097fe:	42bb      	cmp	r3, r7
 8109800:	bfa8      	it	ge
 8109802:	463b      	movge	r3, r7
 8109804:	2b00      	cmp	r3, #0
 8109806:	bfc2      	ittt	gt
 8109808:	1af6      	subgt	r6, r6, r3
 810980a:	1aff      	subgt	r7, r7, r3
 810980c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8109810:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8109812:	2b00      	cmp	r3, #0
 8109814:	dd17      	ble.n	8109846 <_strtod_l+0x736>
 8109816:	4659      	mov	r1, fp
 8109818:	461a      	mov	r2, r3
 810981a:	4620      	mov	r0, r4
 810981c:	f7ff f9ae 	bl	8108b7c <__pow5mult>
 8109820:	4683      	mov	fp, r0
 8109822:	2800      	cmp	r0, #0
 8109824:	f43f aeb8 	beq.w	8109598 <_strtod_l+0x488>
 8109828:	4601      	mov	r1, r0
 810982a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 810982c:	4620      	mov	r0, r4
 810982e:	f7ff f8fb 	bl	8108a28 <__multiply>
 8109832:	900b      	str	r0, [sp, #44]	; 0x2c
 8109834:	2800      	cmp	r0, #0
 8109836:	f43f aeaf 	beq.w	8109598 <_strtod_l+0x488>
 810983a:	9916      	ldr	r1, [sp, #88]	; 0x58
 810983c:	4620      	mov	r0, r4
 810983e:	f7fe ffdd 	bl	81087fc <_Bfree>
 8109842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109844:	9316      	str	r3, [sp, #88]	; 0x58
 8109846:	2e00      	cmp	r6, #0
 8109848:	f300 808c 	bgt.w	8109964 <_strtod_l+0x854>
 810984c:	9b08      	ldr	r3, [sp, #32]
 810984e:	2b00      	cmp	r3, #0
 8109850:	dd08      	ble.n	8109864 <_strtod_l+0x754>
 8109852:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8109854:	9905      	ldr	r1, [sp, #20]
 8109856:	4620      	mov	r0, r4
 8109858:	f7ff f990 	bl	8108b7c <__pow5mult>
 810985c:	9005      	str	r0, [sp, #20]
 810985e:	2800      	cmp	r0, #0
 8109860:	f43f ae9a 	beq.w	8109598 <_strtod_l+0x488>
 8109864:	2f00      	cmp	r7, #0
 8109866:	dd08      	ble.n	810987a <_strtod_l+0x76a>
 8109868:	9905      	ldr	r1, [sp, #20]
 810986a:	463a      	mov	r2, r7
 810986c:	4620      	mov	r0, r4
 810986e:	f7ff f9df 	bl	8108c30 <__lshift>
 8109872:	9005      	str	r0, [sp, #20]
 8109874:	2800      	cmp	r0, #0
 8109876:	f43f ae8f 	beq.w	8109598 <_strtod_l+0x488>
 810987a:	f1ba 0f00 	cmp.w	sl, #0
 810987e:	dd08      	ble.n	8109892 <_strtod_l+0x782>
 8109880:	4659      	mov	r1, fp
 8109882:	4652      	mov	r2, sl
 8109884:	4620      	mov	r0, r4
 8109886:	f7ff f9d3 	bl	8108c30 <__lshift>
 810988a:	4683      	mov	fp, r0
 810988c:	2800      	cmp	r0, #0
 810988e:	f43f ae83 	beq.w	8109598 <_strtod_l+0x488>
 8109892:	9a05      	ldr	r2, [sp, #20]
 8109894:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109896:	4620      	mov	r0, r4
 8109898:	f7ff fa52 	bl	8108d40 <__mdiff>
 810989c:	4605      	mov	r5, r0
 810989e:	2800      	cmp	r0, #0
 81098a0:	f43f ae7a 	beq.w	8109598 <_strtod_l+0x488>
 81098a4:	68c3      	ldr	r3, [r0, #12]
 81098a6:	930b      	str	r3, [sp, #44]	; 0x2c
 81098a8:	2300      	movs	r3, #0
 81098aa:	60c3      	str	r3, [r0, #12]
 81098ac:	4659      	mov	r1, fp
 81098ae:	f7ff fa2b 	bl	8108d08 <__mcmp>
 81098b2:	2800      	cmp	r0, #0
 81098b4:	da60      	bge.n	8109978 <_strtod_l+0x868>
 81098b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81098b8:	ea53 0308 	orrs.w	r3, r3, r8
 81098bc:	f040 8084 	bne.w	81099c8 <_strtod_l+0x8b8>
 81098c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81098c4:	2b00      	cmp	r3, #0
 81098c6:	d17f      	bne.n	81099c8 <_strtod_l+0x8b8>
 81098c8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 81098cc:	0d1b      	lsrs	r3, r3, #20
 81098ce:	051b      	lsls	r3, r3, #20
 81098d0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 81098d4:	d978      	bls.n	81099c8 <_strtod_l+0x8b8>
 81098d6:	696b      	ldr	r3, [r5, #20]
 81098d8:	b913      	cbnz	r3, 81098e0 <_strtod_l+0x7d0>
 81098da:	692b      	ldr	r3, [r5, #16]
 81098dc:	2b01      	cmp	r3, #1
 81098de:	dd73      	ble.n	81099c8 <_strtod_l+0x8b8>
 81098e0:	4629      	mov	r1, r5
 81098e2:	2201      	movs	r2, #1
 81098e4:	4620      	mov	r0, r4
 81098e6:	f7ff f9a3 	bl	8108c30 <__lshift>
 81098ea:	4659      	mov	r1, fp
 81098ec:	4605      	mov	r5, r0
 81098ee:	f7ff fa0b 	bl	8108d08 <__mcmp>
 81098f2:	2800      	cmp	r0, #0
 81098f4:	dd68      	ble.n	81099c8 <_strtod_l+0x8b8>
 81098f6:	9904      	ldr	r1, [sp, #16]
 81098f8:	4a54      	ldr	r2, [pc, #336]	; (8109a4c <_strtod_l+0x93c>)
 81098fa:	464b      	mov	r3, r9
 81098fc:	2900      	cmp	r1, #0
 81098fe:	f000 8084 	beq.w	8109a0a <_strtod_l+0x8fa>
 8109902:	ea02 0109 	and.w	r1, r2, r9
 8109906:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 810990a:	dc7e      	bgt.n	8109a0a <_strtod_l+0x8fa>
 810990c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8109910:	f77f aeb3 	ble.w	810967a <_strtod_l+0x56a>
 8109914:	4b4e      	ldr	r3, [pc, #312]	; (8109a50 <_strtod_l+0x940>)
 8109916:	4640      	mov	r0, r8
 8109918:	4649      	mov	r1, r9
 810991a:	2200      	movs	r2, #0
 810991c:	f7f6 fef4 	bl	8100708 <__aeabi_dmul>
 8109920:	4b4a      	ldr	r3, [pc, #296]	; (8109a4c <_strtod_l+0x93c>)
 8109922:	400b      	ands	r3, r1
 8109924:	4680      	mov	r8, r0
 8109926:	4689      	mov	r9, r1
 8109928:	2b00      	cmp	r3, #0
 810992a:	f47f ae3f 	bne.w	81095ac <_strtod_l+0x49c>
 810992e:	2322      	movs	r3, #34	; 0x22
 8109930:	6023      	str	r3, [r4, #0]
 8109932:	e63b      	b.n	81095ac <_strtod_l+0x49c>
 8109934:	f04f 32ff 	mov.w	r2, #4294967295
 8109938:	fa02 f303 	lsl.w	r3, r2, r3
 810993c:	ea03 0808 	and.w	r8, r3, r8
 8109940:	e6e8      	b.n	8109714 <_strtod_l+0x604>
 8109942:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8109946:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 810994a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 810994e:	36e2      	adds	r6, #226	; 0xe2
 8109950:	fa01 f306 	lsl.w	r3, r1, r6
 8109954:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8109958:	e748      	b.n	81097ec <_strtod_l+0x6dc>
 810995a:	2100      	movs	r1, #0
 810995c:	2301      	movs	r3, #1
 810995e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8109962:	e743      	b.n	81097ec <_strtod_l+0x6dc>
 8109964:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109966:	4632      	mov	r2, r6
 8109968:	4620      	mov	r0, r4
 810996a:	f7ff f961 	bl	8108c30 <__lshift>
 810996e:	9016      	str	r0, [sp, #88]	; 0x58
 8109970:	2800      	cmp	r0, #0
 8109972:	f47f af6b 	bne.w	810984c <_strtod_l+0x73c>
 8109976:	e60f      	b.n	8109598 <_strtod_l+0x488>
 8109978:	46ca      	mov	sl, r9
 810997a:	d171      	bne.n	8109a60 <_strtod_l+0x950>
 810997c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810997e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109982:	b352      	cbz	r2, 81099da <_strtod_l+0x8ca>
 8109984:	4a33      	ldr	r2, [pc, #204]	; (8109a54 <_strtod_l+0x944>)
 8109986:	4293      	cmp	r3, r2
 8109988:	d12a      	bne.n	81099e0 <_strtod_l+0x8d0>
 810998a:	9b04      	ldr	r3, [sp, #16]
 810998c:	4641      	mov	r1, r8
 810998e:	b1fb      	cbz	r3, 81099d0 <_strtod_l+0x8c0>
 8109990:	4b2e      	ldr	r3, [pc, #184]	; (8109a4c <_strtod_l+0x93c>)
 8109992:	ea09 0303 	and.w	r3, r9, r3
 8109996:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 810999a:	f04f 32ff 	mov.w	r2, #4294967295
 810999e:	d81a      	bhi.n	81099d6 <_strtod_l+0x8c6>
 81099a0:	0d1b      	lsrs	r3, r3, #20
 81099a2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 81099a6:	fa02 f303 	lsl.w	r3, r2, r3
 81099aa:	4299      	cmp	r1, r3
 81099ac:	d118      	bne.n	81099e0 <_strtod_l+0x8d0>
 81099ae:	4b2a      	ldr	r3, [pc, #168]	; (8109a58 <_strtod_l+0x948>)
 81099b0:	459a      	cmp	sl, r3
 81099b2:	d102      	bne.n	81099ba <_strtod_l+0x8aa>
 81099b4:	3101      	adds	r1, #1
 81099b6:	f43f adef 	beq.w	8109598 <_strtod_l+0x488>
 81099ba:	4b24      	ldr	r3, [pc, #144]	; (8109a4c <_strtod_l+0x93c>)
 81099bc:	ea0a 0303 	and.w	r3, sl, r3
 81099c0:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 81099c4:	f04f 0800 	mov.w	r8, #0
 81099c8:	9b04      	ldr	r3, [sp, #16]
 81099ca:	2b00      	cmp	r3, #0
 81099cc:	d1a2      	bne.n	8109914 <_strtod_l+0x804>
 81099ce:	e5ed      	b.n	81095ac <_strtod_l+0x49c>
 81099d0:	f04f 33ff 	mov.w	r3, #4294967295
 81099d4:	e7e9      	b.n	81099aa <_strtod_l+0x89a>
 81099d6:	4613      	mov	r3, r2
 81099d8:	e7e7      	b.n	81099aa <_strtod_l+0x89a>
 81099da:	ea53 0308 	orrs.w	r3, r3, r8
 81099de:	d08a      	beq.n	81098f6 <_strtod_l+0x7e6>
 81099e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 81099e2:	b1e3      	cbz	r3, 8109a1e <_strtod_l+0x90e>
 81099e4:	ea13 0f0a 	tst.w	r3, sl
 81099e8:	d0ee      	beq.n	81099c8 <_strtod_l+0x8b8>
 81099ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81099ec:	9a04      	ldr	r2, [sp, #16]
 81099ee:	4640      	mov	r0, r8
 81099f0:	4649      	mov	r1, r9
 81099f2:	b1c3      	cbz	r3, 8109a26 <_strtod_l+0x916>
 81099f4:	f7ff fb6f 	bl	81090d6 <sulp>
 81099f8:	4602      	mov	r2, r0
 81099fa:	460b      	mov	r3, r1
 81099fc:	ec51 0b18 	vmov	r0, r1, d8
 8109a00:	f7f6 fccc 	bl	810039c <__adddf3>
 8109a04:	4680      	mov	r8, r0
 8109a06:	4689      	mov	r9, r1
 8109a08:	e7de      	b.n	81099c8 <_strtod_l+0x8b8>
 8109a0a:	4013      	ands	r3, r2
 8109a0c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8109a10:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8109a14:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8109a18:	f04f 38ff 	mov.w	r8, #4294967295
 8109a1c:	e7d4      	b.n	81099c8 <_strtod_l+0x8b8>
 8109a1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8109a20:	ea13 0f08 	tst.w	r3, r8
 8109a24:	e7e0      	b.n	81099e8 <_strtod_l+0x8d8>
 8109a26:	f7ff fb56 	bl	81090d6 <sulp>
 8109a2a:	4602      	mov	r2, r0
 8109a2c:	460b      	mov	r3, r1
 8109a2e:	ec51 0b18 	vmov	r0, r1, d8
 8109a32:	f7f6 fcb1 	bl	8100398 <__aeabi_dsub>
 8109a36:	2200      	movs	r2, #0
 8109a38:	2300      	movs	r3, #0
 8109a3a:	4680      	mov	r8, r0
 8109a3c:	4689      	mov	r9, r1
 8109a3e:	f7f7 f8cb 	bl	8100bd8 <__aeabi_dcmpeq>
 8109a42:	2800      	cmp	r0, #0
 8109a44:	d0c0      	beq.n	81099c8 <_strtod_l+0x8b8>
 8109a46:	e618      	b.n	810967a <_strtod_l+0x56a>
 8109a48:	fffffc02 	.word	0xfffffc02
 8109a4c:	7ff00000 	.word	0x7ff00000
 8109a50:	39500000 	.word	0x39500000
 8109a54:	000fffff 	.word	0x000fffff
 8109a58:	7fefffff 	.word	0x7fefffff
 8109a5c:	0810b210 	.word	0x0810b210
 8109a60:	4659      	mov	r1, fp
 8109a62:	4628      	mov	r0, r5
 8109a64:	f7ff fac0 	bl	8108fe8 <__ratio>
 8109a68:	ec57 6b10 	vmov	r6, r7, d0
 8109a6c:	ee10 0a10 	vmov	r0, s0
 8109a70:	2200      	movs	r2, #0
 8109a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8109a76:	4639      	mov	r1, r7
 8109a78:	f7f7 f8c2 	bl	8100c00 <__aeabi_dcmple>
 8109a7c:	2800      	cmp	r0, #0
 8109a7e:	d071      	beq.n	8109b64 <_strtod_l+0xa54>
 8109a80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109a82:	2b00      	cmp	r3, #0
 8109a84:	d17c      	bne.n	8109b80 <_strtod_l+0xa70>
 8109a86:	f1b8 0f00 	cmp.w	r8, #0
 8109a8a:	d15a      	bne.n	8109b42 <_strtod_l+0xa32>
 8109a8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109a90:	2b00      	cmp	r3, #0
 8109a92:	d15d      	bne.n	8109b50 <_strtod_l+0xa40>
 8109a94:	4b90      	ldr	r3, [pc, #576]	; (8109cd8 <_strtod_l+0xbc8>)
 8109a96:	2200      	movs	r2, #0
 8109a98:	4630      	mov	r0, r6
 8109a9a:	4639      	mov	r1, r7
 8109a9c:	f7f7 f8a6 	bl	8100bec <__aeabi_dcmplt>
 8109aa0:	2800      	cmp	r0, #0
 8109aa2:	d15c      	bne.n	8109b5e <_strtod_l+0xa4e>
 8109aa4:	4630      	mov	r0, r6
 8109aa6:	4639      	mov	r1, r7
 8109aa8:	4b8c      	ldr	r3, [pc, #560]	; (8109cdc <_strtod_l+0xbcc>)
 8109aaa:	2200      	movs	r2, #0
 8109aac:	f7f6 fe2c 	bl	8100708 <__aeabi_dmul>
 8109ab0:	4606      	mov	r6, r0
 8109ab2:	460f      	mov	r7, r1
 8109ab4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8109ab8:	9606      	str	r6, [sp, #24]
 8109aba:	9307      	str	r3, [sp, #28]
 8109abc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8109ac0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8109ac4:	4b86      	ldr	r3, [pc, #536]	; (8109ce0 <_strtod_l+0xbd0>)
 8109ac6:	ea0a 0303 	and.w	r3, sl, r3
 8109aca:	930d      	str	r3, [sp, #52]	; 0x34
 8109acc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109ace:	4b85      	ldr	r3, [pc, #532]	; (8109ce4 <_strtod_l+0xbd4>)
 8109ad0:	429a      	cmp	r2, r3
 8109ad2:	f040 8090 	bne.w	8109bf6 <_strtod_l+0xae6>
 8109ad6:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8109ada:	ec49 8b10 	vmov	d0, r8, r9
 8109ade:	f7ff f9b9 	bl	8108e54 <__ulp>
 8109ae2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8109ae6:	ec51 0b10 	vmov	r0, r1, d0
 8109aea:	f7f6 fe0d 	bl	8100708 <__aeabi_dmul>
 8109aee:	4642      	mov	r2, r8
 8109af0:	464b      	mov	r3, r9
 8109af2:	f7f6 fc53 	bl	810039c <__adddf3>
 8109af6:	460b      	mov	r3, r1
 8109af8:	4979      	ldr	r1, [pc, #484]	; (8109ce0 <_strtod_l+0xbd0>)
 8109afa:	4a7b      	ldr	r2, [pc, #492]	; (8109ce8 <_strtod_l+0xbd8>)
 8109afc:	4019      	ands	r1, r3
 8109afe:	4291      	cmp	r1, r2
 8109b00:	4680      	mov	r8, r0
 8109b02:	d944      	bls.n	8109b8e <_strtod_l+0xa7e>
 8109b04:	ee18 2a90 	vmov	r2, s17
 8109b08:	4b78      	ldr	r3, [pc, #480]	; (8109cec <_strtod_l+0xbdc>)
 8109b0a:	429a      	cmp	r2, r3
 8109b0c:	d104      	bne.n	8109b18 <_strtod_l+0xa08>
 8109b0e:	ee18 3a10 	vmov	r3, s16
 8109b12:	3301      	adds	r3, #1
 8109b14:	f43f ad40 	beq.w	8109598 <_strtod_l+0x488>
 8109b18:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8109cec <_strtod_l+0xbdc>
 8109b1c:	f04f 38ff 	mov.w	r8, #4294967295
 8109b20:	9916      	ldr	r1, [sp, #88]	; 0x58
 8109b22:	4620      	mov	r0, r4
 8109b24:	f7fe fe6a 	bl	81087fc <_Bfree>
 8109b28:	9905      	ldr	r1, [sp, #20]
 8109b2a:	4620      	mov	r0, r4
 8109b2c:	f7fe fe66 	bl	81087fc <_Bfree>
 8109b30:	4659      	mov	r1, fp
 8109b32:	4620      	mov	r0, r4
 8109b34:	f7fe fe62 	bl	81087fc <_Bfree>
 8109b38:	4629      	mov	r1, r5
 8109b3a:	4620      	mov	r0, r4
 8109b3c:	f7fe fe5e 	bl	81087fc <_Bfree>
 8109b40:	e609      	b.n	8109756 <_strtod_l+0x646>
 8109b42:	f1b8 0f01 	cmp.w	r8, #1
 8109b46:	d103      	bne.n	8109b50 <_strtod_l+0xa40>
 8109b48:	f1b9 0f00 	cmp.w	r9, #0
 8109b4c:	f43f ad95 	beq.w	810967a <_strtod_l+0x56a>
 8109b50:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8109ca8 <_strtod_l+0xb98>
 8109b54:	4f60      	ldr	r7, [pc, #384]	; (8109cd8 <_strtod_l+0xbc8>)
 8109b56:	ed8d 7b06 	vstr	d7, [sp, #24]
 8109b5a:	2600      	movs	r6, #0
 8109b5c:	e7ae      	b.n	8109abc <_strtod_l+0x9ac>
 8109b5e:	4f5f      	ldr	r7, [pc, #380]	; (8109cdc <_strtod_l+0xbcc>)
 8109b60:	2600      	movs	r6, #0
 8109b62:	e7a7      	b.n	8109ab4 <_strtod_l+0x9a4>
 8109b64:	4b5d      	ldr	r3, [pc, #372]	; (8109cdc <_strtod_l+0xbcc>)
 8109b66:	4630      	mov	r0, r6
 8109b68:	4639      	mov	r1, r7
 8109b6a:	2200      	movs	r2, #0
 8109b6c:	f7f6 fdcc 	bl	8100708 <__aeabi_dmul>
 8109b70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109b72:	4606      	mov	r6, r0
 8109b74:	460f      	mov	r7, r1
 8109b76:	2b00      	cmp	r3, #0
 8109b78:	d09c      	beq.n	8109ab4 <_strtod_l+0x9a4>
 8109b7a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8109b7e:	e79d      	b.n	8109abc <_strtod_l+0x9ac>
 8109b80:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8109cb0 <_strtod_l+0xba0>
 8109b84:	ed8d 7b06 	vstr	d7, [sp, #24]
 8109b88:	ec57 6b17 	vmov	r6, r7, d7
 8109b8c:	e796      	b.n	8109abc <_strtod_l+0x9ac>
 8109b8e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8109b92:	9b04      	ldr	r3, [sp, #16]
 8109b94:	46ca      	mov	sl, r9
 8109b96:	2b00      	cmp	r3, #0
 8109b98:	d1c2      	bne.n	8109b20 <_strtod_l+0xa10>
 8109b9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8109b9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109ba0:	0d1b      	lsrs	r3, r3, #20
 8109ba2:	051b      	lsls	r3, r3, #20
 8109ba4:	429a      	cmp	r2, r3
 8109ba6:	d1bb      	bne.n	8109b20 <_strtod_l+0xa10>
 8109ba8:	4630      	mov	r0, r6
 8109baa:	4639      	mov	r1, r7
 8109bac:	f7f7 f90c 	bl	8100dc8 <__aeabi_d2lz>
 8109bb0:	f7f6 fd7c 	bl	81006ac <__aeabi_l2d>
 8109bb4:	4602      	mov	r2, r0
 8109bb6:	460b      	mov	r3, r1
 8109bb8:	4630      	mov	r0, r6
 8109bba:	4639      	mov	r1, r7
 8109bbc:	f7f6 fbec 	bl	8100398 <__aeabi_dsub>
 8109bc0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8109bc2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8109bc6:	ea43 0308 	orr.w	r3, r3, r8
 8109bca:	4313      	orrs	r3, r2
 8109bcc:	4606      	mov	r6, r0
 8109bce:	460f      	mov	r7, r1
 8109bd0:	d054      	beq.n	8109c7c <_strtod_l+0xb6c>
 8109bd2:	a339      	add	r3, pc, #228	; (adr r3, 8109cb8 <_strtod_l+0xba8>)
 8109bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109bd8:	f7f7 f808 	bl	8100bec <__aeabi_dcmplt>
 8109bdc:	2800      	cmp	r0, #0
 8109bde:	f47f ace5 	bne.w	81095ac <_strtod_l+0x49c>
 8109be2:	a337      	add	r3, pc, #220	; (adr r3, 8109cc0 <_strtod_l+0xbb0>)
 8109be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109be8:	4630      	mov	r0, r6
 8109bea:	4639      	mov	r1, r7
 8109bec:	f7f7 f81c 	bl	8100c28 <__aeabi_dcmpgt>
 8109bf0:	2800      	cmp	r0, #0
 8109bf2:	d095      	beq.n	8109b20 <_strtod_l+0xa10>
 8109bf4:	e4da      	b.n	81095ac <_strtod_l+0x49c>
 8109bf6:	9b04      	ldr	r3, [sp, #16]
 8109bf8:	b333      	cbz	r3, 8109c48 <_strtod_l+0xb38>
 8109bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8109bfc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8109c00:	d822      	bhi.n	8109c48 <_strtod_l+0xb38>
 8109c02:	a331      	add	r3, pc, #196	; (adr r3, 8109cc8 <_strtod_l+0xbb8>)
 8109c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c08:	4630      	mov	r0, r6
 8109c0a:	4639      	mov	r1, r7
 8109c0c:	f7f6 fff8 	bl	8100c00 <__aeabi_dcmple>
 8109c10:	b1a0      	cbz	r0, 8109c3c <_strtod_l+0xb2c>
 8109c12:	4639      	mov	r1, r7
 8109c14:	4630      	mov	r0, r6
 8109c16:	f7f7 f84f 	bl	8100cb8 <__aeabi_d2uiz>
 8109c1a:	2801      	cmp	r0, #1
 8109c1c:	bf38      	it	cc
 8109c1e:	2001      	movcc	r0, #1
 8109c20:	f7f6 fcf8 	bl	8100614 <__aeabi_ui2d>
 8109c24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8109c26:	4606      	mov	r6, r0
 8109c28:	460f      	mov	r7, r1
 8109c2a:	bb23      	cbnz	r3, 8109c76 <_strtod_l+0xb66>
 8109c2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8109c30:	9010      	str	r0, [sp, #64]	; 0x40
 8109c32:	9311      	str	r3, [sp, #68]	; 0x44
 8109c34:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8109c38:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8109c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8109c3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8109c40:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8109c44:	1a9b      	subs	r3, r3, r2
 8109c46:	930f      	str	r3, [sp, #60]	; 0x3c
 8109c48:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8109c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8109c50:	eef0 0a68 	vmov.f32	s1, s17
 8109c54:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8109c58:	f7ff f8fc 	bl	8108e54 <__ulp>
 8109c5c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8109c60:	ec53 2b10 	vmov	r2, r3, d0
 8109c64:	f7f6 fd50 	bl	8100708 <__aeabi_dmul>
 8109c68:	ec53 2b18 	vmov	r2, r3, d8
 8109c6c:	f7f6 fb96 	bl	810039c <__adddf3>
 8109c70:	4680      	mov	r8, r0
 8109c72:	4689      	mov	r9, r1
 8109c74:	e78d      	b.n	8109b92 <_strtod_l+0xa82>
 8109c76:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8109c7a:	e7db      	b.n	8109c34 <_strtod_l+0xb24>
 8109c7c:	a314      	add	r3, pc, #80	; (adr r3, 8109cd0 <_strtod_l+0xbc0>)
 8109c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8109c82:	f7f6 ffb3 	bl	8100bec <__aeabi_dcmplt>
 8109c86:	e7b3      	b.n	8109bf0 <_strtod_l+0xae0>
 8109c88:	2300      	movs	r3, #0
 8109c8a:	930a      	str	r3, [sp, #40]	; 0x28
 8109c8c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8109c8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8109c90:	6013      	str	r3, [r2, #0]
 8109c92:	f7ff ba7c 	b.w	810918e <_strtod_l+0x7e>
 8109c96:	2a65      	cmp	r2, #101	; 0x65
 8109c98:	f43f ab75 	beq.w	8109386 <_strtod_l+0x276>
 8109c9c:	2a45      	cmp	r2, #69	; 0x45
 8109c9e:	f43f ab72 	beq.w	8109386 <_strtod_l+0x276>
 8109ca2:	2301      	movs	r3, #1
 8109ca4:	f7ff bbaa 	b.w	81093fc <_strtod_l+0x2ec>
 8109ca8:	00000000 	.word	0x00000000
 8109cac:	bff00000 	.word	0xbff00000
 8109cb0:	00000000 	.word	0x00000000
 8109cb4:	3ff00000 	.word	0x3ff00000
 8109cb8:	94a03595 	.word	0x94a03595
 8109cbc:	3fdfffff 	.word	0x3fdfffff
 8109cc0:	35afe535 	.word	0x35afe535
 8109cc4:	3fe00000 	.word	0x3fe00000
 8109cc8:	ffc00000 	.word	0xffc00000
 8109ccc:	41dfffff 	.word	0x41dfffff
 8109cd0:	94a03595 	.word	0x94a03595
 8109cd4:	3fcfffff 	.word	0x3fcfffff
 8109cd8:	3ff00000 	.word	0x3ff00000
 8109cdc:	3fe00000 	.word	0x3fe00000
 8109ce0:	7ff00000 	.word	0x7ff00000
 8109ce4:	7fe00000 	.word	0x7fe00000
 8109ce8:	7c9fffff 	.word	0x7c9fffff
 8109cec:	7fefffff 	.word	0x7fefffff

08109cf0 <_strtod_r>:
 8109cf0:	4b01      	ldr	r3, [pc, #4]	; (8109cf8 <_strtod_r+0x8>)
 8109cf2:	f7ff ba0d 	b.w	8109110 <_strtod_l>
 8109cf6:	bf00      	nop
 8109cf8:	10000078 	.word	0x10000078

08109cfc <_strtol_l.constprop.0>:
 8109cfc:	2b01      	cmp	r3, #1
 8109cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109d02:	d001      	beq.n	8109d08 <_strtol_l.constprop.0+0xc>
 8109d04:	2b24      	cmp	r3, #36	; 0x24
 8109d06:	d906      	bls.n	8109d16 <_strtol_l.constprop.0+0x1a>
 8109d08:	f7fd fd88 	bl	810781c <__errno>
 8109d0c:	2316      	movs	r3, #22
 8109d0e:	6003      	str	r3, [r0, #0]
 8109d10:	2000      	movs	r0, #0
 8109d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109d16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8109dfc <_strtol_l.constprop.0+0x100>
 8109d1a:	460d      	mov	r5, r1
 8109d1c:	462e      	mov	r6, r5
 8109d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109d22:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8109d26:	f017 0708 	ands.w	r7, r7, #8
 8109d2a:	d1f7      	bne.n	8109d1c <_strtol_l.constprop.0+0x20>
 8109d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8109d2e:	d132      	bne.n	8109d96 <_strtol_l.constprop.0+0x9a>
 8109d30:	782c      	ldrb	r4, [r5, #0]
 8109d32:	2701      	movs	r7, #1
 8109d34:	1cb5      	adds	r5, r6, #2
 8109d36:	2b00      	cmp	r3, #0
 8109d38:	d05b      	beq.n	8109df2 <_strtol_l.constprop.0+0xf6>
 8109d3a:	2b10      	cmp	r3, #16
 8109d3c:	d109      	bne.n	8109d52 <_strtol_l.constprop.0+0x56>
 8109d3e:	2c30      	cmp	r4, #48	; 0x30
 8109d40:	d107      	bne.n	8109d52 <_strtol_l.constprop.0+0x56>
 8109d42:	782c      	ldrb	r4, [r5, #0]
 8109d44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8109d48:	2c58      	cmp	r4, #88	; 0x58
 8109d4a:	d14d      	bne.n	8109de8 <_strtol_l.constprop.0+0xec>
 8109d4c:	786c      	ldrb	r4, [r5, #1]
 8109d4e:	2310      	movs	r3, #16
 8109d50:	3502      	adds	r5, #2
 8109d52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8109d56:	f108 38ff 	add.w	r8, r8, #4294967295
 8109d5a:	f04f 0e00 	mov.w	lr, #0
 8109d5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8109d62:	4676      	mov	r6, lr
 8109d64:	fb03 8a19 	mls	sl, r3, r9, r8
 8109d68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8109d6c:	f1bc 0f09 	cmp.w	ip, #9
 8109d70:	d816      	bhi.n	8109da0 <_strtol_l.constprop.0+0xa4>
 8109d72:	4664      	mov	r4, ip
 8109d74:	42a3      	cmp	r3, r4
 8109d76:	dd24      	ble.n	8109dc2 <_strtol_l.constprop.0+0xc6>
 8109d78:	f1be 3fff 	cmp.w	lr, #4294967295
 8109d7c:	d008      	beq.n	8109d90 <_strtol_l.constprop.0+0x94>
 8109d7e:	45b1      	cmp	r9, r6
 8109d80:	d31c      	bcc.n	8109dbc <_strtol_l.constprop.0+0xc0>
 8109d82:	d101      	bne.n	8109d88 <_strtol_l.constprop.0+0x8c>
 8109d84:	45a2      	cmp	sl, r4
 8109d86:	db19      	blt.n	8109dbc <_strtol_l.constprop.0+0xc0>
 8109d88:	fb06 4603 	mla	r6, r6, r3, r4
 8109d8c:	f04f 0e01 	mov.w	lr, #1
 8109d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8109d94:	e7e8      	b.n	8109d68 <_strtol_l.constprop.0+0x6c>
 8109d96:	2c2b      	cmp	r4, #43	; 0x2b
 8109d98:	bf04      	itt	eq
 8109d9a:	782c      	ldrbeq	r4, [r5, #0]
 8109d9c:	1cb5      	addeq	r5, r6, #2
 8109d9e:	e7ca      	b.n	8109d36 <_strtol_l.constprop.0+0x3a>
 8109da0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8109da4:	f1bc 0f19 	cmp.w	ip, #25
 8109da8:	d801      	bhi.n	8109dae <_strtol_l.constprop.0+0xb2>
 8109daa:	3c37      	subs	r4, #55	; 0x37
 8109dac:	e7e2      	b.n	8109d74 <_strtol_l.constprop.0+0x78>
 8109dae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8109db2:	f1bc 0f19 	cmp.w	ip, #25
 8109db6:	d804      	bhi.n	8109dc2 <_strtol_l.constprop.0+0xc6>
 8109db8:	3c57      	subs	r4, #87	; 0x57
 8109dba:	e7db      	b.n	8109d74 <_strtol_l.constprop.0+0x78>
 8109dbc:	f04f 3eff 	mov.w	lr, #4294967295
 8109dc0:	e7e6      	b.n	8109d90 <_strtol_l.constprop.0+0x94>
 8109dc2:	f1be 3fff 	cmp.w	lr, #4294967295
 8109dc6:	d105      	bne.n	8109dd4 <_strtol_l.constprop.0+0xd8>
 8109dc8:	2322      	movs	r3, #34	; 0x22
 8109dca:	6003      	str	r3, [r0, #0]
 8109dcc:	4646      	mov	r6, r8
 8109dce:	b942      	cbnz	r2, 8109de2 <_strtol_l.constprop.0+0xe6>
 8109dd0:	4630      	mov	r0, r6
 8109dd2:	e79e      	b.n	8109d12 <_strtol_l.constprop.0+0x16>
 8109dd4:	b107      	cbz	r7, 8109dd8 <_strtol_l.constprop.0+0xdc>
 8109dd6:	4276      	negs	r6, r6
 8109dd8:	2a00      	cmp	r2, #0
 8109dda:	d0f9      	beq.n	8109dd0 <_strtol_l.constprop.0+0xd4>
 8109ddc:	f1be 0f00 	cmp.w	lr, #0
 8109de0:	d000      	beq.n	8109de4 <_strtol_l.constprop.0+0xe8>
 8109de2:	1e69      	subs	r1, r5, #1
 8109de4:	6011      	str	r1, [r2, #0]
 8109de6:	e7f3      	b.n	8109dd0 <_strtol_l.constprop.0+0xd4>
 8109de8:	2430      	movs	r4, #48	; 0x30
 8109dea:	2b00      	cmp	r3, #0
 8109dec:	d1b1      	bne.n	8109d52 <_strtol_l.constprop.0+0x56>
 8109dee:	2308      	movs	r3, #8
 8109df0:	e7af      	b.n	8109d52 <_strtol_l.constprop.0+0x56>
 8109df2:	2c30      	cmp	r4, #48	; 0x30
 8109df4:	d0a5      	beq.n	8109d42 <_strtol_l.constprop.0+0x46>
 8109df6:	230a      	movs	r3, #10
 8109df8:	e7ab      	b.n	8109d52 <_strtol_l.constprop.0+0x56>
 8109dfa:	bf00      	nop
 8109dfc:	0810b239 	.word	0x0810b239

08109e00 <_strtol_r>:
 8109e00:	f7ff bf7c 	b.w	8109cfc <_strtol_l.constprop.0>

08109e04 <__ssputs_r>:
 8109e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8109e08:	688e      	ldr	r6, [r1, #8]
 8109e0a:	461f      	mov	r7, r3
 8109e0c:	42be      	cmp	r6, r7
 8109e0e:	680b      	ldr	r3, [r1, #0]
 8109e10:	4682      	mov	sl, r0
 8109e12:	460c      	mov	r4, r1
 8109e14:	4690      	mov	r8, r2
 8109e16:	d82c      	bhi.n	8109e72 <__ssputs_r+0x6e>
 8109e18:	898a      	ldrh	r2, [r1, #12]
 8109e1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8109e1e:	d026      	beq.n	8109e6e <__ssputs_r+0x6a>
 8109e20:	6965      	ldr	r5, [r4, #20]
 8109e22:	6909      	ldr	r1, [r1, #16]
 8109e24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8109e28:	eba3 0901 	sub.w	r9, r3, r1
 8109e2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8109e30:	1c7b      	adds	r3, r7, #1
 8109e32:	444b      	add	r3, r9
 8109e34:	106d      	asrs	r5, r5, #1
 8109e36:	429d      	cmp	r5, r3
 8109e38:	bf38      	it	cc
 8109e3a:	461d      	movcc	r5, r3
 8109e3c:	0553      	lsls	r3, r2, #21
 8109e3e:	d527      	bpl.n	8109e90 <__ssputs_r+0x8c>
 8109e40:	4629      	mov	r1, r5
 8109e42:	f7fe fc0f 	bl	8108664 <_malloc_r>
 8109e46:	4606      	mov	r6, r0
 8109e48:	b360      	cbz	r0, 8109ea4 <__ssputs_r+0xa0>
 8109e4a:	6921      	ldr	r1, [r4, #16]
 8109e4c:	464a      	mov	r2, r9
 8109e4e:	f000 fbe3 	bl	810a618 <memcpy>
 8109e52:	89a3      	ldrh	r3, [r4, #12]
 8109e54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8109e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8109e5c:	81a3      	strh	r3, [r4, #12]
 8109e5e:	6126      	str	r6, [r4, #16]
 8109e60:	6165      	str	r5, [r4, #20]
 8109e62:	444e      	add	r6, r9
 8109e64:	eba5 0509 	sub.w	r5, r5, r9
 8109e68:	6026      	str	r6, [r4, #0]
 8109e6a:	60a5      	str	r5, [r4, #8]
 8109e6c:	463e      	mov	r6, r7
 8109e6e:	42be      	cmp	r6, r7
 8109e70:	d900      	bls.n	8109e74 <__ssputs_r+0x70>
 8109e72:	463e      	mov	r6, r7
 8109e74:	6820      	ldr	r0, [r4, #0]
 8109e76:	4632      	mov	r2, r6
 8109e78:	4641      	mov	r1, r8
 8109e7a:	f000 fb6f 	bl	810a55c <memmove>
 8109e7e:	68a3      	ldr	r3, [r4, #8]
 8109e80:	1b9b      	subs	r3, r3, r6
 8109e82:	60a3      	str	r3, [r4, #8]
 8109e84:	6823      	ldr	r3, [r4, #0]
 8109e86:	4433      	add	r3, r6
 8109e88:	6023      	str	r3, [r4, #0]
 8109e8a:	2000      	movs	r0, #0
 8109e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8109e90:	462a      	mov	r2, r5
 8109e92:	f000 ff76 	bl	810ad82 <_realloc_r>
 8109e96:	4606      	mov	r6, r0
 8109e98:	2800      	cmp	r0, #0
 8109e9a:	d1e0      	bne.n	8109e5e <__ssputs_r+0x5a>
 8109e9c:	6921      	ldr	r1, [r4, #16]
 8109e9e:	4650      	mov	r0, sl
 8109ea0:	f7fe fb6c 	bl	810857c <_free_r>
 8109ea4:	230c      	movs	r3, #12
 8109ea6:	f8ca 3000 	str.w	r3, [sl]
 8109eaa:	89a3      	ldrh	r3, [r4, #12]
 8109eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8109eb0:	81a3      	strh	r3, [r4, #12]
 8109eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8109eb6:	e7e9      	b.n	8109e8c <__ssputs_r+0x88>

08109eb8 <_svfiprintf_r>:
 8109eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109ebc:	4698      	mov	r8, r3
 8109ebe:	898b      	ldrh	r3, [r1, #12]
 8109ec0:	061b      	lsls	r3, r3, #24
 8109ec2:	b09d      	sub	sp, #116	; 0x74
 8109ec4:	4607      	mov	r7, r0
 8109ec6:	460d      	mov	r5, r1
 8109ec8:	4614      	mov	r4, r2
 8109eca:	d50e      	bpl.n	8109eea <_svfiprintf_r+0x32>
 8109ecc:	690b      	ldr	r3, [r1, #16]
 8109ece:	b963      	cbnz	r3, 8109eea <_svfiprintf_r+0x32>
 8109ed0:	2140      	movs	r1, #64	; 0x40
 8109ed2:	f7fe fbc7 	bl	8108664 <_malloc_r>
 8109ed6:	6028      	str	r0, [r5, #0]
 8109ed8:	6128      	str	r0, [r5, #16]
 8109eda:	b920      	cbnz	r0, 8109ee6 <_svfiprintf_r+0x2e>
 8109edc:	230c      	movs	r3, #12
 8109ede:	603b      	str	r3, [r7, #0]
 8109ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8109ee4:	e0d0      	b.n	810a088 <_svfiprintf_r+0x1d0>
 8109ee6:	2340      	movs	r3, #64	; 0x40
 8109ee8:	616b      	str	r3, [r5, #20]
 8109eea:	2300      	movs	r3, #0
 8109eec:	9309      	str	r3, [sp, #36]	; 0x24
 8109eee:	2320      	movs	r3, #32
 8109ef0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8109ef4:	f8cd 800c 	str.w	r8, [sp, #12]
 8109ef8:	2330      	movs	r3, #48	; 0x30
 8109efa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 810a0a0 <_svfiprintf_r+0x1e8>
 8109efe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8109f02:	f04f 0901 	mov.w	r9, #1
 8109f06:	4623      	mov	r3, r4
 8109f08:	469a      	mov	sl, r3
 8109f0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8109f0e:	b10a      	cbz	r2, 8109f14 <_svfiprintf_r+0x5c>
 8109f10:	2a25      	cmp	r2, #37	; 0x25
 8109f12:	d1f9      	bne.n	8109f08 <_svfiprintf_r+0x50>
 8109f14:	ebba 0b04 	subs.w	fp, sl, r4
 8109f18:	d00b      	beq.n	8109f32 <_svfiprintf_r+0x7a>
 8109f1a:	465b      	mov	r3, fp
 8109f1c:	4622      	mov	r2, r4
 8109f1e:	4629      	mov	r1, r5
 8109f20:	4638      	mov	r0, r7
 8109f22:	f7ff ff6f 	bl	8109e04 <__ssputs_r>
 8109f26:	3001      	adds	r0, #1
 8109f28:	f000 80a9 	beq.w	810a07e <_svfiprintf_r+0x1c6>
 8109f2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8109f2e:	445a      	add	r2, fp
 8109f30:	9209      	str	r2, [sp, #36]	; 0x24
 8109f32:	f89a 3000 	ldrb.w	r3, [sl]
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	f000 80a1 	beq.w	810a07e <_svfiprintf_r+0x1c6>
 8109f3c:	2300      	movs	r3, #0
 8109f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8109f42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109f46:	f10a 0a01 	add.w	sl, sl, #1
 8109f4a:	9304      	str	r3, [sp, #16]
 8109f4c:	9307      	str	r3, [sp, #28]
 8109f4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8109f52:	931a      	str	r3, [sp, #104]	; 0x68
 8109f54:	4654      	mov	r4, sl
 8109f56:	2205      	movs	r2, #5
 8109f58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109f5c:	4850      	ldr	r0, [pc, #320]	; (810a0a0 <_svfiprintf_r+0x1e8>)
 8109f5e:	f7f6 f9bf 	bl	81002e0 <memchr>
 8109f62:	9a04      	ldr	r2, [sp, #16]
 8109f64:	b9d8      	cbnz	r0, 8109f9e <_svfiprintf_r+0xe6>
 8109f66:	06d0      	lsls	r0, r2, #27
 8109f68:	bf44      	itt	mi
 8109f6a:	2320      	movmi	r3, #32
 8109f6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109f70:	0711      	lsls	r1, r2, #28
 8109f72:	bf44      	itt	mi
 8109f74:	232b      	movmi	r3, #43	; 0x2b
 8109f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8109f7a:	f89a 3000 	ldrb.w	r3, [sl]
 8109f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8109f80:	d015      	beq.n	8109fae <_svfiprintf_r+0xf6>
 8109f82:	9a07      	ldr	r2, [sp, #28]
 8109f84:	4654      	mov	r4, sl
 8109f86:	2000      	movs	r0, #0
 8109f88:	f04f 0c0a 	mov.w	ip, #10
 8109f8c:	4621      	mov	r1, r4
 8109f8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109f92:	3b30      	subs	r3, #48	; 0x30
 8109f94:	2b09      	cmp	r3, #9
 8109f96:	d94d      	bls.n	810a034 <_svfiprintf_r+0x17c>
 8109f98:	b1b0      	cbz	r0, 8109fc8 <_svfiprintf_r+0x110>
 8109f9a:	9207      	str	r2, [sp, #28]
 8109f9c:	e014      	b.n	8109fc8 <_svfiprintf_r+0x110>
 8109f9e:	eba0 0308 	sub.w	r3, r0, r8
 8109fa2:	fa09 f303 	lsl.w	r3, r9, r3
 8109fa6:	4313      	orrs	r3, r2
 8109fa8:	9304      	str	r3, [sp, #16]
 8109faa:	46a2      	mov	sl, r4
 8109fac:	e7d2      	b.n	8109f54 <_svfiprintf_r+0x9c>
 8109fae:	9b03      	ldr	r3, [sp, #12]
 8109fb0:	1d19      	adds	r1, r3, #4
 8109fb2:	681b      	ldr	r3, [r3, #0]
 8109fb4:	9103      	str	r1, [sp, #12]
 8109fb6:	2b00      	cmp	r3, #0
 8109fb8:	bfbb      	ittet	lt
 8109fba:	425b      	neglt	r3, r3
 8109fbc:	f042 0202 	orrlt.w	r2, r2, #2
 8109fc0:	9307      	strge	r3, [sp, #28]
 8109fc2:	9307      	strlt	r3, [sp, #28]
 8109fc4:	bfb8      	it	lt
 8109fc6:	9204      	strlt	r2, [sp, #16]
 8109fc8:	7823      	ldrb	r3, [r4, #0]
 8109fca:	2b2e      	cmp	r3, #46	; 0x2e
 8109fcc:	d10c      	bne.n	8109fe8 <_svfiprintf_r+0x130>
 8109fce:	7863      	ldrb	r3, [r4, #1]
 8109fd0:	2b2a      	cmp	r3, #42	; 0x2a
 8109fd2:	d134      	bne.n	810a03e <_svfiprintf_r+0x186>
 8109fd4:	9b03      	ldr	r3, [sp, #12]
 8109fd6:	1d1a      	adds	r2, r3, #4
 8109fd8:	681b      	ldr	r3, [r3, #0]
 8109fda:	9203      	str	r2, [sp, #12]
 8109fdc:	2b00      	cmp	r3, #0
 8109fde:	bfb8      	it	lt
 8109fe0:	f04f 33ff 	movlt.w	r3, #4294967295
 8109fe4:	3402      	adds	r4, #2
 8109fe6:	9305      	str	r3, [sp, #20]
 8109fe8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 810a0b0 <_svfiprintf_r+0x1f8>
 8109fec:	7821      	ldrb	r1, [r4, #0]
 8109fee:	2203      	movs	r2, #3
 8109ff0:	4650      	mov	r0, sl
 8109ff2:	f7f6 f975 	bl	81002e0 <memchr>
 8109ff6:	b138      	cbz	r0, 810a008 <_svfiprintf_r+0x150>
 8109ff8:	9b04      	ldr	r3, [sp, #16]
 8109ffa:	eba0 000a 	sub.w	r0, r0, sl
 8109ffe:	2240      	movs	r2, #64	; 0x40
 810a000:	4082      	lsls	r2, r0
 810a002:	4313      	orrs	r3, r2
 810a004:	3401      	adds	r4, #1
 810a006:	9304      	str	r3, [sp, #16]
 810a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a00c:	4825      	ldr	r0, [pc, #148]	; (810a0a4 <_svfiprintf_r+0x1ec>)
 810a00e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a012:	2206      	movs	r2, #6
 810a014:	f7f6 f964 	bl	81002e0 <memchr>
 810a018:	2800      	cmp	r0, #0
 810a01a:	d038      	beq.n	810a08e <_svfiprintf_r+0x1d6>
 810a01c:	4b22      	ldr	r3, [pc, #136]	; (810a0a8 <_svfiprintf_r+0x1f0>)
 810a01e:	bb1b      	cbnz	r3, 810a068 <_svfiprintf_r+0x1b0>
 810a020:	9b03      	ldr	r3, [sp, #12]
 810a022:	3307      	adds	r3, #7
 810a024:	f023 0307 	bic.w	r3, r3, #7
 810a028:	3308      	adds	r3, #8
 810a02a:	9303      	str	r3, [sp, #12]
 810a02c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a02e:	4433      	add	r3, r6
 810a030:	9309      	str	r3, [sp, #36]	; 0x24
 810a032:	e768      	b.n	8109f06 <_svfiprintf_r+0x4e>
 810a034:	fb0c 3202 	mla	r2, ip, r2, r3
 810a038:	460c      	mov	r4, r1
 810a03a:	2001      	movs	r0, #1
 810a03c:	e7a6      	b.n	8109f8c <_svfiprintf_r+0xd4>
 810a03e:	2300      	movs	r3, #0
 810a040:	3401      	adds	r4, #1
 810a042:	9305      	str	r3, [sp, #20]
 810a044:	4619      	mov	r1, r3
 810a046:	f04f 0c0a 	mov.w	ip, #10
 810a04a:	4620      	mov	r0, r4
 810a04c:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a050:	3a30      	subs	r2, #48	; 0x30
 810a052:	2a09      	cmp	r2, #9
 810a054:	d903      	bls.n	810a05e <_svfiprintf_r+0x1a6>
 810a056:	2b00      	cmp	r3, #0
 810a058:	d0c6      	beq.n	8109fe8 <_svfiprintf_r+0x130>
 810a05a:	9105      	str	r1, [sp, #20]
 810a05c:	e7c4      	b.n	8109fe8 <_svfiprintf_r+0x130>
 810a05e:	fb0c 2101 	mla	r1, ip, r1, r2
 810a062:	4604      	mov	r4, r0
 810a064:	2301      	movs	r3, #1
 810a066:	e7f0      	b.n	810a04a <_svfiprintf_r+0x192>
 810a068:	ab03      	add	r3, sp, #12
 810a06a:	9300      	str	r3, [sp, #0]
 810a06c:	462a      	mov	r2, r5
 810a06e:	4b0f      	ldr	r3, [pc, #60]	; (810a0ac <_svfiprintf_r+0x1f4>)
 810a070:	a904      	add	r1, sp, #16
 810a072:	4638      	mov	r0, r7
 810a074:	f7fc fb82 	bl	810677c <_printf_float>
 810a078:	1c42      	adds	r2, r0, #1
 810a07a:	4606      	mov	r6, r0
 810a07c:	d1d6      	bne.n	810a02c <_svfiprintf_r+0x174>
 810a07e:	89ab      	ldrh	r3, [r5, #12]
 810a080:	065b      	lsls	r3, r3, #25
 810a082:	f53f af2d 	bmi.w	8109ee0 <_svfiprintf_r+0x28>
 810a086:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a088:	b01d      	add	sp, #116	; 0x74
 810a08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a08e:	ab03      	add	r3, sp, #12
 810a090:	9300      	str	r3, [sp, #0]
 810a092:	462a      	mov	r2, r5
 810a094:	4b05      	ldr	r3, [pc, #20]	; (810a0ac <_svfiprintf_r+0x1f4>)
 810a096:	a904      	add	r1, sp, #16
 810a098:	4638      	mov	r0, r7
 810a09a:	f7fc fe13 	bl	8106cc4 <_printf_i>
 810a09e:	e7eb      	b.n	810a078 <_svfiprintf_r+0x1c0>
 810a0a0:	0810b339 	.word	0x0810b339
 810a0a4:	0810b343 	.word	0x0810b343
 810a0a8:	0810677d 	.word	0x0810677d
 810a0ac:	08109e05 	.word	0x08109e05
 810a0b0:	0810b33f 	.word	0x0810b33f

0810a0b4 <__sfputc_r>:
 810a0b4:	6893      	ldr	r3, [r2, #8]
 810a0b6:	3b01      	subs	r3, #1
 810a0b8:	2b00      	cmp	r3, #0
 810a0ba:	b410      	push	{r4}
 810a0bc:	6093      	str	r3, [r2, #8]
 810a0be:	da08      	bge.n	810a0d2 <__sfputc_r+0x1e>
 810a0c0:	6994      	ldr	r4, [r2, #24]
 810a0c2:	42a3      	cmp	r3, r4
 810a0c4:	db01      	blt.n	810a0ca <__sfputc_r+0x16>
 810a0c6:	290a      	cmp	r1, #10
 810a0c8:	d103      	bne.n	810a0d2 <__sfputc_r+0x1e>
 810a0ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a0ce:	f7fd babe 	b.w	810764e <__swbuf_r>
 810a0d2:	6813      	ldr	r3, [r2, #0]
 810a0d4:	1c58      	adds	r0, r3, #1
 810a0d6:	6010      	str	r0, [r2, #0]
 810a0d8:	7019      	strb	r1, [r3, #0]
 810a0da:	4608      	mov	r0, r1
 810a0dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 810a0e0:	4770      	bx	lr

0810a0e2 <__sfputs_r>:
 810a0e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810a0e4:	4606      	mov	r6, r0
 810a0e6:	460f      	mov	r7, r1
 810a0e8:	4614      	mov	r4, r2
 810a0ea:	18d5      	adds	r5, r2, r3
 810a0ec:	42ac      	cmp	r4, r5
 810a0ee:	d101      	bne.n	810a0f4 <__sfputs_r+0x12>
 810a0f0:	2000      	movs	r0, #0
 810a0f2:	e007      	b.n	810a104 <__sfputs_r+0x22>
 810a0f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a0f8:	463a      	mov	r2, r7
 810a0fa:	4630      	mov	r0, r6
 810a0fc:	f7ff ffda 	bl	810a0b4 <__sfputc_r>
 810a100:	1c43      	adds	r3, r0, #1
 810a102:	d1f3      	bne.n	810a0ec <__sfputs_r+0xa>
 810a104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0810a108 <_vfiprintf_r>:
 810a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a10c:	460d      	mov	r5, r1
 810a10e:	b09d      	sub	sp, #116	; 0x74
 810a110:	4614      	mov	r4, r2
 810a112:	4698      	mov	r8, r3
 810a114:	4606      	mov	r6, r0
 810a116:	b118      	cbz	r0, 810a120 <_vfiprintf_r+0x18>
 810a118:	6a03      	ldr	r3, [r0, #32]
 810a11a:	b90b      	cbnz	r3, 810a120 <_vfiprintf_r+0x18>
 810a11c:	f7fd f990 	bl	8107440 <__sinit>
 810a120:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a122:	07d9      	lsls	r1, r3, #31
 810a124:	d405      	bmi.n	810a132 <_vfiprintf_r+0x2a>
 810a126:	89ab      	ldrh	r3, [r5, #12]
 810a128:	059a      	lsls	r2, r3, #22
 810a12a:	d402      	bmi.n	810a132 <_vfiprintf_r+0x2a>
 810a12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a12e:	f7fd fba0 	bl	8107872 <__retarget_lock_acquire_recursive>
 810a132:	89ab      	ldrh	r3, [r5, #12]
 810a134:	071b      	lsls	r3, r3, #28
 810a136:	d501      	bpl.n	810a13c <_vfiprintf_r+0x34>
 810a138:	692b      	ldr	r3, [r5, #16]
 810a13a:	b99b      	cbnz	r3, 810a164 <_vfiprintf_r+0x5c>
 810a13c:	4629      	mov	r1, r5
 810a13e:	4630      	mov	r0, r6
 810a140:	f7fd fac2 	bl	81076c8 <__swsetup_r>
 810a144:	b170      	cbz	r0, 810a164 <_vfiprintf_r+0x5c>
 810a146:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a148:	07dc      	lsls	r4, r3, #31
 810a14a:	d504      	bpl.n	810a156 <_vfiprintf_r+0x4e>
 810a14c:	f04f 30ff 	mov.w	r0, #4294967295
 810a150:	b01d      	add	sp, #116	; 0x74
 810a152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a156:	89ab      	ldrh	r3, [r5, #12]
 810a158:	0598      	lsls	r0, r3, #22
 810a15a:	d4f7      	bmi.n	810a14c <_vfiprintf_r+0x44>
 810a15c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a15e:	f7fd fb89 	bl	8107874 <__retarget_lock_release_recursive>
 810a162:	e7f3      	b.n	810a14c <_vfiprintf_r+0x44>
 810a164:	2300      	movs	r3, #0
 810a166:	9309      	str	r3, [sp, #36]	; 0x24
 810a168:	2320      	movs	r3, #32
 810a16a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 810a16e:	f8cd 800c 	str.w	r8, [sp, #12]
 810a172:	2330      	movs	r3, #48	; 0x30
 810a174:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 810a328 <_vfiprintf_r+0x220>
 810a178:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 810a17c:	f04f 0901 	mov.w	r9, #1
 810a180:	4623      	mov	r3, r4
 810a182:	469a      	mov	sl, r3
 810a184:	f813 2b01 	ldrb.w	r2, [r3], #1
 810a188:	b10a      	cbz	r2, 810a18e <_vfiprintf_r+0x86>
 810a18a:	2a25      	cmp	r2, #37	; 0x25
 810a18c:	d1f9      	bne.n	810a182 <_vfiprintf_r+0x7a>
 810a18e:	ebba 0b04 	subs.w	fp, sl, r4
 810a192:	d00b      	beq.n	810a1ac <_vfiprintf_r+0xa4>
 810a194:	465b      	mov	r3, fp
 810a196:	4622      	mov	r2, r4
 810a198:	4629      	mov	r1, r5
 810a19a:	4630      	mov	r0, r6
 810a19c:	f7ff ffa1 	bl	810a0e2 <__sfputs_r>
 810a1a0:	3001      	adds	r0, #1
 810a1a2:	f000 80a9 	beq.w	810a2f8 <_vfiprintf_r+0x1f0>
 810a1a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810a1a8:	445a      	add	r2, fp
 810a1aa:	9209      	str	r2, [sp, #36]	; 0x24
 810a1ac:	f89a 3000 	ldrb.w	r3, [sl]
 810a1b0:	2b00      	cmp	r3, #0
 810a1b2:	f000 80a1 	beq.w	810a2f8 <_vfiprintf_r+0x1f0>
 810a1b6:	2300      	movs	r3, #0
 810a1b8:	f04f 32ff 	mov.w	r2, #4294967295
 810a1bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810a1c0:	f10a 0a01 	add.w	sl, sl, #1
 810a1c4:	9304      	str	r3, [sp, #16]
 810a1c6:	9307      	str	r3, [sp, #28]
 810a1c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 810a1cc:	931a      	str	r3, [sp, #104]	; 0x68
 810a1ce:	4654      	mov	r4, sl
 810a1d0:	2205      	movs	r2, #5
 810a1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a1d6:	4854      	ldr	r0, [pc, #336]	; (810a328 <_vfiprintf_r+0x220>)
 810a1d8:	f7f6 f882 	bl	81002e0 <memchr>
 810a1dc:	9a04      	ldr	r2, [sp, #16]
 810a1de:	b9d8      	cbnz	r0, 810a218 <_vfiprintf_r+0x110>
 810a1e0:	06d1      	lsls	r1, r2, #27
 810a1e2:	bf44      	itt	mi
 810a1e4:	2320      	movmi	r3, #32
 810a1e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a1ea:	0713      	lsls	r3, r2, #28
 810a1ec:	bf44      	itt	mi
 810a1ee:	232b      	movmi	r3, #43	; 0x2b
 810a1f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 810a1f4:	f89a 3000 	ldrb.w	r3, [sl]
 810a1f8:	2b2a      	cmp	r3, #42	; 0x2a
 810a1fa:	d015      	beq.n	810a228 <_vfiprintf_r+0x120>
 810a1fc:	9a07      	ldr	r2, [sp, #28]
 810a1fe:	4654      	mov	r4, sl
 810a200:	2000      	movs	r0, #0
 810a202:	f04f 0c0a 	mov.w	ip, #10
 810a206:	4621      	mov	r1, r4
 810a208:	f811 3b01 	ldrb.w	r3, [r1], #1
 810a20c:	3b30      	subs	r3, #48	; 0x30
 810a20e:	2b09      	cmp	r3, #9
 810a210:	d94d      	bls.n	810a2ae <_vfiprintf_r+0x1a6>
 810a212:	b1b0      	cbz	r0, 810a242 <_vfiprintf_r+0x13a>
 810a214:	9207      	str	r2, [sp, #28]
 810a216:	e014      	b.n	810a242 <_vfiprintf_r+0x13a>
 810a218:	eba0 0308 	sub.w	r3, r0, r8
 810a21c:	fa09 f303 	lsl.w	r3, r9, r3
 810a220:	4313      	orrs	r3, r2
 810a222:	9304      	str	r3, [sp, #16]
 810a224:	46a2      	mov	sl, r4
 810a226:	e7d2      	b.n	810a1ce <_vfiprintf_r+0xc6>
 810a228:	9b03      	ldr	r3, [sp, #12]
 810a22a:	1d19      	adds	r1, r3, #4
 810a22c:	681b      	ldr	r3, [r3, #0]
 810a22e:	9103      	str	r1, [sp, #12]
 810a230:	2b00      	cmp	r3, #0
 810a232:	bfbb      	ittet	lt
 810a234:	425b      	neglt	r3, r3
 810a236:	f042 0202 	orrlt.w	r2, r2, #2
 810a23a:	9307      	strge	r3, [sp, #28]
 810a23c:	9307      	strlt	r3, [sp, #28]
 810a23e:	bfb8      	it	lt
 810a240:	9204      	strlt	r2, [sp, #16]
 810a242:	7823      	ldrb	r3, [r4, #0]
 810a244:	2b2e      	cmp	r3, #46	; 0x2e
 810a246:	d10c      	bne.n	810a262 <_vfiprintf_r+0x15a>
 810a248:	7863      	ldrb	r3, [r4, #1]
 810a24a:	2b2a      	cmp	r3, #42	; 0x2a
 810a24c:	d134      	bne.n	810a2b8 <_vfiprintf_r+0x1b0>
 810a24e:	9b03      	ldr	r3, [sp, #12]
 810a250:	1d1a      	adds	r2, r3, #4
 810a252:	681b      	ldr	r3, [r3, #0]
 810a254:	9203      	str	r2, [sp, #12]
 810a256:	2b00      	cmp	r3, #0
 810a258:	bfb8      	it	lt
 810a25a:	f04f 33ff 	movlt.w	r3, #4294967295
 810a25e:	3402      	adds	r4, #2
 810a260:	9305      	str	r3, [sp, #20]
 810a262:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 810a338 <_vfiprintf_r+0x230>
 810a266:	7821      	ldrb	r1, [r4, #0]
 810a268:	2203      	movs	r2, #3
 810a26a:	4650      	mov	r0, sl
 810a26c:	f7f6 f838 	bl	81002e0 <memchr>
 810a270:	b138      	cbz	r0, 810a282 <_vfiprintf_r+0x17a>
 810a272:	9b04      	ldr	r3, [sp, #16]
 810a274:	eba0 000a 	sub.w	r0, r0, sl
 810a278:	2240      	movs	r2, #64	; 0x40
 810a27a:	4082      	lsls	r2, r0
 810a27c:	4313      	orrs	r3, r2
 810a27e:	3401      	adds	r4, #1
 810a280:	9304      	str	r3, [sp, #16]
 810a282:	f814 1b01 	ldrb.w	r1, [r4], #1
 810a286:	4829      	ldr	r0, [pc, #164]	; (810a32c <_vfiprintf_r+0x224>)
 810a288:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 810a28c:	2206      	movs	r2, #6
 810a28e:	f7f6 f827 	bl	81002e0 <memchr>
 810a292:	2800      	cmp	r0, #0
 810a294:	d03f      	beq.n	810a316 <_vfiprintf_r+0x20e>
 810a296:	4b26      	ldr	r3, [pc, #152]	; (810a330 <_vfiprintf_r+0x228>)
 810a298:	bb1b      	cbnz	r3, 810a2e2 <_vfiprintf_r+0x1da>
 810a29a:	9b03      	ldr	r3, [sp, #12]
 810a29c:	3307      	adds	r3, #7
 810a29e:	f023 0307 	bic.w	r3, r3, #7
 810a2a2:	3308      	adds	r3, #8
 810a2a4:	9303      	str	r3, [sp, #12]
 810a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810a2a8:	443b      	add	r3, r7
 810a2aa:	9309      	str	r3, [sp, #36]	; 0x24
 810a2ac:	e768      	b.n	810a180 <_vfiprintf_r+0x78>
 810a2ae:	fb0c 3202 	mla	r2, ip, r2, r3
 810a2b2:	460c      	mov	r4, r1
 810a2b4:	2001      	movs	r0, #1
 810a2b6:	e7a6      	b.n	810a206 <_vfiprintf_r+0xfe>
 810a2b8:	2300      	movs	r3, #0
 810a2ba:	3401      	adds	r4, #1
 810a2bc:	9305      	str	r3, [sp, #20]
 810a2be:	4619      	mov	r1, r3
 810a2c0:	f04f 0c0a 	mov.w	ip, #10
 810a2c4:	4620      	mov	r0, r4
 810a2c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a2ca:	3a30      	subs	r2, #48	; 0x30
 810a2cc:	2a09      	cmp	r2, #9
 810a2ce:	d903      	bls.n	810a2d8 <_vfiprintf_r+0x1d0>
 810a2d0:	2b00      	cmp	r3, #0
 810a2d2:	d0c6      	beq.n	810a262 <_vfiprintf_r+0x15a>
 810a2d4:	9105      	str	r1, [sp, #20]
 810a2d6:	e7c4      	b.n	810a262 <_vfiprintf_r+0x15a>
 810a2d8:	fb0c 2101 	mla	r1, ip, r1, r2
 810a2dc:	4604      	mov	r4, r0
 810a2de:	2301      	movs	r3, #1
 810a2e0:	e7f0      	b.n	810a2c4 <_vfiprintf_r+0x1bc>
 810a2e2:	ab03      	add	r3, sp, #12
 810a2e4:	9300      	str	r3, [sp, #0]
 810a2e6:	462a      	mov	r2, r5
 810a2e8:	4b12      	ldr	r3, [pc, #72]	; (810a334 <_vfiprintf_r+0x22c>)
 810a2ea:	a904      	add	r1, sp, #16
 810a2ec:	4630      	mov	r0, r6
 810a2ee:	f7fc fa45 	bl	810677c <_printf_float>
 810a2f2:	4607      	mov	r7, r0
 810a2f4:	1c78      	adds	r0, r7, #1
 810a2f6:	d1d6      	bne.n	810a2a6 <_vfiprintf_r+0x19e>
 810a2f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 810a2fa:	07d9      	lsls	r1, r3, #31
 810a2fc:	d405      	bmi.n	810a30a <_vfiprintf_r+0x202>
 810a2fe:	89ab      	ldrh	r3, [r5, #12]
 810a300:	059a      	lsls	r2, r3, #22
 810a302:	d402      	bmi.n	810a30a <_vfiprintf_r+0x202>
 810a304:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810a306:	f7fd fab5 	bl	8107874 <__retarget_lock_release_recursive>
 810a30a:	89ab      	ldrh	r3, [r5, #12]
 810a30c:	065b      	lsls	r3, r3, #25
 810a30e:	f53f af1d 	bmi.w	810a14c <_vfiprintf_r+0x44>
 810a312:	9809      	ldr	r0, [sp, #36]	; 0x24
 810a314:	e71c      	b.n	810a150 <_vfiprintf_r+0x48>
 810a316:	ab03      	add	r3, sp, #12
 810a318:	9300      	str	r3, [sp, #0]
 810a31a:	462a      	mov	r2, r5
 810a31c:	4b05      	ldr	r3, [pc, #20]	; (810a334 <_vfiprintf_r+0x22c>)
 810a31e:	a904      	add	r1, sp, #16
 810a320:	4630      	mov	r0, r6
 810a322:	f7fc fccf 	bl	8106cc4 <_printf_i>
 810a326:	e7e4      	b.n	810a2f2 <_vfiprintf_r+0x1ea>
 810a328:	0810b339 	.word	0x0810b339
 810a32c:	0810b343 	.word	0x0810b343
 810a330:	0810677d 	.word	0x0810677d
 810a334:	0810a0e3 	.word	0x0810a0e3
 810a338:	0810b33f 	.word	0x0810b33f

0810a33c <__sflush_r>:
 810a33c:	898a      	ldrh	r2, [r1, #12]
 810a33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810a342:	4605      	mov	r5, r0
 810a344:	0710      	lsls	r0, r2, #28
 810a346:	460c      	mov	r4, r1
 810a348:	d458      	bmi.n	810a3fc <__sflush_r+0xc0>
 810a34a:	684b      	ldr	r3, [r1, #4]
 810a34c:	2b00      	cmp	r3, #0
 810a34e:	dc05      	bgt.n	810a35c <__sflush_r+0x20>
 810a350:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 810a352:	2b00      	cmp	r3, #0
 810a354:	dc02      	bgt.n	810a35c <__sflush_r+0x20>
 810a356:	2000      	movs	r0, #0
 810a358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810a35c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a35e:	2e00      	cmp	r6, #0
 810a360:	d0f9      	beq.n	810a356 <__sflush_r+0x1a>
 810a362:	2300      	movs	r3, #0
 810a364:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 810a368:	682f      	ldr	r7, [r5, #0]
 810a36a:	6a21      	ldr	r1, [r4, #32]
 810a36c:	602b      	str	r3, [r5, #0]
 810a36e:	d032      	beq.n	810a3d6 <__sflush_r+0x9a>
 810a370:	6d60      	ldr	r0, [r4, #84]	; 0x54
 810a372:	89a3      	ldrh	r3, [r4, #12]
 810a374:	075a      	lsls	r2, r3, #29
 810a376:	d505      	bpl.n	810a384 <__sflush_r+0x48>
 810a378:	6863      	ldr	r3, [r4, #4]
 810a37a:	1ac0      	subs	r0, r0, r3
 810a37c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 810a37e:	b10b      	cbz	r3, 810a384 <__sflush_r+0x48>
 810a380:	6c23      	ldr	r3, [r4, #64]	; 0x40
 810a382:	1ac0      	subs	r0, r0, r3
 810a384:	2300      	movs	r3, #0
 810a386:	4602      	mov	r2, r0
 810a388:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 810a38a:	6a21      	ldr	r1, [r4, #32]
 810a38c:	4628      	mov	r0, r5
 810a38e:	47b0      	blx	r6
 810a390:	1c43      	adds	r3, r0, #1
 810a392:	89a3      	ldrh	r3, [r4, #12]
 810a394:	d106      	bne.n	810a3a4 <__sflush_r+0x68>
 810a396:	6829      	ldr	r1, [r5, #0]
 810a398:	291d      	cmp	r1, #29
 810a39a:	d82b      	bhi.n	810a3f4 <__sflush_r+0xb8>
 810a39c:	4a29      	ldr	r2, [pc, #164]	; (810a444 <__sflush_r+0x108>)
 810a39e:	410a      	asrs	r2, r1
 810a3a0:	07d6      	lsls	r6, r2, #31
 810a3a2:	d427      	bmi.n	810a3f4 <__sflush_r+0xb8>
 810a3a4:	2200      	movs	r2, #0
 810a3a6:	6062      	str	r2, [r4, #4]
 810a3a8:	04d9      	lsls	r1, r3, #19
 810a3aa:	6922      	ldr	r2, [r4, #16]
 810a3ac:	6022      	str	r2, [r4, #0]
 810a3ae:	d504      	bpl.n	810a3ba <__sflush_r+0x7e>
 810a3b0:	1c42      	adds	r2, r0, #1
 810a3b2:	d101      	bne.n	810a3b8 <__sflush_r+0x7c>
 810a3b4:	682b      	ldr	r3, [r5, #0]
 810a3b6:	b903      	cbnz	r3, 810a3ba <__sflush_r+0x7e>
 810a3b8:	6560      	str	r0, [r4, #84]	; 0x54
 810a3ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 810a3bc:	602f      	str	r7, [r5, #0]
 810a3be:	2900      	cmp	r1, #0
 810a3c0:	d0c9      	beq.n	810a356 <__sflush_r+0x1a>
 810a3c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810a3c6:	4299      	cmp	r1, r3
 810a3c8:	d002      	beq.n	810a3d0 <__sflush_r+0x94>
 810a3ca:	4628      	mov	r0, r5
 810a3cc:	f7fe f8d6 	bl	810857c <_free_r>
 810a3d0:	2000      	movs	r0, #0
 810a3d2:	6360      	str	r0, [r4, #52]	; 0x34
 810a3d4:	e7c0      	b.n	810a358 <__sflush_r+0x1c>
 810a3d6:	2301      	movs	r3, #1
 810a3d8:	4628      	mov	r0, r5
 810a3da:	47b0      	blx	r6
 810a3dc:	1c41      	adds	r1, r0, #1
 810a3de:	d1c8      	bne.n	810a372 <__sflush_r+0x36>
 810a3e0:	682b      	ldr	r3, [r5, #0]
 810a3e2:	2b00      	cmp	r3, #0
 810a3e4:	d0c5      	beq.n	810a372 <__sflush_r+0x36>
 810a3e6:	2b1d      	cmp	r3, #29
 810a3e8:	d001      	beq.n	810a3ee <__sflush_r+0xb2>
 810a3ea:	2b16      	cmp	r3, #22
 810a3ec:	d101      	bne.n	810a3f2 <__sflush_r+0xb6>
 810a3ee:	602f      	str	r7, [r5, #0]
 810a3f0:	e7b1      	b.n	810a356 <__sflush_r+0x1a>
 810a3f2:	89a3      	ldrh	r3, [r4, #12]
 810a3f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a3f8:	81a3      	strh	r3, [r4, #12]
 810a3fa:	e7ad      	b.n	810a358 <__sflush_r+0x1c>
 810a3fc:	690f      	ldr	r7, [r1, #16]
 810a3fe:	2f00      	cmp	r7, #0
 810a400:	d0a9      	beq.n	810a356 <__sflush_r+0x1a>
 810a402:	0793      	lsls	r3, r2, #30
 810a404:	680e      	ldr	r6, [r1, #0]
 810a406:	bf08      	it	eq
 810a408:	694b      	ldreq	r3, [r1, #20]
 810a40a:	600f      	str	r7, [r1, #0]
 810a40c:	bf18      	it	ne
 810a40e:	2300      	movne	r3, #0
 810a410:	eba6 0807 	sub.w	r8, r6, r7
 810a414:	608b      	str	r3, [r1, #8]
 810a416:	f1b8 0f00 	cmp.w	r8, #0
 810a41a:	dd9c      	ble.n	810a356 <__sflush_r+0x1a>
 810a41c:	6a21      	ldr	r1, [r4, #32]
 810a41e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 810a420:	4643      	mov	r3, r8
 810a422:	463a      	mov	r2, r7
 810a424:	4628      	mov	r0, r5
 810a426:	47b0      	blx	r6
 810a428:	2800      	cmp	r0, #0
 810a42a:	dc06      	bgt.n	810a43a <__sflush_r+0xfe>
 810a42c:	89a3      	ldrh	r3, [r4, #12]
 810a42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 810a432:	81a3      	strh	r3, [r4, #12]
 810a434:	f04f 30ff 	mov.w	r0, #4294967295
 810a438:	e78e      	b.n	810a358 <__sflush_r+0x1c>
 810a43a:	4407      	add	r7, r0
 810a43c:	eba8 0800 	sub.w	r8, r8, r0
 810a440:	e7e9      	b.n	810a416 <__sflush_r+0xda>
 810a442:	bf00      	nop
 810a444:	dfbffffe 	.word	0xdfbffffe

0810a448 <_fflush_r>:
 810a448:	b538      	push	{r3, r4, r5, lr}
 810a44a:	690b      	ldr	r3, [r1, #16]
 810a44c:	4605      	mov	r5, r0
 810a44e:	460c      	mov	r4, r1
 810a450:	b913      	cbnz	r3, 810a458 <_fflush_r+0x10>
 810a452:	2500      	movs	r5, #0
 810a454:	4628      	mov	r0, r5
 810a456:	bd38      	pop	{r3, r4, r5, pc}
 810a458:	b118      	cbz	r0, 810a462 <_fflush_r+0x1a>
 810a45a:	6a03      	ldr	r3, [r0, #32]
 810a45c:	b90b      	cbnz	r3, 810a462 <_fflush_r+0x1a>
 810a45e:	f7fc ffef 	bl	8107440 <__sinit>
 810a462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a466:	2b00      	cmp	r3, #0
 810a468:	d0f3      	beq.n	810a452 <_fflush_r+0xa>
 810a46a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 810a46c:	07d0      	lsls	r0, r2, #31
 810a46e:	d404      	bmi.n	810a47a <_fflush_r+0x32>
 810a470:	0599      	lsls	r1, r3, #22
 810a472:	d402      	bmi.n	810a47a <_fflush_r+0x32>
 810a474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a476:	f7fd f9fc 	bl	8107872 <__retarget_lock_acquire_recursive>
 810a47a:	4628      	mov	r0, r5
 810a47c:	4621      	mov	r1, r4
 810a47e:	f7ff ff5d 	bl	810a33c <__sflush_r>
 810a482:	6e63      	ldr	r3, [r4, #100]	; 0x64
 810a484:	07da      	lsls	r2, r3, #31
 810a486:	4605      	mov	r5, r0
 810a488:	d4e4      	bmi.n	810a454 <_fflush_r+0xc>
 810a48a:	89a3      	ldrh	r3, [r4, #12]
 810a48c:	059b      	lsls	r3, r3, #22
 810a48e:	d4e1      	bmi.n	810a454 <_fflush_r+0xc>
 810a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 810a492:	f7fd f9ef 	bl	8107874 <__retarget_lock_release_recursive>
 810a496:	e7dd      	b.n	810a454 <_fflush_r+0xc>

0810a498 <__swhatbuf_r>:
 810a498:	b570      	push	{r4, r5, r6, lr}
 810a49a:	460c      	mov	r4, r1
 810a49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810a4a0:	2900      	cmp	r1, #0
 810a4a2:	b096      	sub	sp, #88	; 0x58
 810a4a4:	4615      	mov	r5, r2
 810a4a6:	461e      	mov	r6, r3
 810a4a8:	da0d      	bge.n	810a4c6 <__swhatbuf_r+0x2e>
 810a4aa:	89a3      	ldrh	r3, [r4, #12]
 810a4ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 810a4b0:	f04f 0100 	mov.w	r1, #0
 810a4b4:	bf0c      	ite	eq
 810a4b6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810a4ba:	2340      	movne	r3, #64	; 0x40
 810a4bc:	2000      	movs	r0, #0
 810a4be:	6031      	str	r1, [r6, #0]
 810a4c0:	602b      	str	r3, [r5, #0]
 810a4c2:	b016      	add	sp, #88	; 0x58
 810a4c4:	bd70      	pop	{r4, r5, r6, pc}
 810a4c6:	466a      	mov	r2, sp
 810a4c8:	f000 f874 	bl	810a5b4 <_fstat_r>
 810a4cc:	2800      	cmp	r0, #0
 810a4ce:	dbec      	blt.n	810a4aa <__swhatbuf_r+0x12>
 810a4d0:	9901      	ldr	r1, [sp, #4]
 810a4d2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 810a4d6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810a4da:	4259      	negs	r1, r3
 810a4dc:	4159      	adcs	r1, r3
 810a4de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 810a4e2:	e7eb      	b.n	810a4bc <__swhatbuf_r+0x24>

0810a4e4 <__smakebuf_r>:
 810a4e4:	898b      	ldrh	r3, [r1, #12]
 810a4e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 810a4e8:	079d      	lsls	r5, r3, #30
 810a4ea:	4606      	mov	r6, r0
 810a4ec:	460c      	mov	r4, r1
 810a4ee:	d507      	bpl.n	810a500 <__smakebuf_r+0x1c>
 810a4f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 810a4f4:	6023      	str	r3, [r4, #0]
 810a4f6:	6123      	str	r3, [r4, #16]
 810a4f8:	2301      	movs	r3, #1
 810a4fa:	6163      	str	r3, [r4, #20]
 810a4fc:	b002      	add	sp, #8
 810a4fe:	bd70      	pop	{r4, r5, r6, pc}
 810a500:	ab01      	add	r3, sp, #4
 810a502:	466a      	mov	r2, sp
 810a504:	f7ff ffc8 	bl	810a498 <__swhatbuf_r>
 810a508:	9900      	ldr	r1, [sp, #0]
 810a50a:	4605      	mov	r5, r0
 810a50c:	4630      	mov	r0, r6
 810a50e:	f7fe f8a9 	bl	8108664 <_malloc_r>
 810a512:	b948      	cbnz	r0, 810a528 <__smakebuf_r+0x44>
 810a514:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810a518:	059a      	lsls	r2, r3, #22
 810a51a:	d4ef      	bmi.n	810a4fc <__smakebuf_r+0x18>
 810a51c:	f023 0303 	bic.w	r3, r3, #3
 810a520:	f043 0302 	orr.w	r3, r3, #2
 810a524:	81a3      	strh	r3, [r4, #12]
 810a526:	e7e3      	b.n	810a4f0 <__smakebuf_r+0xc>
 810a528:	89a3      	ldrh	r3, [r4, #12]
 810a52a:	6020      	str	r0, [r4, #0]
 810a52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 810a530:	81a3      	strh	r3, [r4, #12]
 810a532:	9b00      	ldr	r3, [sp, #0]
 810a534:	6163      	str	r3, [r4, #20]
 810a536:	9b01      	ldr	r3, [sp, #4]
 810a538:	6120      	str	r0, [r4, #16]
 810a53a:	b15b      	cbz	r3, 810a554 <__smakebuf_r+0x70>
 810a53c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810a540:	4630      	mov	r0, r6
 810a542:	f000 f849 	bl	810a5d8 <_isatty_r>
 810a546:	b128      	cbz	r0, 810a554 <__smakebuf_r+0x70>
 810a548:	89a3      	ldrh	r3, [r4, #12]
 810a54a:	f023 0303 	bic.w	r3, r3, #3
 810a54e:	f043 0301 	orr.w	r3, r3, #1
 810a552:	81a3      	strh	r3, [r4, #12]
 810a554:	89a3      	ldrh	r3, [r4, #12]
 810a556:	431d      	orrs	r5, r3
 810a558:	81a5      	strh	r5, [r4, #12]
 810a55a:	e7cf      	b.n	810a4fc <__smakebuf_r+0x18>

0810a55c <memmove>:
 810a55c:	4288      	cmp	r0, r1
 810a55e:	b510      	push	{r4, lr}
 810a560:	eb01 0402 	add.w	r4, r1, r2
 810a564:	d902      	bls.n	810a56c <memmove+0x10>
 810a566:	4284      	cmp	r4, r0
 810a568:	4623      	mov	r3, r4
 810a56a:	d807      	bhi.n	810a57c <memmove+0x20>
 810a56c:	1e43      	subs	r3, r0, #1
 810a56e:	42a1      	cmp	r1, r4
 810a570:	d008      	beq.n	810a584 <memmove+0x28>
 810a572:	f811 2b01 	ldrb.w	r2, [r1], #1
 810a576:	f803 2f01 	strb.w	r2, [r3, #1]!
 810a57a:	e7f8      	b.n	810a56e <memmove+0x12>
 810a57c:	4402      	add	r2, r0
 810a57e:	4601      	mov	r1, r0
 810a580:	428a      	cmp	r2, r1
 810a582:	d100      	bne.n	810a586 <memmove+0x2a>
 810a584:	bd10      	pop	{r4, pc}
 810a586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810a58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810a58e:	e7f7      	b.n	810a580 <memmove+0x24>

0810a590 <strncmp>:
 810a590:	b510      	push	{r4, lr}
 810a592:	b16a      	cbz	r2, 810a5b0 <strncmp+0x20>
 810a594:	3901      	subs	r1, #1
 810a596:	1884      	adds	r4, r0, r2
 810a598:	f810 2b01 	ldrb.w	r2, [r0], #1
 810a59c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 810a5a0:	429a      	cmp	r2, r3
 810a5a2:	d103      	bne.n	810a5ac <strncmp+0x1c>
 810a5a4:	42a0      	cmp	r0, r4
 810a5a6:	d001      	beq.n	810a5ac <strncmp+0x1c>
 810a5a8:	2a00      	cmp	r2, #0
 810a5aa:	d1f5      	bne.n	810a598 <strncmp+0x8>
 810a5ac:	1ad0      	subs	r0, r2, r3
 810a5ae:	bd10      	pop	{r4, pc}
 810a5b0:	4610      	mov	r0, r2
 810a5b2:	e7fc      	b.n	810a5ae <strncmp+0x1e>

0810a5b4 <_fstat_r>:
 810a5b4:	b538      	push	{r3, r4, r5, lr}
 810a5b6:	4d07      	ldr	r5, [pc, #28]	; (810a5d4 <_fstat_r+0x20>)
 810a5b8:	2300      	movs	r3, #0
 810a5ba:	4604      	mov	r4, r0
 810a5bc:	4608      	mov	r0, r1
 810a5be:	4611      	mov	r1, r2
 810a5c0:	602b      	str	r3, [r5, #0]
 810a5c2:	f7f7 fafb 	bl	8101bbc <_fstat>
 810a5c6:	1c43      	adds	r3, r0, #1
 810a5c8:	d102      	bne.n	810a5d0 <_fstat_r+0x1c>
 810a5ca:	682b      	ldr	r3, [r5, #0]
 810a5cc:	b103      	cbz	r3, 810a5d0 <_fstat_r+0x1c>
 810a5ce:	6023      	str	r3, [r4, #0]
 810a5d0:	bd38      	pop	{r3, r4, r5, pc}
 810a5d2:	bf00      	nop
 810a5d4:	10000430 	.word	0x10000430

0810a5d8 <_isatty_r>:
 810a5d8:	b538      	push	{r3, r4, r5, lr}
 810a5da:	4d06      	ldr	r5, [pc, #24]	; (810a5f4 <_isatty_r+0x1c>)
 810a5dc:	2300      	movs	r3, #0
 810a5de:	4604      	mov	r4, r0
 810a5e0:	4608      	mov	r0, r1
 810a5e2:	602b      	str	r3, [r5, #0]
 810a5e4:	f7f7 fafa 	bl	8101bdc <_isatty>
 810a5e8:	1c43      	adds	r3, r0, #1
 810a5ea:	d102      	bne.n	810a5f2 <_isatty_r+0x1a>
 810a5ec:	682b      	ldr	r3, [r5, #0]
 810a5ee:	b103      	cbz	r3, 810a5f2 <_isatty_r+0x1a>
 810a5f0:	6023      	str	r3, [r4, #0]
 810a5f2:	bd38      	pop	{r3, r4, r5, pc}
 810a5f4:	10000430 	.word	0x10000430

0810a5f8 <_sbrk_r>:
 810a5f8:	b538      	push	{r3, r4, r5, lr}
 810a5fa:	4d06      	ldr	r5, [pc, #24]	; (810a614 <_sbrk_r+0x1c>)
 810a5fc:	2300      	movs	r3, #0
 810a5fe:	4604      	mov	r4, r0
 810a600:	4608      	mov	r0, r1
 810a602:	602b      	str	r3, [r5, #0]
 810a604:	f7f7 fb02 	bl	8101c0c <_sbrk>
 810a608:	1c43      	adds	r3, r0, #1
 810a60a:	d102      	bne.n	810a612 <_sbrk_r+0x1a>
 810a60c:	682b      	ldr	r3, [r5, #0]
 810a60e:	b103      	cbz	r3, 810a612 <_sbrk_r+0x1a>
 810a610:	6023      	str	r3, [r4, #0]
 810a612:	bd38      	pop	{r3, r4, r5, pc}
 810a614:	10000430 	.word	0x10000430

0810a618 <memcpy>:
 810a618:	440a      	add	r2, r1
 810a61a:	4291      	cmp	r1, r2
 810a61c:	f100 33ff 	add.w	r3, r0, #4294967295
 810a620:	d100      	bne.n	810a624 <memcpy+0xc>
 810a622:	4770      	bx	lr
 810a624:	b510      	push	{r4, lr}
 810a626:	f811 4b01 	ldrb.w	r4, [r1], #1
 810a62a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810a62e:	4291      	cmp	r1, r2
 810a630:	d1f9      	bne.n	810a626 <memcpy+0xe>
 810a632:	bd10      	pop	{r4, pc}
 810a634:	0000      	movs	r0, r0
	...

0810a638 <nan>:
 810a638:	ed9f 0b01 	vldr	d0, [pc, #4]	; 810a640 <nan+0x8>
 810a63c:	4770      	bx	lr
 810a63e:	bf00      	nop
 810a640:	00000000 	.word	0x00000000
 810a644:	7ff80000 	.word	0x7ff80000

0810a648 <__assert_func>:
 810a648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 810a64a:	4614      	mov	r4, r2
 810a64c:	461a      	mov	r2, r3
 810a64e:	4b09      	ldr	r3, [pc, #36]	; (810a674 <__assert_func+0x2c>)
 810a650:	681b      	ldr	r3, [r3, #0]
 810a652:	4605      	mov	r5, r0
 810a654:	68d8      	ldr	r0, [r3, #12]
 810a656:	b14c      	cbz	r4, 810a66c <__assert_func+0x24>
 810a658:	4b07      	ldr	r3, [pc, #28]	; (810a678 <__assert_func+0x30>)
 810a65a:	9100      	str	r1, [sp, #0]
 810a65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 810a660:	4906      	ldr	r1, [pc, #24]	; (810a67c <__assert_func+0x34>)
 810a662:	462b      	mov	r3, r5
 810a664:	f000 fbca 	bl	810adfc <fiprintf>
 810a668:	f000 fbda 	bl	810ae20 <abort>
 810a66c:	4b04      	ldr	r3, [pc, #16]	; (810a680 <__assert_func+0x38>)
 810a66e:	461c      	mov	r4, r3
 810a670:	e7f3      	b.n	810a65a <__assert_func+0x12>
 810a672:	bf00      	nop
 810a674:	10000074 	.word	0x10000074
 810a678:	0810b352 	.word	0x0810b352
 810a67c:	0810b35f 	.word	0x0810b35f
 810a680:	0810b38d 	.word	0x0810b38d

0810a684 <_calloc_r>:
 810a684:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810a686:	fba1 2402 	umull	r2, r4, r1, r2
 810a68a:	b94c      	cbnz	r4, 810a6a0 <_calloc_r+0x1c>
 810a68c:	4611      	mov	r1, r2
 810a68e:	9201      	str	r2, [sp, #4]
 810a690:	f7fd ffe8 	bl	8108664 <_malloc_r>
 810a694:	9a01      	ldr	r2, [sp, #4]
 810a696:	4605      	mov	r5, r0
 810a698:	b930      	cbnz	r0, 810a6a8 <_calloc_r+0x24>
 810a69a:	4628      	mov	r0, r5
 810a69c:	b003      	add	sp, #12
 810a69e:	bd30      	pop	{r4, r5, pc}
 810a6a0:	220c      	movs	r2, #12
 810a6a2:	6002      	str	r2, [r0, #0]
 810a6a4:	2500      	movs	r5, #0
 810a6a6:	e7f8      	b.n	810a69a <_calloc_r+0x16>
 810a6a8:	4621      	mov	r1, r4
 810a6aa:	f7fd f865 	bl	8107778 <memset>
 810a6ae:	e7f4      	b.n	810a69a <_calloc_r+0x16>

0810a6b0 <rshift>:
 810a6b0:	6903      	ldr	r3, [r0, #16]
 810a6b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 810a6b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810a6ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 810a6be:	f100 0414 	add.w	r4, r0, #20
 810a6c2:	dd45      	ble.n	810a750 <rshift+0xa0>
 810a6c4:	f011 011f 	ands.w	r1, r1, #31
 810a6c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810a6cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 810a6d0:	d10c      	bne.n	810a6ec <rshift+0x3c>
 810a6d2:	f100 0710 	add.w	r7, r0, #16
 810a6d6:	4629      	mov	r1, r5
 810a6d8:	42b1      	cmp	r1, r6
 810a6da:	d334      	bcc.n	810a746 <rshift+0x96>
 810a6dc:	1a9b      	subs	r3, r3, r2
 810a6de:	009b      	lsls	r3, r3, #2
 810a6e0:	1eea      	subs	r2, r5, #3
 810a6e2:	4296      	cmp	r6, r2
 810a6e4:	bf38      	it	cc
 810a6e6:	2300      	movcc	r3, #0
 810a6e8:	4423      	add	r3, r4
 810a6ea:	e015      	b.n	810a718 <rshift+0x68>
 810a6ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 810a6f0:	f1c1 0820 	rsb	r8, r1, #32
 810a6f4:	40cf      	lsrs	r7, r1
 810a6f6:	f105 0e04 	add.w	lr, r5, #4
 810a6fa:	46a1      	mov	r9, r4
 810a6fc:	4576      	cmp	r6, lr
 810a6fe:	46f4      	mov	ip, lr
 810a700:	d815      	bhi.n	810a72e <rshift+0x7e>
 810a702:	1a9a      	subs	r2, r3, r2
 810a704:	0092      	lsls	r2, r2, #2
 810a706:	3a04      	subs	r2, #4
 810a708:	3501      	adds	r5, #1
 810a70a:	42ae      	cmp	r6, r5
 810a70c:	bf38      	it	cc
 810a70e:	2200      	movcc	r2, #0
 810a710:	18a3      	adds	r3, r4, r2
 810a712:	50a7      	str	r7, [r4, r2]
 810a714:	b107      	cbz	r7, 810a718 <rshift+0x68>
 810a716:	3304      	adds	r3, #4
 810a718:	1b1a      	subs	r2, r3, r4
 810a71a:	42a3      	cmp	r3, r4
 810a71c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 810a720:	bf08      	it	eq
 810a722:	2300      	moveq	r3, #0
 810a724:	6102      	str	r2, [r0, #16]
 810a726:	bf08      	it	eq
 810a728:	6143      	streq	r3, [r0, #20]
 810a72a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810a72e:	f8dc c000 	ldr.w	ip, [ip]
 810a732:	fa0c fc08 	lsl.w	ip, ip, r8
 810a736:	ea4c 0707 	orr.w	r7, ip, r7
 810a73a:	f849 7b04 	str.w	r7, [r9], #4
 810a73e:	f85e 7b04 	ldr.w	r7, [lr], #4
 810a742:	40cf      	lsrs	r7, r1
 810a744:	e7da      	b.n	810a6fc <rshift+0x4c>
 810a746:	f851 cb04 	ldr.w	ip, [r1], #4
 810a74a:	f847 cf04 	str.w	ip, [r7, #4]!
 810a74e:	e7c3      	b.n	810a6d8 <rshift+0x28>
 810a750:	4623      	mov	r3, r4
 810a752:	e7e1      	b.n	810a718 <rshift+0x68>

0810a754 <__hexdig_fun>:
 810a754:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810a758:	2b09      	cmp	r3, #9
 810a75a:	d802      	bhi.n	810a762 <__hexdig_fun+0xe>
 810a75c:	3820      	subs	r0, #32
 810a75e:	b2c0      	uxtb	r0, r0
 810a760:	4770      	bx	lr
 810a762:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810a766:	2b05      	cmp	r3, #5
 810a768:	d801      	bhi.n	810a76e <__hexdig_fun+0x1a>
 810a76a:	3847      	subs	r0, #71	; 0x47
 810a76c:	e7f7      	b.n	810a75e <__hexdig_fun+0xa>
 810a76e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 810a772:	2b05      	cmp	r3, #5
 810a774:	d801      	bhi.n	810a77a <__hexdig_fun+0x26>
 810a776:	3827      	subs	r0, #39	; 0x27
 810a778:	e7f1      	b.n	810a75e <__hexdig_fun+0xa>
 810a77a:	2000      	movs	r0, #0
 810a77c:	4770      	bx	lr
	...

0810a780 <__gethex>:
 810a780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810a784:	4617      	mov	r7, r2
 810a786:	680a      	ldr	r2, [r1, #0]
 810a788:	b085      	sub	sp, #20
 810a78a:	f102 0b02 	add.w	fp, r2, #2
 810a78e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 810a792:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 810a796:	4681      	mov	r9, r0
 810a798:	468a      	mov	sl, r1
 810a79a:	9302      	str	r3, [sp, #8]
 810a79c:	32fe      	adds	r2, #254	; 0xfe
 810a79e:	eb02 030b 	add.w	r3, r2, fp
 810a7a2:	46d8      	mov	r8, fp
 810a7a4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 810a7a8:	9301      	str	r3, [sp, #4]
 810a7aa:	2830      	cmp	r0, #48	; 0x30
 810a7ac:	d0f7      	beq.n	810a79e <__gethex+0x1e>
 810a7ae:	f7ff ffd1 	bl	810a754 <__hexdig_fun>
 810a7b2:	4604      	mov	r4, r0
 810a7b4:	2800      	cmp	r0, #0
 810a7b6:	d138      	bne.n	810a82a <__gethex+0xaa>
 810a7b8:	49a7      	ldr	r1, [pc, #668]	; (810aa58 <__gethex+0x2d8>)
 810a7ba:	2201      	movs	r2, #1
 810a7bc:	4640      	mov	r0, r8
 810a7be:	f7ff fee7 	bl	810a590 <strncmp>
 810a7c2:	4606      	mov	r6, r0
 810a7c4:	2800      	cmp	r0, #0
 810a7c6:	d169      	bne.n	810a89c <__gethex+0x11c>
 810a7c8:	f898 0001 	ldrb.w	r0, [r8, #1]
 810a7cc:	465d      	mov	r5, fp
 810a7ce:	f7ff ffc1 	bl	810a754 <__hexdig_fun>
 810a7d2:	2800      	cmp	r0, #0
 810a7d4:	d064      	beq.n	810a8a0 <__gethex+0x120>
 810a7d6:	465a      	mov	r2, fp
 810a7d8:	7810      	ldrb	r0, [r2, #0]
 810a7da:	2830      	cmp	r0, #48	; 0x30
 810a7dc:	4690      	mov	r8, r2
 810a7de:	f102 0201 	add.w	r2, r2, #1
 810a7e2:	d0f9      	beq.n	810a7d8 <__gethex+0x58>
 810a7e4:	f7ff ffb6 	bl	810a754 <__hexdig_fun>
 810a7e8:	2301      	movs	r3, #1
 810a7ea:	fab0 f480 	clz	r4, r0
 810a7ee:	0964      	lsrs	r4, r4, #5
 810a7f0:	465e      	mov	r6, fp
 810a7f2:	9301      	str	r3, [sp, #4]
 810a7f4:	4642      	mov	r2, r8
 810a7f6:	4615      	mov	r5, r2
 810a7f8:	3201      	adds	r2, #1
 810a7fa:	7828      	ldrb	r0, [r5, #0]
 810a7fc:	f7ff ffaa 	bl	810a754 <__hexdig_fun>
 810a800:	2800      	cmp	r0, #0
 810a802:	d1f8      	bne.n	810a7f6 <__gethex+0x76>
 810a804:	4994      	ldr	r1, [pc, #592]	; (810aa58 <__gethex+0x2d8>)
 810a806:	2201      	movs	r2, #1
 810a808:	4628      	mov	r0, r5
 810a80a:	f7ff fec1 	bl	810a590 <strncmp>
 810a80e:	b978      	cbnz	r0, 810a830 <__gethex+0xb0>
 810a810:	b946      	cbnz	r6, 810a824 <__gethex+0xa4>
 810a812:	1c6e      	adds	r6, r5, #1
 810a814:	4632      	mov	r2, r6
 810a816:	4615      	mov	r5, r2
 810a818:	3201      	adds	r2, #1
 810a81a:	7828      	ldrb	r0, [r5, #0]
 810a81c:	f7ff ff9a 	bl	810a754 <__hexdig_fun>
 810a820:	2800      	cmp	r0, #0
 810a822:	d1f8      	bne.n	810a816 <__gethex+0x96>
 810a824:	1b73      	subs	r3, r6, r5
 810a826:	009e      	lsls	r6, r3, #2
 810a828:	e004      	b.n	810a834 <__gethex+0xb4>
 810a82a:	2400      	movs	r4, #0
 810a82c:	4626      	mov	r6, r4
 810a82e:	e7e1      	b.n	810a7f4 <__gethex+0x74>
 810a830:	2e00      	cmp	r6, #0
 810a832:	d1f7      	bne.n	810a824 <__gethex+0xa4>
 810a834:	782b      	ldrb	r3, [r5, #0]
 810a836:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810a83a:	2b50      	cmp	r3, #80	; 0x50
 810a83c:	d13d      	bne.n	810a8ba <__gethex+0x13a>
 810a83e:	786b      	ldrb	r3, [r5, #1]
 810a840:	2b2b      	cmp	r3, #43	; 0x2b
 810a842:	d02f      	beq.n	810a8a4 <__gethex+0x124>
 810a844:	2b2d      	cmp	r3, #45	; 0x2d
 810a846:	d031      	beq.n	810a8ac <__gethex+0x12c>
 810a848:	1c69      	adds	r1, r5, #1
 810a84a:	f04f 0b00 	mov.w	fp, #0
 810a84e:	7808      	ldrb	r0, [r1, #0]
 810a850:	f7ff ff80 	bl	810a754 <__hexdig_fun>
 810a854:	1e42      	subs	r2, r0, #1
 810a856:	b2d2      	uxtb	r2, r2
 810a858:	2a18      	cmp	r2, #24
 810a85a:	d82e      	bhi.n	810a8ba <__gethex+0x13a>
 810a85c:	f1a0 0210 	sub.w	r2, r0, #16
 810a860:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 810a864:	f7ff ff76 	bl	810a754 <__hexdig_fun>
 810a868:	f100 3cff 	add.w	ip, r0, #4294967295
 810a86c:	fa5f fc8c 	uxtb.w	ip, ip
 810a870:	f1bc 0f18 	cmp.w	ip, #24
 810a874:	d91d      	bls.n	810a8b2 <__gethex+0x132>
 810a876:	f1bb 0f00 	cmp.w	fp, #0
 810a87a:	d000      	beq.n	810a87e <__gethex+0xfe>
 810a87c:	4252      	negs	r2, r2
 810a87e:	4416      	add	r6, r2
 810a880:	f8ca 1000 	str.w	r1, [sl]
 810a884:	b1dc      	cbz	r4, 810a8be <__gethex+0x13e>
 810a886:	9b01      	ldr	r3, [sp, #4]
 810a888:	2b00      	cmp	r3, #0
 810a88a:	bf14      	ite	ne
 810a88c:	f04f 0800 	movne.w	r8, #0
 810a890:	f04f 0806 	moveq.w	r8, #6
 810a894:	4640      	mov	r0, r8
 810a896:	b005      	add	sp, #20
 810a898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810a89c:	4645      	mov	r5, r8
 810a89e:	4626      	mov	r6, r4
 810a8a0:	2401      	movs	r4, #1
 810a8a2:	e7c7      	b.n	810a834 <__gethex+0xb4>
 810a8a4:	f04f 0b00 	mov.w	fp, #0
 810a8a8:	1ca9      	adds	r1, r5, #2
 810a8aa:	e7d0      	b.n	810a84e <__gethex+0xce>
 810a8ac:	f04f 0b01 	mov.w	fp, #1
 810a8b0:	e7fa      	b.n	810a8a8 <__gethex+0x128>
 810a8b2:	230a      	movs	r3, #10
 810a8b4:	fb03 0002 	mla	r0, r3, r2, r0
 810a8b8:	e7d0      	b.n	810a85c <__gethex+0xdc>
 810a8ba:	4629      	mov	r1, r5
 810a8bc:	e7e0      	b.n	810a880 <__gethex+0x100>
 810a8be:	eba5 0308 	sub.w	r3, r5, r8
 810a8c2:	3b01      	subs	r3, #1
 810a8c4:	4621      	mov	r1, r4
 810a8c6:	2b07      	cmp	r3, #7
 810a8c8:	dc0a      	bgt.n	810a8e0 <__gethex+0x160>
 810a8ca:	4648      	mov	r0, r9
 810a8cc:	f7fd ff56 	bl	810877c <_Balloc>
 810a8d0:	4604      	mov	r4, r0
 810a8d2:	b940      	cbnz	r0, 810a8e6 <__gethex+0x166>
 810a8d4:	4b61      	ldr	r3, [pc, #388]	; (810aa5c <__gethex+0x2dc>)
 810a8d6:	4602      	mov	r2, r0
 810a8d8:	21e4      	movs	r1, #228	; 0xe4
 810a8da:	4861      	ldr	r0, [pc, #388]	; (810aa60 <__gethex+0x2e0>)
 810a8dc:	f7ff feb4 	bl	810a648 <__assert_func>
 810a8e0:	3101      	adds	r1, #1
 810a8e2:	105b      	asrs	r3, r3, #1
 810a8e4:	e7ef      	b.n	810a8c6 <__gethex+0x146>
 810a8e6:	f100 0a14 	add.w	sl, r0, #20
 810a8ea:	2300      	movs	r3, #0
 810a8ec:	495a      	ldr	r1, [pc, #360]	; (810aa58 <__gethex+0x2d8>)
 810a8ee:	f8cd a004 	str.w	sl, [sp, #4]
 810a8f2:	469b      	mov	fp, r3
 810a8f4:	45a8      	cmp	r8, r5
 810a8f6:	d342      	bcc.n	810a97e <__gethex+0x1fe>
 810a8f8:	9801      	ldr	r0, [sp, #4]
 810a8fa:	f840 bb04 	str.w	fp, [r0], #4
 810a8fe:	eba0 000a 	sub.w	r0, r0, sl
 810a902:	1080      	asrs	r0, r0, #2
 810a904:	6120      	str	r0, [r4, #16]
 810a906:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810a90a:	4658      	mov	r0, fp
 810a90c:	f7fe f828 	bl	8108960 <__hi0bits>
 810a910:	683d      	ldr	r5, [r7, #0]
 810a912:	eba8 0000 	sub.w	r0, r8, r0
 810a916:	42a8      	cmp	r0, r5
 810a918:	dd59      	ble.n	810a9ce <__gethex+0x24e>
 810a91a:	eba0 0805 	sub.w	r8, r0, r5
 810a91e:	4641      	mov	r1, r8
 810a920:	4620      	mov	r0, r4
 810a922:	f7fe fbb7 	bl	8109094 <__any_on>
 810a926:	4683      	mov	fp, r0
 810a928:	b1b8      	cbz	r0, 810a95a <__gethex+0x1da>
 810a92a:	f108 33ff 	add.w	r3, r8, #4294967295
 810a92e:	1159      	asrs	r1, r3, #5
 810a930:	f003 021f 	and.w	r2, r3, #31
 810a934:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810a938:	f04f 0b01 	mov.w	fp, #1
 810a93c:	fa0b f202 	lsl.w	r2, fp, r2
 810a940:	420a      	tst	r2, r1
 810a942:	d00a      	beq.n	810a95a <__gethex+0x1da>
 810a944:	455b      	cmp	r3, fp
 810a946:	dd06      	ble.n	810a956 <__gethex+0x1d6>
 810a948:	f1a8 0102 	sub.w	r1, r8, #2
 810a94c:	4620      	mov	r0, r4
 810a94e:	f7fe fba1 	bl	8109094 <__any_on>
 810a952:	2800      	cmp	r0, #0
 810a954:	d138      	bne.n	810a9c8 <__gethex+0x248>
 810a956:	f04f 0b02 	mov.w	fp, #2
 810a95a:	4641      	mov	r1, r8
 810a95c:	4620      	mov	r0, r4
 810a95e:	f7ff fea7 	bl	810a6b0 <rshift>
 810a962:	4446      	add	r6, r8
 810a964:	68bb      	ldr	r3, [r7, #8]
 810a966:	42b3      	cmp	r3, r6
 810a968:	da41      	bge.n	810a9ee <__gethex+0x26e>
 810a96a:	4621      	mov	r1, r4
 810a96c:	4648      	mov	r0, r9
 810a96e:	f7fd ff45 	bl	81087fc <_Bfree>
 810a972:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810a974:	2300      	movs	r3, #0
 810a976:	6013      	str	r3, [r2, #0]
 810a978:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 810a97c:	e78a      	b.n	810a894 <__gethex+0x114>
 810a97e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 810a982:	2a2e      	cmp	r2, #46	; 0x2e
 810a984:	d014      	beq.n	810a9b0 <__gethex+0x230>
 810a986:	2b20      	cmp	r3, #32
 810a988:	d106      	bne.n	810a998 <__gethex+0x218>
 810a98a:	9b01      	ldr	r3, [sp, #4]
 810a98c:	f843 bb04 	str.w	fp, [r3], #4
 810a990:	f04f 0b00 	mov.w	fp, #0
 810a994:	9301      	str	r3, [sp, #4]
 810a996:	465b      	mov	r3, fp
 810a998:	7828      	ldrb	r0, [r5, #0]
 810a99a:	9303      	str	r3, [sp, #12]
 810a99c:	f7ff feda 	bl	810a754 <__hexdig_fun>
 810a9a0:	9b03      	ldr	r3, [sp, #12]
 810a9a2:	f000 000f 	and.w	r0, r0, #15
 810a9a6:	4098      	lsls	r0, r3
 810a9a8:	ea4b 0b00 	orr.w	fp, fp, r0
 810a9ac:	3304      	adds	r3, #4
 810a9ae:	e7a1      	b.n	810a8f4 <__gethex+0x174>
 810a9b0:	45a8      	cmp	r8, r5
 810a9b2:	d8e8      	bhi.n	810a986 <__gethex+0x206>
 810a9b4:	2201      	movs	r2, #1
 810a9b6:	4628      	mov	r0, r5
 810a9b8:	9303      	str	r3, [sp, #12]
 810a9ba:	f7ff fde9 	bl	810a590 <strncmp>
 810a9be:	4926      	ldr	r1, [pc, #152]	; (810aa58 <__gethex+0x2d8>)
 810a9c0:	9b03      	ldr	r3, [sp, #12]
 810a9c2:	2800      	cmp	r0, #0
 810a9c4:	d1df      	bne.n	810a986 <__gethex+0x206>
 810a9c6:	e795      	b.n	810a8f4 <__gethex+0x174>
 810a9c8:	f04f 0b03 	mov.w	fp, #3
 810a9cc:	e7c5      	b.n	810a95a <__gethex+0x1da>
 810a9ce:	da0b      	bge.n	810a9e8 <__gethex+0x268>
 810a9d0:	eba5 0800 	sub.w	r8, r5, r0
 810a9d4:	4621      	mov	r1, r4
 810a9d6:	4642      	mov	r2, r8
 810a9d8:	4648      	mov	r0, r9
 810a9da:	f7fe f929 	bl	8108c30 <__lshift>
 810a9de:	eba6 0608 	sub.w	r6, r6, r8
 810a9e2:	4604      	mov	r4, r0
 810a9e4:	f100 0a14 	add.w	sl, r0, #20
 810a9e8:	f04f 0b00 	mov.w	fp, #0
 810a9ec:	e7ba      	b.n	810a964 <__gethex+0x1e4>
 810a9ee:	687b      	ldr	r3, [r7, #4]
 810a9f0:	42b3      	cmp	r3, r6
 810a9f2:	dd73      	ble.n	810aadc <__gethex+0x35c>
 810a9f4:	1b9e      	subs	r6, r3, r6
 810a9f6:	42b5      	cmp	r5, r6
 810a9f8:	dc34      	bgt.n	810aa64 <__gethex+0x2e4>
 810a9fa:	68fb      	ldr	r3, [r7, #12]
 810a9fc:	2b02      	cmp	r3, #2
 810a9fe:	d023      	beq.n	810aa48 <__gethex+0x2c8>
 810aa00:	2b03      	cmp	r3, #3
 810aa02:	d025      	beq.n	810aa50 <__gethex+0x2d0>
 810aa04:	2b01      	cmp	r3, #1
 810aa06:	d115      	bne.n	810aa34 <__gethex+0x2b4>
 810aa08:	42b5      	cmp	r5, r6
 810aa0a:	d113      	bne.n	810aa34 <__gethex+0x2b4>
 810aa0c:	2d01      	cmp	r5, #1
 810aa0e:	d10b      	bne.n	810aa28 <__gethex+0x2a8>
 810aa10:	9a02      	ldr	r2, [sp, #8]
 810aa12:	687b      	ldr	r3, [r7, #4]
 810aa14:	6013      	str	r3, [r2, #0]
 810aa16:	2301      	movs	r3, #1
 810aa18:	6123      	str	r3, [r4, #16]
 810aa1a:	f8ca 3000 	str.w	r3, [sl]
 810aa1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810aa20:	f04f 0862 	mov.w	r8, #98	; 0x62
 810aa24:	601c      	str	r4, [r3, #0]
 810aa26:	e735      	b.n	810a894 <__gethex+0x114>
 810aa28:	1e69      	subs	r1, r5, #1
 810aa2a:	4620      	mov	r0, r4
 810aa2c:	f7fe fb32 	bl	8109094 <__any_on>
 810aa30:	2800      	cmp	r0, #0
 810aa32:	d1ed      	bne.n	810aa10 <__gethex+0x290>
 810aa34:	4621      	mov	r1, r4
 810aa36:	4648      	mov	r0, r9
 810aa38:	f7fd fee0 	bl	81087fc <_Bfree>
 810aa3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810aa3e:	2300      	movs	r3, #0
 810aa40:	6013      	str	r3, [r2, #0]
 810aa42:	f04f 0850 	mov.w	r8, #80	; 0x50
 810aa46:	e725      	b.n	810a894 <__gethex+0x114>
 810aa48:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aa4a:	2b00      	cmp	r3, #0
 810aa4c:	d1f2      	bne.n	810aa34 <__gethex+0x2b4>
 810aa4e:	e7df      	b.n	810aa10 <__gethex+0x290>
 810aa50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aa52:	2b00      	cmp	r3, #0
 810aa54:	d1dc      	bne.n	810aa10 <__gethex+0x290>
 810aa56:	e7ed      	b.n	810aa34 <__gethex+0x2b4>
 810aa58:	0810b1e4 	.word	0x0810b1e4
 810aa5c:	0810b079 	.word	0x0810b079
 810aa60:	0810b38e 	.word	0x0810b38e
 810aa64:	f106 38ff 	add.w	r8, r6, #4294967295
 810aa68:	f1bb 0f00 	cmp.w	fp, #0
 810aa6c:	d133      	bne.n	810aad6 <__gethex+0x356>
 810aa6e:	f1b8 0f00 	cmp.w	r8, #0
 810aa72:	d004      	beq.n	810aa7e <__gethex+0x2fe>
 810aa74:	4641      	mov	r1, r8
 810aa76:	4620      	mov	r0, r4
 810aa78:	f7fe fb0c 	bl	8109094 <__any_on>
 810aa7c:	4683      	mov	fp, r0
 810aa7e:	ea4f 1268 	mov.w	r2, r8, asr #5
 810aa82:	2301      	movs	r3, #1
 810aa84:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 810aa88:	f008 081f 	and.w	r8, r8, #31
 810aa8c:	fa03 f308 	lsl.w	r3, r3, r8
 810aa90:	4213      	tst	r3, r2
 810aa92:	4631      	mov	r1, r6
 810aa94:	4620      	mov	r0, r4
 810aa96:	bf18      	it	ne
 810aa98:	f04b 0b02 	orrne.w	fp, fp, #2
 810aa9c:	1bad      	subs	r5, r5, r6
 810aa9e:	f7ff fe07 	bl	810a6b0 <rshift>
 810aaa2:	687e      	ldr	r6, [r7, #4]
 810aaa4:	f04f 0802 	mov.w	r8, #2
 810aaa8:	f1bb 0f00 	cmp.w	fp, #0
 810aaac:	d04a      	beq.n	810ab44 <__gethex+0x3c4>
 810aaae:	68fb      	ldr	r3, [r7, #12]
 810aab0:	2b02      	cmp	r3, #2
 810aab2:	d016      	beq.n	810aae2 <__gethex+0x362>
 810aab4:	2b03      	cmp	r3, #3
 810aab6:	d018      	beq.n	810aaea <__gethex+0x36a>
 810aab8:	2b01      	cmp	r3, #1
 810aaba:	d109      	bne.n	810aad0 <__gethex+0x350>
 810aabc:	f01b 0f02 	tst.w	fp, #2
 810aac0:	d006      	beq.n	810aad0 <__gethex+0x350>
 810aac2:	f8da 3000 	ldr.w	r3, [sl]
 810aac6:	ea4b 0b03 	orr.w	fp, fp, r3
 810aaca:	f01b 0f01 	tst.w	fp, #1
 810aace:	d10f      	bne.n	810aaf0 <__gethex+0x370>
 810aad0:	f048 0810 	orr.w	r8, r8, #16
 810aad4:	e036      	b.n	810ab44 <__gethex+0x3c4>
 810aad6:	f04f 0b01 	mov.w	fp, #1
 810aada:	e7d0      	b.n	810aa7e <__gethex+0x2fe>
 810aadc:	f04f 0801 	mov.w	r8, #1
 810aae0:	e7e2      	b.n	810aaa8 <__gethex+0x328>
 810aae2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aae4:	f1c3 0301 	rsb	r3, r3, #1
 810aae8:	930f      	str	r3, [sp, #60]	; 0x3c
 810aaea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 810aaec:	2b00      	cmp	r3, #0
 810aaee:	d0ef      	beq.n	810aad0 <__gethex+0x350>
 810aaf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 810aaf4:	f104 0214 	add.w	r2, r4, #20
 810aaf8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 810aafc:	9301      	str	r3, [sp, #4]
 810aafe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 810ab02:	2300      	movs	r3, #0
 810ab04:	4694      	mov	ip, r2
 810ab06:	f852 1b04 	ldr.w	r1, [r2], #4
 810ab0a:	f1b1 3fff 	cmp.w	r1, #4294967295
 810ab0e:	d01e      	beq.n	810ab4e <__gethex+0x3ce>
 810ab10:	3101      	adds	r1, #1
 810ab12:	f8cc 1000 	str.w	r1, [ip]
 810ab16:	f1b8 0f02 	cmp.w	r8, #2
 810ab1a:	f104 0214 	add.w	r2, r4, #20
 810ab1e:	d13d      	bne.n	810ab9c <__gethex+0x41c>
 810ab20:	683b      	ldr	r3, [r7, #0]
 810ab22:	3b01      	subs	r3, #1
 810ab24:	42ab      	cmp	r3, r5
 810ab26:	d10b      	bne.n	810ab40 <__gethex+0x3c0>
 810ab28:	1169      	asrs	r1, r5, #5
 810ab2a:	2301      	movs	r3, #1
 810ab2c:	f005 051f 	and.w	r5, r5, #31
 810ab30:	fa03 f505 	lsl.w	r5, r3, r5
 810ab34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ab38:	421d      	tst	r5, r3
 810ab3a:	bf18      	it	ne
 810ab3c:	f04f 0801 	movne.w	r8, #1
 810ab40:	f048 0820 	orr.w	r8, r8, #32
 810ab44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 810ab46:	601c      	str	r4, [r3, #0]
 810ab48:	9b02      	ldr	r3, [sp, #8]
 810ab4a:	601e      	str	r6, [r3, #0]
 810ab4c:	e6a2      	b.n	810a894 <__gethex+0x114>
 810ab4e:	4290      	cmp	r0, r2
 810ab50:	f842 3c04 	str.w	r3, [r2, #-4]
 810ab54:	d8d6      	bhi.n	810ab04 <__gethex+0x384>
 810ab56:	68a2      	ldr	r2, [r4, #8]
 810ab58:	4593      	cmp	fp, r2
 810ab5a:	db17      	blt.n	810ab8c <__gethex+0x40c>
 810ab5c:	6861      	ldr	r1, [r4, #4]
 810ab5e:	4648      	mov	r0, r9
 810ab60:	3101      	adds	r1, #1
 810ab62:	f7fd fe0b 	bl	810877c <_Balloc>
 810ab66:	4682      	mov	sl, r0
 810ab68:	b918      	cbnz	r0, 810ab72 <__gethex+0x3f2>
 810ab6a:	4b1b      	ldr	r3, [pc, #108]	; (810abd8 <__gethex+0x458>)
 810ab6c:	4602      	mov	r2, r0
 810ab6e:	2184      	movs	r1, #132	; 0x84
 810ab70:	e6b3      	b.n	810a8da <__gethex+0x15a>
 810ab72:	6922      	ldr	r2, [r4, #16]
 810ab74:	3202      	adds	r2, #2
 810ab76:	f104 010c 	add.w	r1, r4, #12
 810ab7a:	0092      	lsls	r2, r2, #2
 810ab7c:	300c      	adds	r0, #12
 810ab7e:	f7ff fd4b 	bl	810a618 <memcpy>
 810ab82:	4621      	mov	r1, r4
 810ab84:	4648      	mov	r0, r9
 810ab86:	f7fd fe39 	bl	81087fc <_Bfree>
 810ab8a:	4654      	mov	r4, sl
 810ab8c:	6922      	ldr	r2, [r4, #16]
 810ab8e:	1c51      	adds	r1, r2, #1
 810ab90:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 810ab94:	6121      	str	r1, [r4, #16]
 810ab96:	2101      	movs	r1, #1
 810ab98:	6151      	str	r1, [r2, #20]
 810ab9a:	e7bc      	b.n	810ab16 <__gethex+0x396>
 810ab9c:	6921      	ldr	r1, [r4, #16]
 810ab9e:	4559      	cmp	r1, fp
 810aba0:	dd0b      	ble.n	810abba <__gethex+0x43a>
 810aba2:	2101      	movs	r1, #1
 810aba4:	4620      	mov	r0, r4
 810aba6:	f7ff fd83 	bl	810a6b0 <rshift>
 810abaa:	68bb      	ldr	r3, [r7, #8]
 810abac:	3601      	adds	r6, #1
 810abae:	42b3      	cmp	r3, r6
 810abb0:	f6ff aedb 	blt.w	810a96a <__gethex+0x1ea>
 810abb4:	f04f 0801 	mov.w	r8, #1
 810abb8:	e7c2      	b.n	810ab40 <__gethex+0x3c0>
 810abba:	f015 051f 	ands.w	r5, r5, #31
 810abbe:	d0f9      	beq.n	810abb4 <__gethex+0x434>
 810abc0:	9b01      	ldr	r3, [sp, #4]
 810abc2:	441a      	add	r2, r3
 810abc4:	f1c5 0520 	rsb	r5, r5, #32
 810abc8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 810abcc:	f7fd fec8 	bl	8108960 <__hi0bits>
 810abd0:	42a8      	cmp	r0, r5
 810abd2:	dbe6      	blt.n	810aba2 <__gethex+0x422>
 810abd4:	e7ee      	b.n	810abb4 <__gethex+0x434>
 810abd6:	bf00      	nop
 810abd8:	0810b079 	.word	0x0810b079

0810abdc <L_shift>:
 810abdc:	f1c2 0208 	rsb	r2, r2, #8
 810abe0:	0092      	lsls	r2, r2, #2
 810abe2:	b570      	push	{r4, r5, r6, lr}
 810abe4:	f1c2 0620 	rsb	r6, r2, #32
 810abe8:	6843      	ldr	r3, [r0, #4]
 810abea:	6804      	ldr	r4, [r0, #0]
 810abec:	fa03 f506 	lsl.w	r5, r3, r6
 810abf0:	432c      	orrs	r4, r5
 810abf2:	40d3      	lsrs	r3, r2
 810abf4:	6004      	str	r4, [r0, #0]
 810abf6:	f840 3f04 	str.w	r3, [r0, #4]!
 810abfa:	4288      	cmp	r0, r1
 810abfc:	d3f4      	bcc.n	810abe8 <L_shift+0xc>
 810abfe:	bd70      	pop	{r4, r5, r6, pc}

0810ac00 <__match>:
 810ac00:	b530      	push	{r4, r5, lr}
 810ac02:	6803      	ldr	r3, [r0, #0]
 810ac04:	3301      	adds	r3, #1
 810ac06:	f811 4b01 	ldrb.w	r4, [r1], #1
 810ac0a:	b914      	cbnz	r4, 810ac12 <__match+0x12>
 810ac0c:	6003      	str	r3, [r0, #0]
 810ac0e:	2001      	movs	r0, #1
 810ac10:	bd30      	pop	{r4, r5, pc}
 810ac12:	f813 2b01 	ldrb.w	r2, [r3], #1
 810ac16:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 810ac1a:	2d19      	cmp	r5, #25
 810ac1c:	bf98      	it	ls
 810ac1e:	3220      	addls	r2, #32
 810ac20:	42a2      	cmp	r2, r4
 810ac22:	d0f0      	beq.n	810ac06 <__match+0x6>
 810ac24:	2000      	movs	r0, #0
 810ac26:	e7f3      	b.n	810ac10 <__match+0x10>

0810ac28 <__hexnan>:
 810ac28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810ac2c:	680b      	ldr	r3, [r1, #0]
 810ac2e:	6801      	ldr	r1, [r0, #0]
 810ac30:	115e      	asrs	r6, r3, #5
 810ac32:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 810ac36:	f013 031f 	ands.w	r3, r3, #31
 810ac3a:	b087      	sub	sp, #28
 810ac3c:	bf18      	it	ne
 810ac3e:	3604      	addne	r6, #4
 810ac40:	2500      	movs	r5, #0
 810ac42:	1f37      	subs	r7, r6, #4
 810ac44:	4682      	mov	sl, r0
 810ac46:	4690      	mov	r8, r2
 810ac48:	9301      	str	r3, [sp, #4]
 810ac4a:	f846 5c04 	str.w	r5, [r6, #-4]
 810ac4e:	46b9      	mov	r9, r7
 810ac50:	463c      	mov	r4, r7
 810ac52:	9502      	str	r5, [sp, #8]
 810ac54:	46ab      	mov	fp, r5
 810ac56:	784a      	ldrb	r2, [r1, #1]
 810ac58:	1c4b      	adds	r3, r1, #1
 810ac5a:	9303      	str	r3, [sp, #12]
 810ac5c:	b342      	cbz	r2, 810acb0 <__hexnan+0x88>
 810ac5e:	4610      	mov	r0, r2
 810ac60:	9105      	str	r1, [sp, #20]
 810ac62:	9204      	str	r2, [sp, #16]
 810ac64:	f7ff fd76 	bl	810a754 <__hexdig_fun>
 810ac68:	2800      	cmp	r0, #0
 810ac6a:	d14f      	bne.n	810ad0c <__hexnan+0xe4>
 810ac6c:	9a04      	ldr	r2, [sp, #16]
 810ac6e:	9905      	ldr	r1, [sp, #20]
 810ac70:	2a20      	cmp	r2, #32
 810ac72:	d818      	bhi.n	810aca6 <__hexnan+0x7e>
 810ac74:	9b02      	ldr	r3, [sp, #8]
 810ac76:	459b      	cmp	fp, r3
 810ac78:	dd13      	ble.n	810aca2 <__hexnan+0x7a>
 810ac7a:	454c      	cmp	r4, r9
 810ac7c:	d206      	bcs.n	810ac8c <__hexnan+0x64>
 810ac7e:	2d07      	cmp	r5, #7
 810ac80:	dc04      	bgt.n	810ac8c <__hexnan+0x64>
 810ac82:	462a      	mov	r2, r5
 810ac84:	4649      	mov	r1, r9
 810ac86:	4620      	mov	r0, r4
 810ac88:	f7ff ffa8 	bl	810abdc <L_shift>
 810ac8c:	4544      	cmp	r4, r8
 810ac8e:	d950      	bls.n	810ad32 <__hexnan+0x10a>
 810ac90:	2300      	movs	r3, #0
 810ac92:	f1a4 0904 	sub.w	r9, r4, #4
 810ac96:	f844 3c04 	str.w	r3, [r4, #-4]
 810ac9a:	f8cd b008 	str.w	fp, [sp, #8]
 810ac9e:	464c      	mov	r4, r9
 810aca0:	461d      	mov	r5, r3
 810aca2:	9903      	ldr	r1, [sp, #12]
 810aca4:	e7d7      	b.n	810ac56 <__hexnan+0x2e>
 810aca6:	2a29      	cmp	r2, #41	; 0x29
 810aca8:	d155      	bne.n	810ad56 <__hexnan+0x12e>
 810acaa:	3102      	adds	r1, #2
 810acac:	f8ca 1000 	str.w	r1, [sl]
 810acb0:	f1bb 0f00 	cmp.w	fp, #0
 810acb4:	d04f      	beq.n	810ad56 <__hexnan+0x12e>
 810acb6:	454c      	cmp	r4, r9
 810acb8:	d206      	bcs.n	810acc8 <__hexnan+0xa0>
 810acba:	2d07      	cmp	r5, #7
 810acbc:	dc04      	bgt.n	810acc8 <__hexnan+0xa0>
 810acbe:	462a      	mov	r2, r5
 810acc0:	4649      	mov	r1, r9
 810acc2:	4620      	mov	r0, r4
 810acc4:	f7ff ff8a 	bl	810abdc <L_shift>
 810acc8:	4544      	cmp	r4, r8
 810acca:	d934      	bls.n	810ad36 <__hexnan+0x10e>
 810accc:	f1a8 0204 	sub.w	r2, r8, #4
 810acd0:	4623      	mov	r3, r4
 810acd2:	f853 1b04 	ldr.w	r1, [r3], #4
 810acd6:	f842 1f04 	str.w	r1, [r2, #4]!
 810acda:	429f      	cmp	r7, r3
 810acdc:	d2f9      	bcs.n	810acd2 <__hexnan+0xaa>
 810acde:	1b3b      	subs	r3, r7, r4
 810ace0:	f023 0303 	bic.w	r3, r3, #3
 810ace4:	3304      	adds	r3, #4
 810ace6:	3e03      	subs	r6, #3
 810ace8:	3401      	adds	r4, #1
 810acea:	42a6      	cmp	r6, r4
 810acec:	bf38      	it	cc
 810acee:	2304      	movcc	r3, #4
 810acf0:	4443      	add	r3, r8
 810acf2:	2200      	movs	r2, #0
 810acf4:	f843 2b04 	str.w	r2, [r3], #4
 810acf8:	429f      	cmp	r7, r3
 810acfa:	d2fb      	bcs.n	810acf4 <__hexnan+0xcc>
 810acfc:	683b      	ldr	r3, [r7, #0]
 810acfe:	b91b      	cbnz	r3, 810ad08 <__hexnan+0xe0>
 810ad00:	4547      	cmp	r7, r8
 810ad02:	d126      	bne.n	810ad52 <__hexnan+0x12a>
 810ad04:	2301      	movs	r3, #1
 810ad06:	603b      	str	r3, [r7, #0]
 810ad08:	2005      	movs	r0, #5
 810ad0a:	e025      	b.n	810ad58 <__hexnan+0x130>
 810ad0c:	3501      	adds	r5, #1
 810ad0e:	2d08      	cmp	r5, #8
 810ad10:	f10b 0b01 	add.w	fp, fp, #1
 810ad14:	dd06      	ble.n	810ad24 <__hexnan+0xfc>
 810ad16:	4544      	cmp	r4, r8
 810ad18:	d9c3      	bls.n	810aca2 <__hexnan+0x7a>
 810ad1a:	2300      	movs	r3, #0
 810ad1c:	f844 3c04 	str.w	r3, [r4, #-4]
 810ad20:	2501      	movs	r5, #1
 810ad22:	3c04      	subs	r4, #4
 810ad24:	6822      	ldr	r2, [r4, #0]
 810ad26:	f000 000f 	and.w	r0, r0, #15
 810ad2a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 810ad2e:	6020      	str	r0, [r4, #0]
 810ad30:	e7b7      	b.n	810aca2 <__hexnan+0x7a>
 810ad32:	2508      	movs	r5, #8
 810ad34:	e7b5      	b.n	810aca2 <__hexnan+0x7a>
 810ad36:	9b01      	ldr	r3, [sp, #4]
 810ad38:	2b00      	cmp	r3, #0
 810ad3a:	d0df      	beq.n	810acfc <__hexnan+0xd4>
 810ad3c:	f1c3 0320 	rsb	r3, r3, #32
 810ad40:	f04f 32ff 	mov.w	r2, #4294967295
 810ad44:	40da      	lsrs	r2, r3
 810ad46:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810ad4a:	4013      	ands	r3, r2
 810ad4c:	f846 3c04 	str.w	r3, [r6, #-4]
 810ad50:	e7d4      	b.n	810acfc <__hexnan+0xd4>
 810ad52:	3f04      	subs	r7, #4
 810ad54:	e7d2      	b.n	810acfc <__hexnan+0xd4>
 810ad56:	2004      	movs	r0, #4
 810ad58:	b007      	add	sp, #28
 810ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0810ad5e <__ascii_mbtowc>:
 810ad5e:	b082      	sub	sp, #8
 810ad60:	b901      	cbnz	r1, 810ad64 <__ascii_mbtowc+0x6>
 810ad62:	a901      	add	r1, sp, #4
 810ad64:	b142      	cbz	r2, 810ad78 <__ascii_mbtowc+0x1a>
 810ad66:	b14b      	cbz	r3, 810ad7c <__ascii_mbtowc+0x1e>
 810ad68:	7813      	ldrb	r3, [r2, #0]
 810ad6a:	600b      	str	r3, [r1, #0]
 810ad6c:	7812      	ldrb	r2, [r2, #0]
 810ad6e:	1e10      	subs	r0, r2, #0
 810ad70:	bf18      	it	ne
 810ad72:	2001      	movne	r0, #1
 810ad74:	b002      	add	sp, #8
 810ad76:	4770      	bx	lr
 810ad78:	4610      	mov	r0, r2
 810ad7a:	e7fb      	b.n	810ad74 <__ascii_mbtowc+0x16>
 810ad7c:	f06f 0001 	mvn.w	r0, #1
 810ad80:	e7f8      	b.n	810ad74 <__ascii_mbtowc+0x16>

0810ad82 <_realloc_r>:
 810ad82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810ad86:	4680      	mov	r8, r0
 810ad88:	4614      	mov	r4, r2
 810ad8a:	460e      	mov	r6, r1
 810ad8c:	b921      	cbnz	r1, 810ad98 <_realloc_r+0x16>
 810ad8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810ad92:	4611      	mov	r1, r2
 810ad94:	f7fd bc66 	b.w	8108664 <_malloc_r>
 810ad98:	b92a      	cbnz	r2, 810ada6 <_realloc_r+0x24>
 810ad9a:	f7fd fbef 	bl	810857c <_free_r>
 810ad9e:	4625      	mov	r5, r4
 810ada0:	4628      	mov	r0, r5
 810ada2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810ada6:	f000 f842 	bl	810ae2e <_malloc_usable_size_r>
 810adaa:	4284      	cmp	r4, r0
 810adac:	4607      	mov	r7, r0
 810adae:	d802      	bhi.n	810adb6 <_realloc_r+0x34>
 810adb0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 810adb4:	d812      	bhi.n	810addc <_realloc_r+0x5a>
 810adb6:	4621      	mov	r1, r4
 810adb8:	4640      	mov	r0, r8
 810adba:	f7fd fc53 	bl	8108664 <_malloc_r>
 810adbe:	4605      	mov	r5, r0
 810adc0:	2800      	cmp	r0, #0
 810adc2:	d0ed      	beq.n	810ada0 <_realloc_r+0x1e>
 810adc4:	42bc      	cmp	r4, r7
 810adc6:	4622      	mov	r2, r4
 810adc8:	4631      	mov	r1, r6
 810adca:	bf28      	it	cs
 810adcc:	463a      	movcs	r2, r7
 810adce:	f7ff fc23 	bl	810a618 <memcpy>
 810add2:	4631      	mov	r1, r6
 810add4:	4640      	mov	r0, r8
 810add6:	f7fd fbd1 	bl	810857c <_free_r>
 810adda:	e7e1      	b.n	810ada0 <_realloc_r+0x1e>
 810addc:	4635      	mov	r5, r6
 810adde:	e7df      	b.n	810ada0 <_realloc_r+0x1e>

0810ade0 <__ascii_wctomb>:
 810ade0:	b149      	cbz	r1, 810adf6 <__ascii_wctomb+0x16>
 810ade2:	2aff      	cmp	r2, #255	; 0xff
 810ade4:	bf85      	ittet	hi
 810ade6:	238a      	movhi	r3, #138	; 0x8a
 810ade8:	6003      	strhi	r3, [r0, #0]
 810adea:	700a      	strbls	r2, [r1, #0]
 810adec:	f04f 30ff 	movhi.w	r0, #4294967295
 810adf0:	bf98      	it	ls
 810adf2:	2001      	movls	r0, #1
 810adf4:	4770      	bx	lr
 810adf6:	4608      	mov	r0, r1
 810adf8:	4770      	bx	lr
	...

0810adfc <fiprintf>:
 810adfc:	b40e      	push	{r1, r2, r3}
 810adfe:	b503      	push	{r0, r1, lr}
 810ae00:	4601      	mov	r1, r0
 810ae02:	ab03      	add	r3, sp, #12
 810ae04:	4805      	ldr	r0, [pc, #20]	; (810ae1c <fiprintf+0x20>)
 810ae06:	f853 2b04 	ldr.w	r2, [r3], #4
 810ae0a:	6800      	ldr	r0, [r0, #0]
 810ae0c:	9301      	str	r3, [sp, #4]
 810ae0e:	f7ff f97b 	bl	810a108 <_vfiprintf_r>
 810ae12:	b002      	add	sp, #8
 810ae14:	f85d eb04 	ldr.w	lr, [sp], #4
 810ae18:	b003      	add	sp, #12
 810ae1a:	4770      	bx	lr
 810ae1c:	10000074 	.word	0x10000074

0810ae20 <abort>:
 810ae20:	b508      	push	{r3, lr}
 810ae22:	2006      	movs	r0, #6
 810ae24:	f000 f834 	bl	810ae90 <raise>
 810ae28:	2001      	movs	r0, #1
 810ae2a:	f7f6 fe78 	bl	8101b1e <_exit>

0810ae2e <_malloc_usable_size_r>:
 810ae2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810ae32:	1f18      	subs	r0, r3, #4
 810ae34:	2b00      	cmp	r3, #0
 810ae36:	bfbc      	itt	lt
 810ae38:	580b      	ldrlt	r3, [r1, r0]
 810ae3a:	18c0      	addlt	r0, r0, r3
 810ae3c:	4770      	bx	lr

0810ae3e <_raise_r>:
 810ae3e:	291f      	cmp	r1, #31
 810ae40:	b538      	push	{r3, r4, r5, lr}
 810ae42:	4604      	mov	r4, r0
 810ae44:	460d      	mov	r5, r1
 810ae46:	d904      	bls.n	810ae52 <_raise_r+0x14>
 810ae48:	2316      	movs	r3, #22
 810ae4a:	6003      	str	r3, [r0, #0]
 810ae4c:	f04f 30ff 	mov.w	r0, #4294967295
 810ae50:	bd38      	pop	{r3, r4, r5, pc}
 810ae52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 810ae54:	b112      	cbz	r2, 810ae5c <_raise_r+0x1e>
 810ae56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 810ae5a:	b94b      	cbnz	r3, 810ae70 <_raise_r+0x32>
 810ae5c:	4620      	mov	r0, r4
 810ae5e:	f000 f831 	bl	810aec4 <_getpid_r>
 810ae62:	462a      	mov	r2, r5
 810ae64:	4601      	mov	r1, r0
 810ae66:	4620      	mov	r0, r4
 810ae68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810ae6c:	f000 b818 	b.w	810aea0 <_kill_r>
 810ae70:	2b01      	cmp	r3, #1
 810ae72:	d00a      	beq.n	810ae8a <_raise_r+0x4c>
 810ae74:	1c59      	adds	r1, r3, #1
 810ae76:	d103      	bne.n	810ae80 <_raise_r+0x42>
 810ae78:	2316      	movs	r3, #22
 810ae7a:	6003      	str	r3, [r0, #0]
 810ae7c:	2001      	movs	r0, #1
 810ae7e:	e7e7      	b.n	810ae50 <_raise_r+0x12>
 810ae80:	2400      	movs	r4, #0
 810ae82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 810ae86:	4628      	mov	r0, r5
 810ae88:	4798      	blx	r3
 810ae8a:	2000      	movs	r0, #0
 810ae8c:	e7e0      	b.n	810ae50 <_raise_r+0x12>
	...

0810ae90 <raise>:
 810ae90:	4b02      	ldr	r3, [pc, #8]	; (810ae9c <raise+0xc>)
 810ae92:	4601      	mov	r1, r0
 810ae94:	6818      	ldr	r0, [r3, #0]
 810ae96:	f7ff bfd2 	b.w	810ae3e <_raise_r>
 810ae9a:	bf00      	nop
 810ae9c:	10000074 	.word	0x10000074

0810aea0 <_kill_r>:
 810aea0:	b538      	push	{r3, r4, r5, lr}
 810aea2:	4d07      	ldr	r5, [pc, #28]	; (810aec0 <_kill_r+0x20>)
 810aea4:	2300      	movs	r3, #0
 810aea6:	4604      	mov	r4, r0
 810aea8:	4608      	mov	r0, r1
 810aeaa:	4611      	mov	r1, r2
 810aeac:	602b      	str	r3, [r5, #0]
 810aeae:	f7f6 fe26 	bl	8101afe <_kill>
 810aeb2:	1c43      	adds	r3, r0, #1
 810aeb4:	d102      	bne.n	810aebc <_kill_r+0x1c>
 810aeb6:	682b      	ldr	r3, [r5, #0]
 810aeb8:	b103      	cbz	r3, 810aebc <_kill_r+0x1c>
 810aeba:	6023      	str	r3, [r4, #0]
 810aebc:	bd38      	pop	{r3, r4, r5, pc}
 810aebe:	bf00      	nop
 810aec0:	10000430 	.word	0x10000430

0810aec4 <_getpid_r>:
 810aec4:	f7f6 be13 	b.w	8101aee <_getpid>

0810aec8 <_init>:
 810aec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aeca:	bf00      	nop
 810aecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aece:	bc08      	pop	{r3}
 810aed0:	469e      	mov	lr, r3
 810aed2:	4770      	bx	lr

0810aed4 <_fini>:
 810aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810aed6:	bf00      	nop
 810aed8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810aeda:	bc08      	pop	{r3}
 810aedc:	469e      	mov	lr, r3
 810aede:	4770      	bx	lr
